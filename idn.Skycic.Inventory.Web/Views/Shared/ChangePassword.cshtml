
@{

    const string title = "Đổi mật khẩu";
    ViewBag.Title = title;

}

<div class="modal-dialog" style="width: 500px!important;">
    @using (Html.BeginForm(null, null, FormMethod.Get, new { id = "manageFormPopupChangePassword", @class = "form-horizontal" }))
    {
        @Html.AntiForgeryToken()
        <div class="modal-content">
            <div class="modal-header">
                <a href="javascript:;" onclick="ClosePopupModelChangePassword()" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></a>
                <h2 class="modal-title" id="exampleModalLabel"><b>@MvcHtmlString.Create(title)</b></h2>
            </div>
            <div class="modal-body" style="height: 150px;">
                <div class="form-group margin-bottom-5">
                    <label for="pass" class="col-xs-12 col-sm-5 control-label no-padding-right font-weight-500">Mật khẩu cũ</label>
                    <div class="col-xs-12 col-sm-7">
                        <span class="block input-icon input-icon-right">
                            <input type="password" id="pass" name="pass" class="col-xs-11 pass" value="" autocomplete="off" required />
                        </span>
                        <label class="span-input" style="color: red; padding-left: 9px; padding-top: 10px;">*</label>
                    </div>
                </div>
                <div class="form-group margin-bottom-5">
                    <label for="passnew" class="col-xs-12 col-sm-5 control-label no-padding-right font-weight-500">Mật khẩu mới</label>
                    <div class="col-xs-12 col-sm-7">
                        <span class="block input-icon input-icon-right">
                            <input type="password" id="passnew" name="passnew" class="col-xs-11 passnew" value="" autocomplete="off" required />
                        </span>
                        <label class="span-input" style="color: red; padding-left:9px; padding-top: 10px;">*</label>
                    </div>
                </div>
                <div class="form-group margin-bottom-5">
                    <label for="confpass" class="col-xs-12 col-sm-5 control-label no-padding-right font-weight-500">Nhập lại mật khẩu mới</label>
                    <div class="col-xs-12 col-sm-7">
                        <span class="block input-icon input-icon-right">
                            <input type="password" id="confpass" name="confpass" class="col-xs-11 confpass" value="" autocomplete="off" required />
                        </span>
                        <label class="span-input" style="color: red; padding-left: 9px; padding-top: 10px;">*</label>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <a class="btn font-color mybtn-Button" onclick="ChangePassword()" href="javascript:void(0);" style="margin-left: 10px; "><i class="ace-icon fa fa-floppy-o bigger-110"></i>Cập nhật</a>

            </div>
        </div>
    }
</div>

<script type="text/javascript">
    function validationForm()
    {
        if (!CheckIsNullOrEmpty('#pass', 'has-error-fix', '@MvcHtmlString.Create("Mật khẩu cũ không được trống!")'))
        {
            return false;
        }
        var pass = ReturnValueText('#pass');
        if (pass.trim().length < 6) {
            alert("Mật khẩu cũ từ 6 ký tự trở lên!");
            return false;
        }
        if (!CheckIsNullOrEmpty('#passnew', 'has-error-fix', '@MvcHtmlString.Create("Mật khẩu mới không được trống!")'))
        {
            return false;
        }
        var password = ReturnValueText('#passnew');
        if (password.trim().length < 6)
        {
            alert('@MvcHtmlString.Create("Mật khẩu mới > 5 ký tự!")');
            AddClassCss('#passnew', 'has-error-fix');
            $('#passnew').focus();
            return false;
        }
        else
        {
            RemoveClassCss('#passnew', 'has-error-fix');
        }
        if (!CheckIsNullOrEmpty('#confpass', 'has-error-fix', '@MvcHtmlString.Create("Nhập lại khẩu mới trống!")'))
        {
            return false;
        }
        var confirmpassword = ReturnValueText('#confpass');
        if (confirmpassword.trim().length < 6)
        {
            alert('@MvcHtmlString.Create("Nhập lại mật khẩu mới > 5 ký tự!")');
            AddClassCss('#confpass', 'has-error-fix');
            $('#confpass').focus();
            return false;
        }
        else {
            RemoveClassCss('#confpass', 'has-error-fix');
        }
        if (password !== confirmpassword)
        {
            alert('@MvcHtmlString.Create("Nhập lại mật khẩu mới không đúng, xin vui lòng nhập lại!")');
            AddClassCss('#confpass', 'has-error-fix');
            $('#confpass').focus();
            return false;
        }
        else
        {
            RemoveClassCss('#confpass', 'has-error-fix');
        }
        return true;
    }

    function ChangePassword()
    {
        var check = validationForm();

        if (check)
        {
            var pass = ReturnValueText('#pass');
            var passnew = ReturnValueText('#passnew');
            var confpass = ReturnValueText('#confpass');
            var url = '@Url.Action("ChangePassword", "Account")';
            var token = $('#manageFormPopupChangePassword input[name=__RequestVerificationToken]').val();
            $.ajax({
                url: url,
                data: {
                    __RequestVerificationToken: token
                    , pass: pass
                    , passnew: passnew
                    , confpass: confpass
                },
                type: 'post',
                dataType: 'json',
                traditional: true,
                success: function (data) {
                    if (data.Success) {
                        debugger;
                        if (data.Messages !== null && data.Messages !== undefined && data.Messages.length > 0) {
                            alert(data.Messages[0]);
                            ClosePopupModelChangePassword();
                        }
                        if (!IsNullOrEmpty(data.RedirectUrl)) {
                            window.location.href = data.RedirectUrl;
                        }
                    }
                    else {
                        if (!IsNullOrEmpty(data.Detail)) {
                            _showErrorMsg123("Lỗi!", data.Detail);
                        }
                    }
                }, error: function (xmlHttpRequest, textStatus, errorThrown) {
                    debugger;
                    if (textStatus === 'Unauthorized') {
                        alert('custom message. Error: ' + errorThrown);
                    } else {
                        //alert('custom message. Error2: ' + errorThrown);
                    }
                }
            });
        }


    }
</script>



