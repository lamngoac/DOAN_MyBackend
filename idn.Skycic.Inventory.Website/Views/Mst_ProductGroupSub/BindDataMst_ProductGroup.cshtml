@model PageInfo<Mst_ProductGroup>
@{
    var init = CUtils.StrValue(ViewBag.init);
    var pageCur = CUtils.StrValue(ViewBag.PageCur);
    var recordCount = CUtils.StrValue(ViewBag.RecordCount);
    var totalPage = "0";
    var showtext = "";
    if (Model != null)
    {
        totalPage = CUtils.StrValue(Model.PageCount);
    }
    var offset = 7;

    if (Model.ItemCount > 0)
    {
        totalPage = CUtils.StrValue(Model.PageCount);
        var recordstart = (Model.PageIndex) * Model.PageSize + 1;
        var recordend = (Model.PageIndex + 1) * Model.PageSize;
        if (recordend > Model.ItemCount)
        {
            recordend = Model.ItemCount;
        }
        showtext = recordstart + "-" + recordend + " trong số " + Model.ItemCount;
    }
}


<input type="hidden" id="page" value="@ViewBag.PageCur" />
<input type="hidden" id="totalpage" value="@Model.PageCount" />

<div class="layout-bot-top-16" style="">
    <div class="row">
        <div class="col-6">
            @RenderItemFormat("BTN_QL_NHOM_HANG_TAO_MOI", "<a onclick=\"ShowPopupCreate()\" class=\"btn btn-nc-button\" style=\"\"><i class=\"fa fa-plus-circle\" aria-hidden=\"true\"></i> Tạo</a>", "", "")
            @RenderItemFormat("BTN_QL_NHOM_HANG_XOA", "<a href=\"javascript: void(0); \" class=\"btn btn-nc-button\" style=\"\" onclick=\"DeleteMulti();\"><i class=\"fa fa-trash-alt\" aria-hidden=\"true\"></i> Xóa</a>", "", "")
            @RenderItemFormat("BTN_QL_NHOM_HANG_EXPORT_EXCEL", "<a href=\"javascript: void(0); \" class=\"btn btn-nc-button\" style=\"\" onclick=\"Export();\"><i class=\"fas fa-download\" aria-hidden=\"true\"></i> Xuất Excel</a>", "", "")

            <span class="search-bar" style="margin-left:5px;margin-top:3px;">
                <input type="text" id="dynamic-table-thead-search" class="quicksearch txtSearchObj" name="search">
                <input type="text" class="quicksearch1 txtSearchObj1" name="search" style="z-index: -1000; height: 0; padding: 0; margin: 0; border: 0">
            </span>
        </div>
        <div class="col-6">
            @if (CheckAccess("BTN_QL_NHOM_HANG_TIMKIEM"))
            {
                @Html.Partial("Pagination", null, new ViewDataDictionary() { { "PageCur", MvcHtmlString.Create(pageCur) }, { "RecordCount", MvcHtmlString.Create(recordCount) }, { "ShowText", showtext } })
            }
        </div>
    </div>
</div>

<div class="panel-body no-padding" id="panel-body" style="padding-left: 0px; padding-right: 0px;">
    <aside class="col-12 layout-table no-padding">
        @Html.AntiForgeryToken()
        <div class="scrollable-horizontal padding-left-0 padding-right-0" style="padding-top: 0!important;">
            <div style="width: 100%; float: left;">
                <table id="dynamic-table-thead" class="table table-bordered table-thead table-cus table-bottom-0 no-margin">
                    <thead class="thead-mstproductgroup">
                        <tr class="trthead">
                            <th fieldId="CONTROL" fieldName="CONTROL" fieldActive="0" class="text-center cell-50">
                                @*<input type="checkbox" class="cl-check" onclick="CheckAll(this);" name="check-box-all" />*@
                                <input type="checkbox" class="idn-checkbox" onclick="CheckAll(this);" id="check-box-all" name="check-box-all" />
                                <label for="check-box-all"><span></span></label>
                            </th>
                            <th fieldId="STT" fieldName="STT" fieldActive="0" class="text-center cell-50">
                                STT
                            </th>
                            @*<th fieldId="PRODUCTGRPCODE" fieldName="Mã nhóm hàng" fieldActive="0" sorttype="T" class="text-left cell-100">
                                @("Mã nhóm hàng".HtmlItemString("PRODUCTGRPCODE"))
                            </th>*@
                            <th fieldId="PRODUCTGRPNAME" fieldName="Tên loại hàng" fieldActive="0" sorttype="T" class="text-left cell-100">
                                @("Mã nhóm hàng".HtmlItemString("PRODUCTGRPNAME"))
                            </th>
                            <th fieldId="PRODUCTGRPDESC" fieldName="Tên loại hàng" fieldActive="0" sorttype="T" class="text-left cell-100">
                                @("Tên nhóm hàng".HtmlItemString("PRODUCTGRPDESC"))
                            </th>
                            <th fieldId="PRODUCTGRPCODEPARENT" fieldName="Nhóm hàng cha" fieldActive="0" sorttype="D" class="text-left cell-200">
                                @("Nhóm hàng cha".HtmlItemString("PRODUCTGRPCODEPARENT"))
                            </th>
                            <th fieldId="FLAGACTIVE" fieldName="Trạng thái" fieldActive="0" sorttype="T" class="text-left cell-100">
                                @("Trạng thái".HtmlItemString("FLAGACTIVE"))
                            </th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div id="scrollable_1" class="scrollable" style="width: 100%; float: left">
                <table id="dynamic-table-thead-tbody" class="table table-borderedtable-cus table-bottom-0 dynamic-table-tbody dynamic-table-thead-tbody no-margin">
                    <tbody id="table-tbodyID">
                        @if (Model != null && Model.DataList != null && Model.DataList.Count > 0)
                        {
                            var i = 1;
                            foreach (var item in Model.DataList)
                            {
                        <tr idx="@(i)" class="data-item trdata" ondblclick="ShowDetail('@item.ProductGrpCode')" ProductGrpCode="@CUtils.StrValue(item.ProductGrpCode)">
                            <input type="hidden" name="ListMst_PrdPrice[@i].ProductGrpCode" value="@item.ProductGrpCode" />
                            <input type="hidden" name="ListMst_PrdPrice[@i].ProductGrpName" value="@item.ProductGrpName" />
                            <input type="hidden" name="ListMst_PrdPrice[@i].ProductGrpCodeParent" value="@item.ProductGrpCodeParent" />
                            <input type="hidden" name="ListMst_PrdPrice[@i].FlagActive" value="@item.FlagActive" />
                            <td fieldId="CONTROL" class="text-center cell-50">
                                <input type="checkbox" class="idn-checkbox" onclick="checkBox_Mst_ProducGroup(this, $('.thead-mstproductgroup'), $('#table-tbodyID'));" id="ckb-@i" name="ckb" />
                                <label for="ckb-@i"><span></span></label>
                            </td>
                            <td fieldId="STT" class="text-center cell-50">
                                @i
                            </td>
                            @*<td fieldId="PRODUCTGRPCODE" class="text-left cell-100">
                                @(item.ProductGrpCode == null ? "" : item.ProductGrpCode)
                            </td>*@
                            <td fieldId="PRODUCTGRPNAME" class="text-left cell-100">
                                @(item.ProductGrpName == null ? "" : item.ProductGrpName)
                            </td>
                            <td fieldId="PRODUCTGRPDESC" class="text-left cell-100">
                                @(item.ProductGrpDesc == null ? "" : item.ProductGrpDesc)
                            </td>
                            <td fieldId="PRODUCTGRPCODEPARENT" class="text-left cell-200">
                                @(item.ProductGrpCodeParent == null ? "" : item.ProductGrpCodeParent)
                            </td>
                            <td fieldId="FLAGACTIVE" class="text-center cell-100">
                                @item.FlagActive
                            </td>
                        </tr>
                                i++;
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </aside>
</div>

<div class="modal fade" id="ImportModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h3 class="modal-title" id="exampleModalLabel">Nhập file Excel</h3>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "manageFormImportExcel" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="form-group margin-bottom-9">
                        <input type="file" name="file" id="file" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-nc-button no-margin-top-bot" data-dismiss="modal" id="btnThoat">Thoát</button>
                        <a href="javascript:void(0);" class="btn btn-nc-button no-margin-top-bot" onclick="Import()" id="btnSaveImport">Nhập</a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>



<script>
    function checkBox_Mst_ProducGroup(thiz, $thead, $tbody) {
        var c_all = false;
        if ($(thiz).is(":checked")) {
            c_all = true;
        }
        if (!c_all) {
            var $inputCheckBox_CheckAll = $thead.find('input.idn-checkbox');
            if ($inputCheckBox_CheckAll !== undefined && $inputCheckBox_CheckAll !== null) {
                $inputCheckBox_CheckAll.prop("checked", c_all);
            }
        }
        else {
            var rows = $tbody.find('tr.trdata').length;
            if (rows > 0) {
                var trArr = $tbody.find('tr.trdata').has('input[type=checkbox]:checked');
                if (trArr !== null) {
                    var trLength = trArr.length;
                    if (trLength === rows) {
                        $thead.find('input.idn-checkbox').prop("checked", c_all);
                    }
                    else {
                        $thead.find('input.idn-checkbox').prop("checked", !c_all);
                    }
                }
                else {
                    $thead.find('input.idn-checkbox').prop("checked", !c_all);
                }
            }
        }
    }
</script>
<script>
    $(document).ready(function () {
        tablesort();
    });

    function tablesort() {
        var listColumns = {
            'STT': [],
            'PRODUCTGRPCODEPARENT': [],
            'PRODUCTGRPCODE': [],
            'PRODUCTGRPNAME': [],
            'FLAGACTIVE': []
        };
        var options = {};
        options.Columns = listColumns;
        $('#dynamic-table-thead').table_Sortable(options);
    }
    $(document).ready(function () {
        tablesort();
    });
    var cookieName = "Mst_ProductGroupSub";
    document.addEventListener('DOMContentLoaded', function () {
        readCookies(cookieName);
        var checkboxs = document.querySelectorAll('#togglecolumn.ulshowdata input[type="checkbox"]');
        for (let checkbox of checkboxs) {
            checkbox.addEventListener('change', setCookie)
        }
    });

    function saveSelectedToCookie() {
        setCookie(cookieName, {
            path: '/',
            expires: 10
        });
    }
    function setCookie(name, options = {}) {
        var checkboxs = document.querySelectorAll('#togglecolumn.ulshowdata input[type="checkbox"]');
        var value = new Object();
        for (const ckb of checkboxs) {
            value[ckb.name] = ckb.checked === true ? "0" : "1";
        }
        let updatedCookie = encodeURIComponent(name) + "=" + encodeURIComponent(JSON.stringify(value));

        if (options.expires instanceof Date) {
            options.expires = options.expires.toUTCString();
        }

        for (let optionKey in options) {
            updatedCookie += "; " + optionKey;
            let optionValue = options[optionKey];
            if (optionValue !== true) {
                updatedCookie += "=" + optionValue;
            }
        }
        document.cookie = updatedCookie;
    }

    function readCookies(name) {
        var result = document.cookie.match(new RegExp(name + '=([^;]+)'));
        result && (result = JSON.parse(decodeURIComponent(result[1])));
        if (result != null && result != undefined) {
            for (const key in result) {
                $('#dynamic-table-thead').find('th[fieldid="' + key + '"]').attr('fieldactive', result[key]);
            }
        }
    }

     function CheckAll(thiz) {
         let trArr = $('#table-tbodyID tr');
        if (trArr !== null && trArr.length > 0) {
            for (var i = 0; i < trArr.length; i++) {
                var trCur = trArr[i];
                if (trCur !== null && trCur !== undefined) {
                    var inputCkb = $(trCur).find('input[type="checkbox"]');
                    var display = $(trCur).css("display");
                    if (display != "none") {
                        var check = false;
                        if ($(thiz).is(":checked")) {
                            check = true;
                        }
                        $(inputCkb).prop("checked", check);
                    }
                }
            }
        }
    }
    function CheckBox(thiz) {
        event.stopPropagation();
    }

    function DeleteMulti() {
        var count = $('#table-tbodyID input.idn-checkbox:checked').length;
        if (count == 0) {
            alert("Không có model nào được chọn.");
            return;
        }
        var lstProductGrpCode = [];
        $('#table-tbodyID input.idn-checkbox:checked').each(function () {
            var cb = $(this);
            var ProductGrpCode = cb.attr('ProductGrpCode');
            lstProductGrpCode.push(ProductGrpCode);
        });
        if (lstProductGrpCode.length == 0) return;
            bootbox.confirm("Đồng ý xóa model " + lstProductGrpCode + " ?", function (result) {
            if (result) {
                $.ajax({
                    url: '@Url.Action("DeleteMulti","Mst_ProductGroupSub")',
                    data: {
                        lstProductGrpCode: JSON.stringify(lstProductGrpCode)
                    },
                    type: 'post',
                    dataType: 'json',
                    traditional: true,
                    success: function (data) {
                        if (data.Success) {
                            alert(data.Messages);
                            if (data.RedirectUrl !== null) {
                                window.location.href = data.RedirectUrl;
                            }
                        } else {
                            showErrorDialog(data.Detail);
                        }
                    }
                });
            }
        });
    }

    function Export() {
        var formdata = new window.FormData($('#manageForm')[0]);
        $.ajax({
            url: '@Url.Action("Export","Mst_ProductGroupSub")',
            data: formdata,
            processData: false,
            contentType: false,
            dataType: 'json',
            type: 'POST',
            success: function (data) {
                if (data.Success) {
                    if (data !== null) {
                        alert(data.Title);
                        window.location.href = data.strUrl;
                    }
                } else {
                    showErrorDialog(data.Detail);
                }
            }
        });
    }

    function ExportTemplate() {
        $.ajax({
            url: '@Url.Action("ExportTemplate","Mst_ProductGroup")',
            processData: false,
            contentType: false,
            dataType: 'json',
            type: 'get',
            success: function (data) {
                if (data.Success) {
                    if (data !== null) {
                        alert(data.Title);
                        window.location.href = data.strUrl;
                    }
                } else {
                    showErrorDialog(data.Detail);
                }
            }
        });
    }

    function Import() {
        var file = $("#file").val();
        if (file.length == 0) {
            alert("Nhập file cần Import");
            return false;
        } else {
            var re = /[\.xlsx]{1,}$/i;
            var rex = /[\.xls]{1,}$/i;
            if (!re.test(file)) {
                alert('File excel nhập vào không hợp lệ');
                return false;
            } else {
                if (!rex.test(file)) {
                    alert('File excel nhập vào không hợp lệ');
                    return false;
                }
                var formdata = new window.FormData($('#manageFormImportExcel')[0]);
                $.ajax({
                    url: '@Url.Action("Import","Mst_ProductGroup")',
                    data: formdata,
                    processData: false,
                    contentType: false,
                    dataType: 'json',
                    type: 'POST',
                    success: function (data) {
                        if (data.Success) {
                            if (data !== null) {
                                alert(data.Messages[0]);
                                window.location.href = data.RedirectUrl;
                            }
                        } else {
                            showErrorDialog(data.Detail);
                        }
                    }
                });
            }
        }
    }

    function ShowImport() {
        $('#ImportModal').modal('show');
    }
</script>
