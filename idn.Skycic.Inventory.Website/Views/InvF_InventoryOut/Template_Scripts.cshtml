@model RT_InvF_InventoryOut
@{
    ViewBag.Title = "Template_Scripts";

    var objInvF_InventoryOut = new InvF_InventoryOut();
    var iF_InvOutStatus = "";
    if (Model != null)
    {
        if (Model.Lst_InvF_InventoryOut != null && Model.Lst_InvF_InventoryOut.Count > 0)
        {
            objInvF_InventoryOut = Model.Lst_InvF_InventoryOut[0];
            iF_InvOutStatus = CUtils.StrValue(objInvF_InventoryOut.IF_InvOutStatus);
        }
    }

    string viewType = CUtils.StrValue(ViewBag.ViewType);

    string status = CUtils.StrValue(ViewBag.Status);

    var userState = ViewBag.UserState as UserState;
    var lstOrgSolution = new List<OrgSolution>();
    lstOrgSolution = userState.ListOrgSolution;

    var listOrgSolution = new List<OrgSolution>();
    if (lstOrgSolution != null && lstOrgSolution.Count > 0)
    {
        foreach (var item in lstOrgSolution)
        {
            if (item.SolutionCode.Equals("LQDMS") || item.SolutionCode.Equals("DMSPLUS"))
            {
                listOrgSolution.Add(item);
            }
        }
    }
}

@*Danh mục hàng hóa*@
@*Autocomplete*@


<script type="text/javascript">
    function checkProductExists(objProduct) {
        var rows = $('tbody#table-tbodyID tr.trdata').length;
        if (rows > 0) {
            var productCode = objProduct.ProductCode;
            var productExists = false;
            $('tbody#table-tbodyID tr.trdata').each(function () {
                if (!productExists) {
                    var $trCur = $(this);
                    var productCodeCur = $trCur.attr('productcode');
                    if (productCodeCur === productCode) {
                        productExists = true;
                    }
                }

            });
            if (productExists) {
                var listToastr = [];
                var message = 'Hàng hóa "' + objProduct.ProductName + '" đã tồn tại trên lưới'
                objToastr = { ToastrType: 'error', ToastrMessage: message };
                listToastr.push(objToastr);
                commonUtils.showToastr(listToastr);
                return false;
            } else {
                return true;
            }
        }
        else {
            return true;
        }
    }
</script>

<script type="text/javascript">
    $(document).ready(function () {
        $("select#refType").select2();
        $("select#invinProductCode").select2();
        $("select#profileStatus").select2();

        @if (viewType.Equals("update"))
        {
            <text>
        var checked = $('#FlagXuatTuDH').prop('checked');
        if (checked === true) {
            debugger






            $('#RefNo').removeAttr("readonly");
            $('#RefNo').focus();
            $('#refType').prop('disabled', false);

            $('#divPrdInvIn').show();
            $('#myInput').hide();
            $('#quetmavach').hide();
            //$('#table-tbodyID').html('');
            //$('#table-detailInvCodeOutActual').html('');
            //$('#table-detailLot').html('');
            //$('#table-detailSerial').html('');
            //$('#table-detailProductImport').html('');
            //$('#table-PopupHHTonKhoPB').html('');

                debugger
                //đổ thông tin hàng hoá từ đơn hàng vào dropdown
                var refType = $('#refType').val();
                var RefNo = $('#RefNo').val();

                var invBUPattern = '';
                var $option = $('#InvCodeOut').find(":selected");
                if ($option !== undefined && $option !== null && $option.length > 0) {
                    invBUPattern = $option.attr('InvBUPattern');
                }

                var urlGetOrderDetail = '@Url.Action("GetRefNoDetail", "InvF_InventoryOut")';
                var token = $('#manageForm input[name=__RequestVerificationToken]').val();

                $.ajax({
                    url: urlGetOrderDetail,
                    data: {
                        RefNo: RefNo,
                        RefType: refType,
                        invBUPattern: invBUPattern,
                        __RequestVerificationToken: token
                    },
                    type: 'post',
                    dataType: 'json',
                    traditional: true,
                    beforeSend: function () { }
                }).done(function (result) {
                    if (result.Success) {
                        debugger;
                        //$('#invinProductCode').html('');
                        //$('#invinProductCode').html(result.Html);
                        //if (result.Html.length === 0 || result.Html === "\r\n") {
                        //    alert('Số phiếu nhập không tồn tại trong hệ thống');
                        //}



                        var lstRpt_OrderSummary_TotalProductForInv = result.LstRpt_OrderSummary_TotalProductForInv;
                        if (lstRpt_OrderSummary_TotalProductForInv == null || lstRpt_OrderSummary_TotalProductForInv.length == 0) {
                            var objToastr = {
                                ToastrType: 'error',
                                ToastrMessage: 'Số RefNo không có trong hệ thống !'
                            };
                            listError.push(objToastr);
                            commonUtils.showToastr(listError);
                            $('#CustomerCode').val('');
                            $('select#invinProductCode').val('');
                            $('select#invinProductCode').trigger('change');
                            $('#CustomerCode').trigger('change');
                            $('#CustomerCode').prop('disabled', false);
                        }
                        else {
                            for (var i = 0; i < lstRpt_OrderSummary_TotalProductForInv.length; i++) {

                                debugger
                                var $select = $('select#invinProductCode');
                                if ($select !== null && $select !== undefined) {
                                    var $optgroup = $select.find('optgroup');

                                    if ($optgroup != null && $optgroup !== undefined) {
                                        var selected = '';


                                        var extData_Options = {
                                            selected: selected,
                                        };


                                        var $option = $(commonUtils.getHtmlFromTemplate($('#tmpl_optionproductinorder'), lstRpt_OrderSummary_TotalProductForInv[i], extData_Options));
                                        $option.appendTo($optgroup);
                                    }
                                }


                                var customercodesys = lstRpt_OrderSummary_TotalProductForInv[i].CustomerCodeSys;
                                $('#CustomerCode').val(customercodesys);
                                $('#CustomerCode').trigger('change');
                                $('#CustomerCode').prop('disabled', true);
                            }



                        }

                    } else {
                        if (!commonUtils.isNullOrEmpty(result.Detail)) {
                            showErrorDialog(result.Detail);
                        }
                    }
                }).fail(function (jqXHR, textStatus, errorThrown) {

                }).always(function (jqXHROrData, textStatus, jqXHROrErrorThrown) {
                    //alert("complete");
                });

            }
            else
            {
            $('#RefNo').val('');
            $('#RefNo').attr("readonly", "readonly");
            $('#refType').prop('disabled', true);
            $('#divPrdInvIn').hide();
            $('#myInput').show();
            //$('#quetmavach').show();
            //$('#table-tbodyID').html('');
            //$('#table-detailInvCodeOutActual').html('');
            //$('#table-detailLot').html('');
            //$('#table-detailSerial').html('');
            //$('#table-detailProductImport').html('');
            //$('#table-PopupHHTonKhoPB').html('');

            //$('#refType').val('');
            //$('#refType').trigger('change');
        }



        </text>
        }
    });

    $(document).ready(function () {
        debugger
        $('#myInput').autocomplete({
            source: function (request, response) {
                var keyword = request.term;
                if (!commonUtils.isNullOrEmpty(keyword)) {
                    //var invCodeOut = $('#InvCodeOut').val();
                    var invCodeOut = commonUtils.returnValueText('#InvCodeOut');

                    if (commonUtils.isNullOrEmpty(invCodeOut)) {
                        var listToastr = [];
                        objToastr = { ToastrType: 'error', ToastrMessage: '@MvcHtmlString.Create("Chưa chọn kho xuất".HtmlItemString("ordorderdl"))' };
                        listToastr.push(objToastr);
                        commonUtils.showToastr(listToastr);

                        $('#myInput').val('');
                        commonUtils.setFocus('InvCodeOut');
                    }

                    if (keyword.toString().trim().length > 1) {
                        var url = '@Url.Action("GetProductSearch", "ModalCommon")';
                        var flagquetmavach = '0';
                        var token = $('#manageForm input[name=__RequestVerificationToken]').val();
                        $.ajax({
                            url: url,
                            type: 'post',
                            data: {
                                productkey: keyword,
                                autosearch: "true",
                                flagquetmavach: flagquetmavach,
                                __RequestVerificationToken: token
                            },
                            cache: false,
                            dataType: 'json',
                            success: function (objResult) {
                                debugger
                                var _data = objResult.data;
                                var listItems = $.map(objResult.data, function (data, id) {
                                    return {
                                        value: data.ProductCode,
                                        label: data.ProductCodeUser + ' - ' + data.ProductName,
                                        //
                                        data: data
                                    };
                                })
                                listItems.push({ label: "Search", value: "", isShowAll: true })
                                response(listItems);


                            },
                            error: function (xmlHttpRequest, textStatus, errorThrown) {
                                console.log('some error occured', textStatus, errorThrown);
                            }
                        });
                    }
                }

            },
            minLength: 1,
            select: function (event, ui) {
                var objData = ui.item.data;
                var productExists = checkProductExists(objData);
                if (!productExists) {
                    return false;
                }
                else {
                    var ProductCode = objData.ProductCode;
                    var ProductCodeBase = objData.ProductCodeBase;
                    var ProductCodeRoot = objData.ProductCodeRoot;
                    var ProductCodeUser = objData.ProductCodeUser;
                    var ProductName = objData.ProductName;
                    var UnitCodeSP = objData.UnitCode;
                    var UnitCode = "";
                    var SellPrice = objData.SellPrice;

                    // Số lượng từ đơn hàng
                    var strqtyOrder = objData.qtyOrder;
                    var qtyOrder = 0;
                    if ($.isNumeric(strqtyOrder)) {
                        qtyOrder = parseFloat(strqtyOrder);
                    }
                    //
                    var SellOrder = 0;
                    var ProductType = "";

                    var SellProduct = 0.0;
                    var checkOrder = $('#FlagXuatTuDH').prop('checked');
                    if (checkOrder == true) {
                        SellProduct = SellOrder;
                    }
                    else {
                        SellProduct = SellPrice;
                    }
                    var DiscountPrice = 0;//objData.DiscountPrice;
                    var FlagCombo = objData.FlagCombo;
                    var FlagSerial = objData.FlagSerial;
                    var FlagLo = objData.FlagLo;
                    var ValAmount = 0;
                    var flagCombo = "0";
                    var showTonKho = "";

                    var valmstInventory = "";
                    if ($('select.mstinventory').length > 0) {
                        var selectKho = $('select.mstinventory').eq(0);
                        var optionSelect = $(selectKho).find('option:selected');
                        if (optionSelect.val() == "") {
                            alert("Kho chưa được chọn");
                            $('select.mstinventory').focus();
                            return;
                        }
                        else {
                            valmstInventory = optionSelect.attr("invBUPattern");
                        }
                    }

                    // Lấy giá trị quy đổi
                    var valconvert = '1';
                    var strvalconvert = objData.ValConvert;
                    valconvert = parseFloat(strvalconvert);
                    var Qty = '1';

                    var urlGetTonKho = "@Url.Action("GetBalanceByProduct", "ModalCommon")";
                    var token = $('#manageForm input[name=__RequestVerificationToken]').val();

                    var dataInput = {
                        productCode: ProductCode,
                        InvBUPattern: valmstInventory,
                        productCodeBase: ProductCodeBase,
                        valconvert: valconvert,
                        Qty: Qty,
                        FlagSerial: FlagSerial,
                        FlagLo: FlagLo,

                        __RequestVerificationToken: token,
                    };
                     $.ajax({
                        type: 'post',
                        data: dataInput,
                        url: '@Url.Action("GetProductExactly", "ModalCommon")',
                        dataType: 'json',
                        beforeSend: function () {
                        }
                    }).done(function (objResult) {
                        if (objResult.Success) {
                            debugger;
                            ValAmount = Math.round(parseFloat(Qty) * (parseFloat(objResult.objMST_ProductUI.SellPrice) - parseFloat(DiscountPrice)), 2);
                            var Lst_InvF_InventoryOutDtl = [];

                            var objInvF_InventoryOutDtl = {
                                ProductCode: ProductCode,
                                ProductCodeUser: ProductCodeUser,
                                ProductCodeBase: ProductCodeBase,
                                ProductCodeRoot: ProductCodeRoot,
                                ProductName: ProductName,
                                UnitCode: UnitCodeSP,
                                UPOUT: SellProduct,
                                QtyTotalOK: objResult.qtytotalok,
                                UPOUTDesc: DiscountPrice,
                                InvCodeInActual: objResult.invCodeMax,
                                Qty: Qty,
                                ValOUTAfterDesc: ValAmount,
                                FlagLot: FlagLo,
                                FlagSerial: FlagSerial,
                                FlagCombo: FlagCombo,
                                qtyOrder: qtyOrder,
                                Remark: '',


                            };
                            Lst_InvF_InventoryOutDtl.push(objInvF_InventoryOutDtl);
                            var Lst_ProductBase = objResult.Data;

                            var objInvF_InventoryOutDtlCur = Lst_ProductBase.find(o => o.ProductCode === objInvF_InventoryOutDtl.ProductCode);
                            if (objInvF_InventoryOutDtlCur !== undefined && objInvF_InventoryOutDtlCur !== null) {
                                objInvF_InventoryOutDtl.UPInv = objInvF_InventoryOutDtlCur.UPInv ?? 0;
                            }
                            var Lst_PhanBo = objResult.List;
                            debugger
                            var ValOUTAfterDesc = 0;
                            objBase = {
                                ValOUTAfterDesc: ValOUTAfterDesc,
                                Qty: Qty
                            }

                            Lst_ProductBase.map(function (e) {
                                e.ValOUTAfterDesc = ValOUTAfterDesc;
                                e.Qty = Qty;
                                //e.InvCodeInActual = objResult.invCodeMax;
                            });

                            var objInvF_InventoryOutDtlRender = {
                                InventoryOutDtl: Lst_InvF_InventoryOutDtl[0],
                                Lst_ProductBase: Lst_ProductBase,
                                Lst_PhanBo: Lst_PhanBo,
                                Lst_PhanBoLot: objResult.List_PhanBoLot,
                                Lst_PhanBoSerial: objResult.List_PhanBoSerial
                            };

                            renderInvF_InventoryOutDtl(objInvF_InventoryOutDtlRender);
                            tongTienHang();
                            $('#InvCodeOut').prop('disabled', true);
                            $('#myInput').val('');
                            commonUtils.setFocus('InvCodeOut');
                            return false;


                        }
                        else {
                            if (!commonUtils.isNullOrEmpty(objResult.Detail)) {
                                _showErrorMsg123('Lỗi!', objResult.Detail);
                            }
                        }
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                    }).always(function () {
                    });
                }
            }

        }).autocomplete("instance")._renderItem = function (ul, item) {
            var li = $("<li>")
                .attr("data-value", item.value)
                .append(item.label)
                .appendTo(ul);

            if (item.isShowAll === true) {
                li.on("click", function () {
                    var orderNo = $('#OrderNo').val();
                    var url = "";
                    if (orderNo != null && orderNo != "") {
                        url = '@Url.Action("GetProductSearchOrder", "InvF_InventoryOut")';
                    }
                    else {
                        url = '@Url.Action("GetProductSearch", "ModalCommon")';
                    }
                    $.ajax({
                        url: url,
                        data: {
                            productkey: "",
                            showview: "1",
                            orderNo: orderNo
                        },
                        type: 'post',
                        dataType: 'json',
                        traditional: true,
                        success: function (data) {
                            if (data.Success) {
                                $('#ShowPopupProduct').modal({
                                    backdrop: false,
                                    keyboard: true,
                                });
                                $("#ShowPopupProduct").html(data.Html);
                                var display = $("#ShowPopupProduct").css('display');
                                if (display == "none") {
                                    $("#ShowPopupProduct").show();
                                }
                            } else {
                                showErrorDialog(data.Detail);
                            }
                        }
                    });
                    return false;
                });
                li.attr('class', 'showall');
            }
            return li;
        };

    });
</script>


<script type="text/javascript">
    function quetMaVach(thiz) {
        debugger
        var listToastr = [];
        var flagmavach = commonUtils.returnValue($(thiz).attr('flagmavach'));
        if (flagmavach === '0') {

            var objToastr = { ToastrType: 'success', ToastrMessage: '@MvcHtmlString.Create("Bắt đầu chuyển sang chế độ quét".HtmlItemString("invf_inventorycusreturn"))' };
            listToastr.push(objToastr);
            commonUtils.showToastr(listToastr);

            flagmavach = '1';
            commonUtils.addClassCss('#myInput', 'display-none');
            commonUtils.removeClassCss('#quetmavach', 'display-none');
            commonUtils.setFocus('quetmavach');
        }
        else if (flagmavach === '1') {

            objToastr = { ToastrType: 'success', ToastrMessage: '@MvcHtmlString.Create("Đã tắt chế độ quét".HtmlItemString("invf_inventorycusreturn"))' };
            listToastr.push(objToastr);
            commonUtils.showToastr(listToastr);

            flagmavach = '0';
            commonUtils.addClassCss('#quetmavach', 'display-none');
            commonUtils.removeClassCss('#myInput', 'display-none');
            commonUtils.setFocus('myInput');
        }
        $(thiz).attr('flagmavach', flagmavach);
    }
</script>

<script type="text/javascript">
    $(document).ready(function () {
        debugger
        $('#quetmavach').autocomplete({
            source: function (request, response) {
                debugger;
                var keyword = request.term;
                if (!commonUtils.isNullOrEmpty(keyword)) {
                    //var invCodeOut = $('#InvCodeOut').val();
                    var invCodeOut = commonUtils.returnValueText('#InvCodeOut');

                    if (commonUtils.isNullOrEmpty(invCodeOut)) {
                        var listToastr = [];
                        objToastr = { ToastrType: 'error', ToastrMessage: '@MvcHtmlString.Create("Chưa chọn kho xuất".HtmlItemString("ordorderdl"))' };
                        listToastr.push(objToastr);
                        commonUtils.showToastr(listToastr);

                        $('#quetmavach').val('');
                        commonUtils.setFocus('InvCodeOut');
                    }

                    if (keyword.toString().trim().length > 1) {
                        var url = '@Url.Action("GetProductSearch", "ModalCommon")';
                        var token = $('#manageForm input[name=__RequestVerificationToken]').val();
                        var flagquetmavach = '1';
                        $.ajax({
                            url: url,
                            type: 'post',
                            data: {
                                productkey: keyword,
                                autosearch: "true",
                                flagquetmavach: flagquetmavach,
                                __RequestVerificationToken: token
                            },
                            cache: false,
                            dataType: 'json',
                            success: function (objResult) {
                                debugger
                                var _data = objResult.data;
                                var listItems = $.map(objResult.data, function (data, id) {
                                    return {
                                        value: data.ProductCode,
                                        label: data.ProductCodeUser + ' - ' + data.ProductName,
                                        //
                                        data: data
                                    };
                                })
                                listItems.push({ label: "Search", value: "", isShowAll: true })
                                response(listItems);


                            },
                            error: function (xmlHttpRequest, textStatus, errorThrown) {
                                console.log('some error occured', textStatus, errorThrown);
                            }
                        });
                    }
                }

            },
            minLength: 1,
            select: function (event, ui) {
                debugger
                var objData = ui.item.data;
                var productExists = checkProductExists(objData);
                if (!productExists) {
                    return false;
                }
                else {
                    var ProductCode = objData.ProductCode;
                    var ProductCodeBase = objData.ProductCodeBase;
                    var ProductCodeRoot = objData.ProductCodeRoot;
                    var ProductCodeUser = objData.ProductCodeUser;
                    var ProductName = objData.ProductName;
                    var UnitCodeSP = objData.UnitCode;
                    var UnitCode = "";
                    var SellPrice = objData.SellPrice;


                    // Số lượng từ đơn hàng
                    var strqtyOrder = objData.qtyOrder;
                    var qtyOrder = 0;
                    if ($.isNumeric(strqtyOrder)) {
                        qtyOrder = parseFloat(strqtyOrder);
                    }
                    //
                    var SellOrder = 0;
                    var ProductType = "";

                    var SellProduct = 0.0;
                    var checkOrder = $('#FlagXuatTuDH').prop('checked');
                    if (checkOrder == true) {
                        SellProduct = SellOrder;
                    }
                    else {
                        SellProduct = SellPrice;
                    }
                    var DiscountPrice = 0;//objData.DiscountPrice;
                    var FlagCombo = objData.FlagCombo;
                    var FlagSerial = objData.FlagSerial;
                    var FlagLo = objData.FlagLo;
                    var ValAmount = 0;
                    var flagCombo = "0";
                    var showTonKho = "";

                    var valmstInventory = "";
                    if ($('select.mstinventory').length > 0) {
                        var selectKho = $('select.mstinventory').eq(0);
                        var optionSelect = $(selectKho).find('option:selected');
                        if (optionSelect.val() == "") {
                            alert("Kho chưa được chọn");
                            $('select.mstinventory').focus();
                            return;
                        }
                        else {
                            valmstInventory = optionSelect.attr("invBUPattern");
                        }
                    }

                    // Lấy giá trị quy đổi
                    var valconvert = '1';
                    var strvalconvert = objData.ValConvert;
                    valconvert = parseFloat(strvalconvert);
                    var Qty = '1';

                    var urlGetTonKho = "@Url.Action("GetBalanceByProduct", "ModalCommon")";
                    var token = $('#manageForm input[name=__RequestVerificationToken]').val();

                    var dataInput = {
                        productCode: ProductCode,
                        InvBUPattern: valmstInventory,
                        productCodeBase: ProductCodeBase,
                        valconvert: valconvert,
                        Qty: Qty,
                        FlagSerial: FlagSerial,
                        FlagLo: FlagLo,

                        __RequestVerificationToken: token,
                    };
                     $.ajax({
                        type: 'post',
                        data: dataInput,
                        url: '@Url.Action("GetProductExactly", "ModalCommon")',
                        dataType: 'json',
                        beforeSend: function () {
                        }
                    }).done(function (objResult) {
                        debugger;
                        if (objResult.Success) {
                            debugger
                            ValAmount = Math.round(parseFloat(Qty) * (parseFloat(objResult.objMST_ProductUI.SellPrice) - parseFloat(DiscountPrice)), 2);
                            var Lst_InvF_InventoryOutDtl = [];

                            var objInvF_InventoryOutDtl = {
                                ProductCode: ProductCode,
                                ProductCodeUser: ProductCodeUser,
                                ProductCodeBase: ProductCodeBase,
                                ProductCodeRoot: ProductCodeRoot,
                                ProductName: ProductName,
                                UnitCode: UnitCodeSP,
                                UPOUT: SellProduct,
                                QtyTotalOK: objResult.qtytotalok,
                                UPOUTDesc: DiscountPrice,
                                InvCodeInActual: objResult.invCodeMax,
                                Qty: Qty,
                                ValOUTAfterDesc: ValAmount,
                                FlagLot: FlagLo,
                                FlagSerial: FlagSerial,
                                FlagCombo: FlagCombo,
                                qtyOrder: qtyOrder,
                                Remark: '',


                            };
                            Lst_InvF_InventoryOutDtl.push(objInvF_InventoryOutDtl);
                            var Lst_ProductBase = objResult.Data;
                            var Lst_PhanBo = objResult.List;
                            debugger
                            var ValOUTAfterDesc = 0;
                            objBase = {
                                ValOUTAfterDesc: ValOUTAfterDesc,
                                Qty: Qty
                            }


                            //Lst_ProductBase.map(item => item.objBase);
                            //for (var i = 0; i < Lst_ProductBase.length; i++) {
                            //    (Lst_ProductBase[i]).push(objBase);
                            //}
                            Lst_ProductBase.map(function (e) {
                                e.ValOUTAfterDesc = ValOUTAfterDesc;
                                e.Qty = Qty;
                                //e.InvCodeInActual = objResult.invCodeMax;
                            });

                            var objInvF_InventoryOutDtlRender = {
                                InventoryOutDtl: Lst_InvF_InventoryOutDtl[0],
                                Lst_ProductBase: Lst_ProductBase,
                                Lst_PhanBo: Lst_PhanBo,
                                Lst_PhanBoLot: objResult.List_PhanBoLot,
                                Lst_PhanBoSerial: objResult.List_PhanBoSerial
                            };

                            renderInvF_InventoryOutDtl(objInvF_InventoryOutDtlRender);
                            tongTienHang();
                            $('#InvCodeOut').prop('disabled', true);
                            $('#myInput').val('');
                            commonUtils.setFocus('InvCodeOut');
                            return false;


                        }
                        else {
                            if (!commonUtils.isNullOrEmpty(objResult.Detail)) {
                                _showErrorMsg123('Lỗi!', objResult.Detail);
                            }
                        }
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                    }).always(function () {
                    });
                }
            }

        }).autocomplete("instance")._renderItem = function (ul, item) {
            var li = $("<li>")
                .attr("data-value", item.value)
                .append(item.label)
                .appendTo(ul);

            if (item.isShowAll === true) {
                li.on("click", function () {
                    var orderNo = $('#OrderNo').val();
                    var url = "";
                    if (orderNo != null && orderNo != "") {
                        url = '@Url.Action("GetProductSearchOrder", "InvF_InventoryOut")';
                    }
                    else {
                        url = '@Url.Action("GetProductSearch", "ModalCommon")';
                    }
                    $.ajax({
                        url: url,
                        data: {
                            productkey: "",
                            showview: "1",
                            orderNo: orderNo
                        },
                        type: 'post',
                        dataType: 'json',
                        traditional: true,
                        success: function (data) {
                            if (data.Success) {
                                $('#ShowPopupProduct').modal({
                                    backdrop: false,
                                    keyboard: true,
                                });
                                $("#ShowPopupProduct").html(data.Html);
                                var display = $("#ShowPopupProduct").css('display');
                                if (display == "none") {
                                    $("#ShowPopupProduct").show();
                                }
                            } else {
                                showErrorDialog(data.Detail);
                            }
                        }
                    });
                    return false;
                });
                li.attr('class', 'showall');
            }
            return li;
        };

    });
</script>



<script type="text/javascript">
    function ChangeXuatTuDonHang(thiz) {
        debugger
        var checked = $(thiz).prop('checked');
        var checkitem = true;
        var lcCode = '';
        if (checked === true) {
            debugger
            //check user có license củ lqdms và dms+

           @{
               if (listOrgSolution != null && listOrgSolution.Count > 0)
               {
                   <text>
                    checkitem = true;
                   </text>
               }
               else {
                    <text>
                    checkitem = false;
                    </text>
               }
             }

            if (checkitem == true) {


                $('#RefNo').removeAttr("readonly");
                $('#RefNo').focus();
                $('#refType').prop('disabled', false);

                $('#divPrdInvIn').show();
                $('#myInput').hide();
                //$('#quetmavach').hide();
                $('#table-tbodyID').html('');
                $('#table-detailInvCodeOutActual').html('');
                $('#table-detailLot').html('');
                $('#table-detailSerial').html('');
                $('#table-detailProductImport').html('');
                $('#table-PopupHHTonKhoPB').html('');
            }
            else {
                bootbox.confirm({
                    title: 'THÔNG BÁO',
                    message: 'Bạn chưa có bản quyền sử dụng dịch vụ quản lý Kên phân phối DMS+. Vui lòng đăng ký sử dụng DMS+ để sử dụng tính năng này.',
                    buttons: {
                        'cancel': {
                            label: 'Thoát',
                            className: 'btn mybtn-Button btnButton display-none'
                        },
                        'confirm': {
                            label: 'Đóng',
                            className: 'btn mybtn-Button btnButton'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            $('#FlagXuatTuDH').prop('checked', false);

                        }
                    }
                });
            }
        }
        else {
            $('#RefNo').val('');
            $('#RefNo').attr("readonly", "readonly");
            $('#refType').prop('disabled', true);
            $('#divPrdInvIn').hide();
            $('#myInput').show();
            //$('#quetmavach').show();
            $('#table-tbodyID').html('');
            $('#table-detailInvCodeOutActual').html('');
            $('#table-detailLot').html('');
            $('#table-detailSerial').html('');
            $('#table-detailProductImport').html('');
            $('#table-PopupHHTonKhoPB').html('');

            $('#refType').val('');
            $('#refType').trigger('change');
        }
    }
</script>


@*Thêm hàng hóa vào lưới - Trường hợp thêm nhiều hàng hóa xử lý hới khác*@
<script type="text/javascript">
    function renderInvF_InventoryOutDtl(data) {
        debugger
        var date = new Date();
        var randomCur = date.getTime();
        var randHex = commonUtils.randHex(12);
        randomCur = randomCur + randHex;

        var objInvF_InventoryOutDtl = data.InventoryOutDtl;
        var list_ProductBase = data.Lst_ProductBase;

        if (objInvF_InventoryOutDtl !== undefined && objInvF_InventoryOutDtl !== null) {
            var productCode = commonUtils.returnValue(objInvF_InventoryOutDtl.ProductCode);
            if (!commonUtils.isNullOrEmpty(productCode)) {
                var productcoderootCss = 'productcoderoot-' + randomCur;
                var productcodebaseCss = 'productcodebase-' + randomCur;
                var productcodeCss = 'productcode-' + randomCur;
                var productcodeuserCss = 'productcodeuser-' + randomCur;
                var producttypeCss = 'producttype-' + randomCur;
                var productnameCss = 'productname-' + randomCur;
                var select2Css = 'select2-' + randomCur;
                var QtyTotalOKCss = 'QtyTotalOK-' + randomCur;
                var qtyCss = 'qty-' + randomCur;
                var qtyOrdCss = 'qtyOrd-' + randomCur;
                var invcodeinactualCss = 'invcodeinactual-' + randomCur;
                var invcodeinactualtypeCss = 'invcodeinactualtype-' + randomCur;
                var upoutCss = 'upout-' + randomCur;
                var upoutdescCss = 'upoutdesc-' + randomCur;
                var valoutafterdescCss = 'valoutafterdesc-' + randomCur;
                var flaglotCss = 'flaglot-' + randomCur;
                var flagserialCss = 'flagserial-' + randomCur;
                var remarkCss = 'remark-' + randomCur;
                var SerialNoCss = 'SerialNo-' + randomCur;
                var flagcomboCss = 'flagcombo-' + randomCur;
                var upinvCss = 'upinv-' + randomCur;
            }

            var extData = {
                productcoderootCss: productcoderootCss,
                productcodebaseCss: productcodebaseCss,
                productcodeCss: productcodeCss,
                productcodeuserCss: productcodeuserCss,
                producttypeCss: producttypeCss,
                productnameCss: productnameCss,
                select2Css: select2Css,
                QtyTotalOKCss: QtyTotalOKCss,
                qtyCss: qtyCss,
                qtyOrdCss: qtyOrdCss,
                invcodeinactualCss: invcodeinactualCss,
                invcodeinactualtypeCss: invcodeinactualtypeCss,
                upoutCss: upoutCss,
                upoutdescCss: upoutdescCss,
                valoutafterdescCss: valoutafterdescCss,
                flaglotCss: flaglotCss,
                flagserialCss: flagserialCss,
                flagcomboCss: flagcomboCss,
                remarkCss: remarkCss,
                SerialNoCss: SerialNoCss,
                upinvCss: upinvCss,
                rd: randomCur,
                idx: 9999,
            };
            debugger
            var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_InvF_InventoryOut'), objInvF_InventoryOutDtl, extData));
            var $tableProduct_InFvCodeOutActual_Cache = $('#table-detailInvCodeOutActual'); @* Cache hàng hóa - vị trí *@
            var flagLot = commonUtils.returnValue(objInvF_InventoryOutDtl.FlagLot);
            var flagSerial = commonUtils.returnValue(objInvF_InventoryOutDtl.FlagSerial);
            var flagCombo = commonUtils.returnValue(objInvF_InventoryOutDtl.FlagCombo);
            if (flagLot === '0' && flagSerial === '0' && flagCombo === '0') {

                var $spanInvCodeOutActualType = $item.find('span.' + invcodeinactualtypeCss);
                if ($spanInvCodeOutActualType !== undefined && $spanInvCodeOutActualType !== null && $spanInvCodeOutActualType.length > 0) {
                    @* Nếu hàng hóa không quản lý LOT và Serail(Hàng hóa thường ???) thì add tùy chọn show popup vị trí nhập *@
                    var extData_InvCodeOutActualType = {
                        idx: 9999,
                    };
                    var $invCodeInActualType = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_InvCodeOutActual'), objInvF_InventoryOutDtl, extData_InvCodeOutActualType));
                    $invCodeInActualType.appendTo($spanInvCodeOutActualType);
                }

                @* Add cache hàng hóa - vị trí **@
                debugger
                var extData_Product_InvCodeOutActual_Cache = {
                    idx: 9999,
                };

                var $trProduct_InvCodeOutActual_Cache = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_InvCodeOutActual'), objInvF_InventoryOutDtl, extData_Product_InvCodeOutActual_Cache));
                $trProduct_InvCodeOutActual_Cache.appendTo($tableProduct_InFvCodeOutActual_Cache);

            }
            else {
                var $inputQty = $item.find('input.' + qtyCss);
                if ($inputQty !== undefined && $inputQty !== null && $inputQty.length > 0) {
                    if (!$inputQty.hasClass('disabled-fix')) {
                        $inputQty.addClass('disabled-fix');
                    }
                }

                var $spanProductType = $item.find('span.' + producttypeCss);
                if ($spanProductType !== undefined && $spanProductType !== null && $spanProductType.length > 0) {
                    @* Nếu hàng hóa quản lý LOT hoặc Serail thì add tùy chọn show popup LOT hoặc Serail tương ứng *@
                    var extData_ProductType = {};
                    if (flagLot === '1') {
                        var $productTypeLOT = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagLot'), objInvF_InventoryOutDtl, extData_ProductType));
                        $productTypeLOT.appendTo($spanProductType);
                    }
                    else if (flagSerial === '1') {
                        var $productTypeSerial = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagSerial'), objInvF_InventoryOutDtl, extData_ProductType));
                        $productTypeSerial.appendTo($spanProductType);
                    }
                    else if (flagCombo === '1') {
                        var $productTypeCombo = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagCombo'), objInvF_InventoryOutDtl, extData_ProductType));
                        $productTypeCombo.appendTo($spanProductType);
                        $inputQty.removeClass('disabled-fix');
                    }
                }
            }
            debugger

            @* Add đơn vị hàng hoá *@
            if (list_ProductBase !== null && list_ProductBase !== undefined && list_ProductBase.length > 0) {
                for (var i = 0; i < list_ProductBase.length; i++) {
                    var productCodeCur = commonUtils.returnValue(list_ProductBase[i].ProductCode);
                    var flagLotCur = commonUtils.returnValue(list_ProductBase[i].FlagLot);
                    var flagSerialCur = commonUtils.returnValue(list_ProductBase[i].FlagSerial);
                    @* Add danh sách hàng hóa cache *@
                    var $divProducts = $item.find('div.products-list');
                    if ($divProducts !== undefined && $divProducts !== null && $divProducts.length > 0) {
                        debugger
                        var $product = $(commonUtils.getHtmlFromTemplate($('#tmpl_products_list'), list_ProductBase[i]));
                        $product.appendTo($divProducts);
                    }
                    if (flagLotCur === '0' && flagSerialCur === '0') {
                        debugger
                        var $trProductInvCodeOutActualCache = $tableProduct_InFvCodeOutActual_Cache.find('tr[productcode="' + productCode + '"]');
                        if ($trProductInvCodeOutActualCache !== null && $trProductInvCodeOutActualCache !== undefined && $trProductInvCodeOutActualCache.length > 0) {
                            var $divList_Product_InvCodeOutActual_Cache = $trProductInvCodeOutActualCache.find('div.products-list-cache');
                            if ($divList_Product_InvCodeOutActual_Cache !== undefined && $divList_Product_InvCodeOutActual_Cache !== null && $divList_Product_InvCodeOutActual_Cache.length > 0) {
                                var extData_Product_InvCodeOutActual = {
                                    idx: 9999,
                                };

                                var $divProduct_InvCodeOutActual = $(commonUtils.getHtmlFromTemplate($('#tmpl_product_invcodeinactual_list_cache'), list_ProductBase[i], extData_Product_InvCodeOutActual));
                                $divProduct_InvCodeOutActual.appendTo($divList_Product_InvCodeOutActual_Cache);
                            }
                        }
                    }

                    var $select = $item.find('select.select2');
                    if ($select !== null && $select !== undefined) {
                        var $optgroup = $select.find('optgroup');
                        if ($optgroup !== null && $optgroup !== undefined) {
                            var selected = '';
                            if (productCode === productCodeCur) {
                                selected = 'selected="selected"';
                            }


                            var extData_Options = {
                                selected: selected,
                            };
                            var $option = $(commonUtils.getHtmlFromTemplate($('#tmpl_options'), list_ProductBase[i], extData_Options));
                            $option.appendTo($optgroup);
                        }

                        var $tdSelect2 = $select.parent();
                        if ($tdSelect2 !== undefined && $tdSelect2 !== null && $tdSelect2.length > 0) {
                            if (!$tdSelect2.hasClass('disabled-fix')) {
                                $tdSelect2.addClass('disabled-fix');
                            }
                        }
                    }
                }
            }


            $item.appendTo($('#table-tbodyID'));
            //format number

            var tableName = 'InvF_InventoryOut';
            var qtyTotalOKFormat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'Qty');
            var qtyformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'Qty');
            var upoutformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'UPOut');
            var upoutdescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'ValOutDesc');
            var valoutafterdescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'ValOutAfterDesc');
            var upinvformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'Inv_InventoryBalance ');

            $('.' + qtyCss).number(true, qtyformat);
            $('.' + QtyTotalOKCss).number(true, qtyTotalOKFormat);
            $('.' + upoutCss).number(true, upoutformat);
            $('.' + upoutdescCss).number(true, upoutdescformat);
            $('.' + valoutafterdescCss).number(true, valoutafterdescformat);
            $('.' + upinvCss).number(true, upinvformat);

            $('.' + select2Css).select2({
                minimumResultsForSearch: -1
            });
            commonUtils.updateTableTrNotShowIdx($('#table-tbodyID tr.trdata'), true);
            commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeInActual tr.trdata'), true);
            commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeOutActual tr.trdata'), true);



            debugger
            if (flagLot === '0' && flagSerial === '0') {
                debugger
                $item.appendTo($('#table-tbodyID'));
                @* Phân bổ lại vị trí và số lượng *@
                var list_distribute = data.Lst_PhanBo;
                var arrayInvCode = [];
                var lstVitri = "";
                var sumqty = 0.0;
                var sumqtyOK = 0.0;
                if (list_distribute != null && list_distribute.length > 0) {
                    for (var i = 0; i < list_distribute.length; i++) {
                        var InvCodeOutActual = list_distribute[i].InvCode;
                        if (arrayInvCode.includes(InvCodeOutActual) === false && list_distribute[i].QtyAvailOK != 0) {
                            arrayInvCode.push(InvCodeOutActual);
                            if (lstVitri == "") {
                                lstVitri += InvCodeOutActual;

                            }
                            else {
                                lstVitri += ", " + InvCodeOutActual;
                            }
                        }

                        let qtyAvailOK = list_distribute[i].QtyAvailOK;

                        if (qtyAvailOK == 0) {
                            continue;
                        }

                        sumqty += parseFloat(qtyAvailOK);
                        sumqtyOK += parseFloat(list_distribute[i].QtyTotalOK);
                        // tìm hàng hoá và gán lại số lượng, vị trí(phân bổ)
                        var trProduct = $('#table-tbodyID').find('tr[productcode="' + productCode + '"]');
                        var idxDtl = trProduct.attr('rd');

                        trProduct.find('input.qty-' + idxDtl).val(sumqty);
                        //trProduct.find('input.SerialNoCss-' + idxDtl).val(list_distribute[i].SerialNo);
                        trProduct.find('input.invcodeinactual-' + idxDtl).val(lstVitri);






                    }
                    @* Xóa hàng hóa - vị trí đã lưu cache *@
                var $tableProduct_InvCodeInActual_Cache = $('#table-detailInvCodeOutActual'); @* Cache hàng hóa - vị trí *@
                        var rowOlds = $tableProduct_InvCodeInActual_Cache.find('tr[productcode="' + productCode + '"]').length;
                    if (rowOlds > 0) {
                        $tableProduct_InvCodeInActual_Cache.find('tr[productcode="' + productCode + '"]').each(function () {
                            var $tr = $(this);
                            var $divList_Product_InvCodeInActual = $tr.find('div.products-list-cache');
                            if ($divList_Product_InvCodeInActual !== undefined && $divList_Product_InvCodeInActual !== null) {

                                $divList_Product_InvCodeInActual.find('div.result[productcode="' + productCode + '"]').each(function () {
                                    var $div = $(this);
                                    $div.remove();

                                });
                            }

                        });
                    }

                    for (var i = 0; i < list_distribute.length; i++) {
                        debugger


                        @* Thêm hàng hóa - vị trí vào cache *@

                debugger;

                        var $trInvCodeInActual = $tableProduct_InvCodeInActual_Cache.find('tr[productcode="' + productCode + '"]');

                        var $divList_Product_InvCodeInActual_Cache = $trInvCodeInActual.find('div.products-list-cache');

                        var strInvCodeInActual = '';
                        var totalQty = 0.0;
                        var fTotalQty = 0.0;
                        var arrayInvCode = [];
                        var lstVitri = "";



                        var InvCode = list_distribute[i].InvCode;
                        var QtyTotalOK = list_distribute[i].QtyTotalOK;
                        var QtyAvailOK = list_distribute[i].QtyAvailOK;


                        //if (QtyAvailOK > 0) {
                        if ($divList_Product_InvCodeInActual_Cache !== undefined && $divList_Product_InvCodeInActual_Cache !== null && $divList_Product_InvCodeInActual_Cache.length > 0) {
                            var objProduct = {
                                ProductCode: productCode,
                                InvCodeInActual: InvCode,
                                Qty: QtyAvailOK,
                                QtyTotalOK: QtyTotalOK,
                            };

                            var extData = {
                                idx: 9999,
                            };

                            var $divProduct_InvCodeInActual = $(commonUtils.getHtmlFromTemplate($('#tmpl_product_invcodeinactual_list_cache'), objProduct, extData));
                            $divProduct_InvCodeInActual.appendTo($divList_Product_InvCodeInActual_Cache);

                        }
                            //}
                    }
                    commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeOutActual tr.trdata'), true);

                }
            }
            else if (flagLot === '1') {
                debugger
                var list_distribute = data.Lst_PhanBoLot;
                var arrayInvCode = [];
                var lstVitri = "";
                var sumqty = 0.0;
                var sumqtOK = 0.0;
                if (list_distribute != null && list_distribute.length > 0) {
                    for (var i = 0; i < list_distribute.length; i++) {
                        var InvCodeOutActual = list_distribute[i].InvCode;
                        if (arrayInvCode.includes(InvCodeOutActual) === false && list_distribute[i].QtyAvailOK != 0 && list_distribute[i].Qty > 0) {
                            arrayInvCode.push(InvCodeOutActual);
                            if (lstVitri == "") {
                                lstVitri += InvCodeOutActual;

                            }
                            else {
                                lstVitri += ", " + InvCodeOutActual;
                            }
                        }

                        //let qtyAvailOK = list_distribute[i].QtyAvailOK;
                        //if (qtyAvailOK == 0) {
                        //    continue;
                        //}
                        debugger
                        sumqty += parseFloat(list_distribute[i].Qty);
                        sumqtOK += parseFloat(list_distribute[i].QtyTotalOK);
                        //sumqty += parseFloat(qtyAvailOK);
                        // tìm hàng hoá và gán lại số lượng, vị trí(phân bổ)
                        var trProduct = $('#table-tbodyID').find('tr[productcode="' + productCode + '"]');
                        var idxDtl = trProduct.attr('rd');

                        trProduct.find('input.qty-' + idxDtl).val(sumqty);
                        trProduct.find('input.QtyTotalOK-' + idxDtl).val(sumqtOK);
                        trProduct.find('input.invcodeinactual-' + idxDtl).val(lstVitri);
                    }
                    debugger
                    var trProduct1 = $('tbody#table-tbodyID tr[productcode = "' + productCode + '"]');
                    var $divProducts1 = trProduct1.find('div.products-list');
                    var $divProductOld = $divProducts1.find('div[productcode="' + productCode + '"]');
                    $divProductOld.find('input.ProductLotNo').val(list_distribute[0].ProductLotNo);

                    @* Xóa LOT - hàng hóa đã lưu cache *@

                    var rowOlds = $('#table-detailLot').find('tr[productcode="' + productCode + '"]').length;
                    if (rowOlds > 0) {
                        $('#table-detailLot').find('tr[productcode="' + productCode + '"]').each(function () {
                            $(this).remove();
                        });
                    }
                    for (var i = 0; i < list_distribute.length; i++) {
                        var objProduct = {
                            ProductCode: list_distribute[i].ProductCode,
                            ProductLotNo: list_distribute[i].ProductLotNo,
                            ProductionDate: list_distribute[i].ProductionDate,
                            ExpiredDate: list_distribute[i].ExpiredDate,
                            Qty: list_distribute[i].Qty,
                            InvCodeInActual: list_distribute[i].InvCode,
                            QtyTotalOK: list_distribute[i].QtyTotalOK,
                        };

                        var extData = {
                            idx: 9999,
                        };
                        var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_LOT'), objProduct, extData));
                        $item.appendTo($('#table-detailLot'));
                    }
                    commonUtils.updateTableTrNotShowIdx($('#table-detailLot tr.trdata'), true);

                }
            }
            else {
                debugger
                var list_distribute = data.Lst_PhanBoSerial;
                var arrayInvCode = [];
                var lstVitri = "";
                var sumqty = list_distribute.length;
                var sumqtOK = 0.0;
                if (list_distribute != null && list_distribute.length > 0) {
                    for (var i = 0; i < list_distribute.length; i++) {
                        var InvCodeOutActual = list_distribute[i].InvCode;
                        if (arrayInvCode.includes(InvCodeOutActual) === false && list_distribute[i].QtyAvailOK != 0) {
                            arrayInvCode.push(InvCodeOutActual);
                            if (lstVitri == "") {
                                lstVitri += InvCodeOutActual;

                            }
                            else {
                                lstVitri += ", " + InvCodeOutActual;
                            }
                        }

                        sumqtOK += parseFloat(list_distribute[i].QtyTotalOK);
                        // tìm hàng hoá và gán lại số lượng, vị trí(phân bổ)
                        var trProduct = $('#table-tbodyID').find('tr[productcode="' + productCode + '"]');
                        var idxDtl = trProduct.attr('rd');

                        trProduct.find('input.qty-' + idxDtl).val(sumqty)
                        //trProduct.find('input.QtyTotalOK-' + idxDtl).val(sumqtOK);
                        trProduct.find('input.invcodeinactual-' + idxDtl).val(lstVitri);



                    }
                    var trProduct1 = $('tbody#table-tbodyID tr[productcode = "' + productCode + '"]');
                    var $divProducts1 = trProduct1.find('div.products-list');
                    var $divProductOld = $divProducts1.find('div[productcode="' + productCode + '"]');
                    $divProductOld.find('input.SerialNo').val(list_distribute[0].SerialNo);
                    @* Xóa Serial - hàng hóa đã lưu cache *@

                    var rowOlds = $('#table-detailSerial').find('tr[productcode="' + productCode + '"]').length;
                    if (rowOlds > 0) {
                        $('#table-detailSerial').find('tr[productcode="' + productCode + '"]').each(function () {
                            $(this).remove();
                        });
                    }
                    var strHtml = "";
                    var st = 0;
                    for (var i = 0; i < list_distribute.length; i++) {


                        var objProduct = {
                            ProductCode: list_distribute[i].ProductCode,
                            InvCodeInActual: list_distribute[i].InvCode,
                            SerialNo: list_distribute[i].SerialNo,
                        };
                        var extData = {
                            idx: 9999,
                        };

                        var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_Serial'), objProduct, extData));
                        $item.appendTo($('#table-detailSerial'));
                    }
                    commonUtils.updateTableTrNotShowIdx($('#table-detailSerial tr.trdata'), true);

                }


            }
        }

        var tableName = 'InvF_InventoryOut';
        var totalValOutFormat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'TotalValOut');
        var totalValOutDescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'TotalValOutDesc');
        var totalValOutAfterDescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'TotalValOutAfterDesc');
        $('.TotalValOut').number(true, totalValOutFormat);
        $('.TotalValOutDesc').number(true, totalValOutDescformat);
        $('.TotalValOutAfterDesc').number(true, totalValOutAfterDescformat);

    }
</script>


<script type="text/javascript">
    function renderInvF_InventoryOutDtl123(data) {
        debugger
        var date = new Date();
        var randomCur = date.getTime();
        var randHex = commonUtils.randHex(12);
        randomCur = randomCur + randHex;

        var objInvF_InventoryOutDtl = data.InventoryOutDtl;
        var list_ProductBase = data.Lst_ProductBase;

        if (objInvF_InventoryOutDtl !== undefined && objInvF_InventoryOutDtl !== null) {
            var productCode = commonUtils.returnValue(objInvF_InventoryOutDtl.ProductCode);
            if (!commonUtils.isNullOrEmpty(productCode)) {
                var productcoderootCss = 'productcoderoot-' + randomCur;
                var productcodebaseCss = 'productcodebase-' + randomCur;
                var productcodeCss = 'productcode-' + randomCur;
                var productcodeuserCss = 'productcodeuser-' + randomCur;
                var producttypeCss = 'producttype-' + randomCur;
                var productnameCss = 'productname-' + randomCur;
                var select2Css = 'select2-' + randomCur;
                var QtyTotalOKCss = 'QtyTotalOK-' + randomCur;
                var qtyCss = 'qty-' + randomCur;
                var qtyOrdCss = 'qtyOrd-' + randomCur;
                var invcodeinactualCss = 'invcodeinactual-' + randomCur;
                var invcodeinactualtypeCss = 'invcodeinactualtype-' + randomCur;
                var upoutCss = 'upout-' + randomCur;
                var upoutdescCss = 'upoutdesc-' + randomCur;
                var valoutafterdescCss = 'valoutafterdesc-' + randomCur;
                var flaglotCss = 'flaglot-' + randomCur;
                var flagserialCss = 'flagserial-' + randomCur;
                var remarkCss = 'remark-' + randomCur;
                var SerialNoCss = 'SerialNo-' + randomCur;
                var flagcomboCss = 'flagcombo-' + randomCur;
                var upinvCss = 'upinv-' + randomCur;
            }

            var extData = {
                productcoderootCss: productcoderootCss,
                productcodebaseCss: productcodebaseCss,
                productcodeCss: productcodeCss,
                productcodeuserCss: productcodeuserCss,
                producttypeCss: producttypeCss,
                productnameCss: productnameCss,
                select2Css: select2Css,
                QtyTotalOKCss: QtyTotalOKCss,
                qtyCss: qtyCss,
                qtyOrdCss: qtyOrdCss,
                invcodeinactualCss: invcodeinactualCss,
                invcodeinactualtypeCss: invcodeinactualtypeCss,
                upoutCss: upoutCss,
                upoutdescCss: upoutdescCss,
                valoutafterdescCss: valoutafterdescCss,
                flaglotCss: flaglotCss,
                flagserialCss: flagserialCss,
                flagcomboCss: flagcomboCss,
                remarkCss: remarkCss,
                SerialNoCss: SerialNoCss,
                upinvCss: upinvCss,
                rd: randomCur,
                idx: 9999,
            };
            debugger
            var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_InvF_InventoryOut'), objInvF_InventoryOutDtl, extData));
            var $tableProduct_InFvCodeOutActual_Cache = $('#table-detailInvCodeOutActual'); @* Cache hàng hóa - vị trí *@
            var flagLot = commonUtils.returnValue(objInvF_InventoryOutDtl.FlagLot);
            var flagSerial = commonUtils.returnValue(objInvF_InventoryOutDtl.FlagSerial);
            var flagCombo = commonUtils.returnValue(objInvF_InventoryOutDtl.FlagCombo);
            if (flagLot === '0' && flagSerial === '0' && flagCombo === '0') {

                var $spanInvCodeOutActualType = $item.find('span.' + invcodeinactualtypeCss);
                if ($spanInvCodeOutActualType !== undefined && $spanInvCodeOutActualType !== null && $spanInvCodeOutActualType.length > 0) {
                    @* Nếu hàng hóa không quản lý LOT và Serail(Hàng hóa thường ???) thì add tùy chọn show popup vị trí nhập *@
                    var extData_InvCodeOutActualType = {
                        idx: 9999,
                    };
                    var $invCodeInActualType = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_InvCodeOutActual'), objInvF_InventoryOutDtl, extData_InvCodeOutActualType));
                    $invCodeInActualType.appendTo($spanInvCodeOutActualType);
                }

                @* Add cache hàng hóa - vị trí **@
                debugger
                var extData_Product_InvCodeOutActual_Cache = {
                    idx: 9999,
                };

                var $trProduct_InvCodeOutActual_Cache = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_InvCodeOutActual'), objInvF_InventoryOutDtl, extData_Product_InvCodeOutActual_Cache));
                $trProduct_InvCodeOutActual_Cache.appendTo($tableProduct_InFvCodeOutActual_Cache);







            }
            else {
                var $inputQty = $item.find('input.' + qtyCss);
                if ($inputQty !== undefined && $inputQty !== null && $inputQty.length > 0) {
                    if (!$inputQty.hasClass('disabled-fix')) {
                        $inputQty.addClass('disabled-fix');
                    }
                }

                var $spanProductType = $item.find('span.' + producttypeCss);
                if ($spanProductType !== undefined && $spanProductType !== null && $spanProductType.length > 0) {
                    @* Nếu hàng hóa quản lý LOT hoặc Serail thì add tùy chọn show popup LOT hoặc Serail tương ứng *@
                    var extData_ProductType = {};
                    if (flagLot === '1') {
                        var $productTypeLOT = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagLot'), objInvF_InventoryOutDtl, extData_ProductType));
                        $productTypeLOT.appendTo($spanProductType);
                    }
                    else if (flagSerial === '1') {
                        var $productTypeSerial = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagSerial'), objInvF_InventoryOutDtl, extData_ProductType));
                        $productTypeSerial.appendTo($spanProductType);
                    }
                    else if (flagCombo === '1') {
                        var $productTypeCombo = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagCombo'), objInvF_InventoryOutDtl, extData_ProductType));
                        $productTypeCombo.appendTo($spanProductType);
                        $inputQty.removeClass('disabled-fix');
                    }
                }
            }
            debugger

            @* Add đơn vị hàng hoá *@
            if (list_ProductBase !== null && list_ProductBase !== undefined && list_ProductBase.length > 0) {
                for (var i = 0; i < list_ProductBase.length; i++) {
                    var productCodeCur = commonUtils.returnValue(list_ProductBase[i].ProductCode);
                    var flagLotCur = commonUtils.returnValue(list_ProductBase[i].FlagLot);
                    var flagSerialCur = commonUtils.returnValue(list_ProductBase[i].FlagSerial);
                    @* Add danh sách hàng hóa cache *@
                    var $divProducts = $item.find('div.products-list');
                    if ($divProducts !== undefined && $divProducts !== null && $divProducts.length > 0) {
                        debugger
                        var $product = $(commonUtils.getHtmlFromTemplate($('#tmpl_products_list'), list_ProductBase[i]));
                        $product.appendTo($divProducts);
                    }
                    if (flagLotCur === '0' && flagSerialCur === '0') {
                        debugger
                        var $trProductInvCodeOutActualCache = $tableProduct_InFvCodeOutActual_Cache.find('tr[productcode="' + productCode + '"]');
                        if ($trProductInvCodeOutActualCache !== null && $trProductInvCodeOutActualCache !== undefined && $trProductInvCodeOutActualCache.length > 0) {
                            var $divList_Product_InvCodeOutActual_Cache = $trProductInvCodeOutActualCache.find('div.products-list-cache');
                            if ($divList_Product_InvCodeOutActual_Cache !== undefined && $divList_Product_InvCodeOutActual_Cache !== null && $divList_Product_InvCodeOutActual_Cache.length > 0) {
                                var extData_Product_InvCodeOutActual = {
                                    idx: 9999,
                                };

                                var $divProduct_InvCodeOutActual = $(commonUtils.getHtmlFromTemplate($('#tmpl_product_invcodeinactual_list_cache'), list_ProductBase[i], extData_Product_InvCodeOutActual));
                                $divProduct_InvCodeOutActual.appendTo($divList_Product_InvCodeOutActual_Cache);
                            }
                        }
                    }

                    var $select = $item.find('select.select2');
                    if ($select !== null && $select !== undefined) {
                        var $optgroup = $select.find('optgroup');
                        if ($optgroup !== null && $optgroup !== undefined) {
                            var selected = '';
                            if (productCode === productCodeCur) {
                                selected = 'selected="selected"';
                            }


                            var extData_Options = {
                                selected: selected,
                            };
                            var $option = $(commonUtils.getHtmlFromTemplate($('#tmpl_options'), list_ProductBase[i], extData_Options));
                            $option.appendTo($optgroup);
                        }

                        var $tdSelect2 = $select.parent();
                        if ($tdSelect2 !== undefined && $tdSelect2 !== null && $tdSelect2.length > 0) {
                            if (!$tdSelect2.hasClass('disabled-fix')) {
                                $tdSelect2.addClass('disabled-fix');
                            }
                        }
                    }
                }
            }






            $item.appendTo($('#table-tbodyID'));
            //format number

            var tableName = 'InvF_InventoryOut';
            var qtyTotalOKFormat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'Qty');
            var qtyformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'Qty');
            var upoutformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'UPOut');
            var upoutdescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'ValOutDesc');
            var valoutafterdescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'ValOutAfterDesc');
            var upinvformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'Inv_InventoryBalance ');

            $('.' + qtyCss).number(true, qtyformat);
            $('.' + QtyTotalOKCss).number(true, qtyTotalOKFormat);
            $('.' + upoutCss).number(true, upoutformat);
            $('.' + upoutdescCss).number(true, upoutdescformat);
            $('.' + valoutafterdescCss).number(true, valoutafterdescformat);
            $('.' + upinvCss).number(true, upinvformat);

            $('.' + select2Css).select2({
                minimumResultsForSearch: -1
            });
            commonUtils.updateTableTrNotShowIdx($('#table-tbodyID tr.trdata'), true);
            commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeInActual tr.trdata'), true);
            commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeOutActual tr.trdata'), true);



            debugger
            if (flagLot === '0' && flagSerial === '0') {
                debugger
                $item.appendTo($('#table-tbodyID'));
                @* Phân bổ lại vị trí và số lượng *@
                var list_distribute = data.Lst_PhanBo;
                var arrayInvCode = [];
                var lstVitri = "";
                var sumqty = 0.0;
                var sumqtyOK = 0.0;
                if (list_distribute != null && list_distribute.length > 0) {
                    for (var i = 0; i < list_distribute.length; i++) {
                        var InvCodeOutActual = list_distribute[i].InvCode;
                        if (arrayInvCode.includes(InvCodeOutActual) === false && list_distribute[i].QtyAvailOK != 0) {
                            arrayInvCode.push(InvCodeOutActual);
                            if (lstVitri == "") {
                                lstVitri += InvCodeOutActual;

                            }
                            else {
                                lstVitri += ", " + InvCodeOutActual;
                            }
                        }

                        let qtyAvailOK = list_distribute[i].QtyAvailOK;

                        if (qtyAvailOK == 0) {
                            continue;
                        }

                        sumqty += parseFloat(qtyAvailOK);
                        sumqtyOK += parseFloat(list_distribute[i].QtyTotalOK);
                        // tìm hàng hoá và gán lại số lượng, vị trí(phân bổ)
                        var trProduct = $('#table-tbodyID').find('tr[productcode="' + productCode + '"]');
                        var idxDtl = trProduct.attr('rd');

                        //trProduct.find('input.qty-' + idxDtl).val(sumqty);

                        //trProduct.find('input.SerialNoCss-' + idxDtl).val(list_distribute[i].SerialNo);
                        trProduct.find('input.invcodeinactual-' + idxDtl).val(lstVitri);






                    }
                    @* Xóa hàng hóa - vị trí đã lưu cache *@
                var $tableProduct_InvCodeInActual_Cache = $('#table-detailInvCodeOutActual'); @* Cache hàng hóa - vị trí *@
                        var rowOlds = $tableProduct_InvCodeInActual_Cache.find('tr[productcode="' + productCode + '"]').length;
                    if (rowOlds > 0) {
                        $tableProduct_InvCodeInActual_Cache.find('tr[productcode="' + productCode + '"]').each(function () {
                            var $tr = $(this);
                            var $divList_Product_InvCodeInActual = $tr.find('div.products-list-cache');
                            if ($divList_Product_InvCodeInActual !== undefined && $divList_Product_InvCodeInActual !== null) {

                                $divList_Product_InvCodeInActual.find('div.result[productcode="' + productCode + '"]').each(function () {
                                    var $div = $(this);
                                    $div.remove();

                                });
                            }

                        });
                    }

                    for (var i = 0; i < list_distribute.length; i++) {
                        debugger


                        @* Thêm hàng hóa - vị trí vào cache *@

                debugger;

                        var $trInvCodeInActual = $tableProduct_InvCodeInActual_Cache.find('tr[productcode="' + productCode + '"]');

                        var $divList_Product_InvCodeInActual_Cache = $trInvCodeInActual.find('div.products-list-cache');

                        var strInvCodeInActual = '';
                        var totalQty = 0.0;
                        var fTotalQty = 0.0;
                        var arrayInvCode = [];
                        var lstVitri = "";



                        var InvCode = list_distribute[i].InvCode;
                        var QtyTotalOK = list_distribute[i].QtyTotalOK;
                        var QtyAvailOK = list_distribute[i].QtyAvailOK;


                        //if (QtyAvailOK > 0) {
                        if ($divList_Product_InvCodeInActual_Cache !== undefined && $divList_Product_InvCodeInActual_Cache !== null && $divList_Product_InvCodeInActual_Cache.length > 0) {
                            var objProduct = {
                                ProductCode: productCode,
                                InvCodeInActual: InvCode,
                                Qty: QtyAvailOK,
                                QtyTotalOK: QtyTotalOK,
                            };

                            var extData = {
                                idx: 9999,
                            };

                            var $divProduct_InvCodeInActual = $(commonUtils.getHtmlFromTemplate($('#tmpl_product_invcodeinactual_list_cache'), objProduct, extData));
                            $divProduct_InvCodeInActual.appendTo($divList_Product_InvCodeInActual_Cache);

                        }
                            //}
                    }
                    commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeOutActual tr.trdata'), true);

                }
            }
            else if (flagLot === '1') {
                debugger
                var list_distribute = data.Lst_PhanBoLot;
                var arrayInvCode = [];
                var lstVitri = "";
                var sumqty = 0.0;
                var sumqtOK = 0.0;
                if (list_distribute != null && list_distribute.length > 0) {
                    for (var i = 0; i < list_distribute.length; i++) {
                        var InvCodeOutActual = list_distribute[i].InvCode;
                        if (arrayInvCode.includes(InvCodeOutActual) === false && list_distribute[i].QtyAvailOK != 0 && list_distribute[i].Qty > 0) {
                            arrayInvCode.push(InvCodeOutActual);
                            if (lstVitri == "") {
                                lstVitri += InvCodeOutActual;

                            }
                            else {
                                lstVitri += ", " + InvCodeOutActual;
                            }
                        }

                        //let qtyAvailOK = list_distribute[i].QtyAvailOK;
                        //if (qtyAvailOK == 0) {
                        //    continue;
                        //}
                        debugger
                        sumqty += parseFloat(list_distribute[i].Qty);
                        sumqtOK += parseFloat(list_distribute[i].QtyTotalOK);
                        //sumqty += parseFloat(qtyAvailOK);
                        // tìm hàng hoá và gán lại số lượng, vị trí(phân bổ)
                        var trProduct = $('#table-tbodyID').find('tr[productcode="' + productCode + '"]');
                        var idxDtl = trProduct.attr('rd');

                        trProduct.find('input.qty-' + idxDtl).val(sumqty);
                        trProduct.find('input.QtyTotalOK-' + idxDtl).val(sumqtOK);
                        trProduct.find('input.invcodeinactual-' + idxDtl).val(lstVitri);
                    }
                    debugger
                    var trProduct1 = $('tbody#table-tbodyID tr[productcode = "' + productCode + '"]');
                    var $divProducts1 = trProduct1.find('div.products-list');
                    var $divProductOld = $divProducts1.find('div[productcode="' + productCode + '"]');
                    $divProductOld.find('input.ProductLotNo').val(list_distribute[0].ProductLotNo);

                    @* Xóa LOT - hàng hóa đã lưu cache *@

                    var rowOlds = $('#table-detailLot').find('tr[productcode="' + productCode + '"]').length;
                    if (rowOlds > 0) {
                        $('#table-detailLot').find('tr[productcode="' + productCode + '"]').each(function () {
                            $(this).remove();
                        });
                    }
                    for (var i = 0; i < list_distribute.length; i++) {
                        var objProduct = {
                            ProductCode: list_distribute[i].ProductCode,
                            ProductLotNo: list_distribute[i].ProductLotNo,
                            ProductionDate: list_distribute[i].ProductionDate,
                            ExpiredDate: list_distribute[i].ExpiredDate,
                            Qty: list_distribute[i].Qty,
                            InvCodeInActual: list_distribute[i].InvCode,
                            QtyTotalOK: list_distribute[i].QtyTotalOK,
                        };

                        var extData = {
                            idx: 9999,
                        };
                        var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_LOT'), objProduct, extData));
                        $item.appendTo($('#table-detailLot'));
                    }
                    commonUtils.updateTableTrNotShowIdx($('#table-detailLot tr.trdata'), true);

                }
            }
            else {
                debugger
                var list_distribute = data.Lst_PhanBoSerial;
                var arrayInvCode = [];
                var lstVitri = "";
                var sumqty = list_distribute.length;
                var sumqtOK = 0.0;
                if (list_distribute != null && list_distribute.length > 0) {
                    for (var i = 0; i < list_distribute.length; i++) {
                        var InvCodeOutActual = list_distribute[i].InvCode;
                        if (arrayInvCode.includes(InvCodeOutActual) === false && list_distribute[i].QtyAvailOK != 0) {
                            arrayInvCode.push(InvCodeOutActual);
                            if (lstVitri == "") {
                                lstVitri += InvCodeOutActual;

                            }
                            else {
                                lstVitri += ", " + InvCodeOutActual;
                            }
                        }

                        sumqtOK += parseFloat(list_distribute[i].QtyTotalOK);
                        // tìm hàng hoá và gán lại số lượng, vị trí(phân bổ)
                        var trProduct = $('#table-tbodyID').find('tr[productcode="' + productCode + '"]');
                        var idxDtl = trProduct.attr('rd');

                        trProduct.find('input.qty-' + idxDtl).val(sumqty)
                        //trProduct.find('input.QtyTotalOK-' + idxDtl).val(sumqtOK);
                        trProduct.find('input.invcodeinactual-' + idxDtl).val(lstVitri);



                    }
                    var trProduct1 = $('tbody#table-tbodyID tr[productcode = "' + productCode + '"]');
                    var $divProducts1 = trProduct1.find('div.products-list');
                    var $divProductOld = $divProducts1.find('div[productcode="' + productCode + '"]');
                    $divProductOld.find('input.SerialNo').val(list_distribute[0].SerialNo);
                    @* Xóa Serial - hàng hóa đã lưu cache *@

                    var rowOlds = $('#table-detailSerial').find('tr[productcode="' + productCode + '"]').length;
                    if (rowOlds > 0) {
                        $('#table-detailSerial').find('tr[productcode="' + productCode + '"]').each(function () {
                            $(this).remove();
                        });
                    }
                    var strHtml = "";
                    var st = 0;
                    for (var i = 0; i < list_distribute.length; i++) {


                        var objProduct = {
                            ProductCode: list_distribute[i].ProductCode,
                            InvCodeInActual: list_distribute[i].InvCode,
                            SerialNo: list_distribute[i].SerialNo,
                        };
                        var extData = {
                            idx: 9999,
                        };

                        var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_Serial'), objProduct, extData));
                        $item.appendTo($('#table-detailSerial'));
                    }
                    commonUtils.updateTableTrNotShowIdx($('#table-detailSerial tr.trdata'), true);

                }


            }
        }



    }
</script>


<script type="text/javascript">
    function deleteRow(thiz) {
        var rows = $('tbody#table-tbodyID tr.trdata').length;
        if (rows > 0) {
            debugger;
            var $tr = $(thiz).parent().parent();
            if ($tr !== null && $tr !== undefined) {
                var rd = $tr.attr('rd');
                var productCode = $tr.attr('productcode');
                @* Xóa cache *@
                var flagLOT = commonUtils.returnValue($tr.find('input.flaglot-' + rd).val());
                var flagSerial = commonUtils.returnValue($tr.find('input.flagserial-' + rd).val());
                var rowOlds = 0;
                if (flagLOT === '0' && flagSerial === '0') {
                    rowOlds = $('#table-detailInvCodeOutActual').find('tr[productcode="' + productCode + '"]').length;
                    if (rowOlds > 0) {
                        $('#table-detailInvCodeOutActual').find('tr[productcode="' + productCode + '"]').each(function () {
                            $(this).remove();
                        });
                        commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeOutActual tr.trdata'), true);
                    }
                }
                else if (flagLOT === '1') {
                    rowOlds = $('#table-detailLot').find('tr[productcode="' + productCode + '"]').length;
                    if (rowOlds > 0) {
                        $('#table-detailLot').find('tr[productcode="' + productCode + '"]').each(function () {
                            $(this).remove();
                        });
                        commonUtils.updateTableTrNotShowIdx($('#table-detailLot tr.trdata'), true);
                    }
                }
                else if (flagSerial === '1') {
                    rowOlds = $('#table-detailSerial').find('tr[productcode="' + productCode + '"]').length;
                    if (rowOlds > 0) {
                        $('#table-detailSerial').find('tr[productcode="' + productCode + '"]').each(function () {
                            $(this).remove();
                        });
                        commonUtils.updateTableTrNotShowIdx($('#table-detailSerial tr.trdata'), true);
                    }
                }
                $tr.remove();
            }
            if (rows > 1) {
                commonUtils.updateTableTrNotShowIdx($('tbody#table-tbodyID tr.trdata'), true);

            } else {
                // Css lại table head
                $('#InvCodeOut').prop('disabled', false);
            }
        }
        tongTienHang();
    }
</script>

<script type="text/javascript">
    function tongTienHang() {
        debugger
        var sumtienhang = 0.0;
        var sumgiamgia = 0.0;
        var sumthanhtoan = 0.0;

        var tongsl = 0.0;
        var rows = $('tbody#table-tbodyID tr').length;
        if (rows > 0) {
            $('#table-tbodyID tr.trdata').each(function () {
                debugger

                var $tr = $(this);
                var rd = $tr.attr('rd');
                var fQty = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.qty-' + rd).val()));
                var fUPOUT = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.upout-' + rd).val()));
                var fUPOUTDesc = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.upoutdesc-' + rd).val()));


                var fValOutAfterDesc = (fUPOUT - fUPOUTDesc) * fQty;
                $tr.find('input.valoutafterdesc-' + rd).val(fValOutAfterDesc);


                var tienhang = fUPOUT * fQty;
                sumtienhang += tienhang;
                sumthanhtoan += fValOutAfterDesc;

                tongsl += fQty;
            });
            sumgiamgia = sumtienhang - sumthanhtoan;

            $('#TotalValOut').val(sumtienhang);
            $('#TotalValOutDesc').val(sumgiamgia);
            $('#TotalValOutAfterDesc').val(sumthanhtoan);

            var tableName = 'InvF_InventoryOut';
            var totalValOutFormat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'TotalValOut');
            var totalValOutDescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'TotalValOutDesc');
            var totalValOutAfterDescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'TotalValOutAfterDesc');
            $('.TotalValOut').number(true, totalValOutFormat);
            $('.TotalValOutDesc').number(true, totalValOutDescformat);
            $('.TotalValOutAfterDesc').number(true, totalValOutAfterDescformat);

            //FormatNumber('#TotalValOut', 2);
            //FormatNumber('#TotalValOutDesc', 2);
            //FormatNumber('#TotalValOutAfterDesc', 2);

            document.getElementById('spanTotalPrd').textContent = tongsl;
        }
        else {
            document.getElementById('spanTotalPrd').textContent = tongsl;
        }
    }
</script>
<script type="text/javascript">
    function List_InvF_InventoryOutDtl() {
        debugger;
        @* Danh sách hàng hóa(lưới hàng hóa chính) *@
        var Lst_InvF_InventoryOutDtl = [];
        var rowsProductData = $('tbody#table-tbodyID tr.trdata').length;
        if (rowsProductData > 0) {
            $('tbody#table-tbodyID tr.trdata').each(function () {
                debugger;
                var $tr = $(this);
                var objInvF_InventoryOutDtl = {};
                var productcode = commonUtils.returnValue($tr.attr('productcode'));
                objInvF_InventoryOutDtl.ProductCode = productcode;
                Lst_InvF_InventoryOutDtl.push(objInvF_InventoryOutDtl);
            });
        }

        return Lst_InvF_InventoryOutDtl;
    }
</script>

<script>
    function changeProduct(thiz) {
        debugger
        var message = '';
        var listToastr = [];

        var $select = $(thiz);

        if ($select != null && $select != undefined) {
            var ischange = $select.attr('ischange');
            if (ischange === '1') {
                $select.attr('ischange', '0');
                return false;
            }
            var $tr = $(thiz).parent().parent();
            var rd = $tr.attr('rd');
            var unitCode = $select.val();

            var productCodeInit = $select.attr('initdata');
            if (!commonUtils.isNullOrEmpty(unitCode)) {

                var $option = $select.find(":selected");
                var productCodeSelected = '';


                if ($option != undefined && $option !== null && $option.length > 0) {
                    productCodeSelected = commonUtils.returnValue($option.attr('productcode'));
                }

                var productCode = $tr.attr('productcode');
                var $divProducts = $tr.find('div.products-list');

                @* Danh sách hàng hóa(lưới hàng hóa chính) *@
                var Lst_InvF_InventoryOutDtl = List_InvF_InventoryOutDtl();
                @* Kiểm tra hàng hóa theo đơn vị vừa chọn đã tồn tại trên lưới hàng hóa chính chưa *@
                if (!commonUtils.isNullOrEmpty(productCodeSelected)) {
                    if (Lst_InvF_InventoryOutDtl !== undefined && Lst_InvF_InventoryOutDtl !== null && Lst_InvF_InventoryOutDtl.length > 0) {
                        for (var i = 0; i < Lst_InvF_InventoryOutDtl.length; i++) {
                            if (productCodeSelected === Lst_InvF_InventoryOutDtl[i].ProductCode) {
                                var productCodeUserSelectedCur = '';
                                var productNameSelectedCur = '';
                                var unitCodeSelectedCur = '';
                                var $divProductSelected = $divProducts.find('div[productcode="' + productCodeSelected + '"]');
                                if ($divProductSelected !== undefined && $divProductSelected !== null) {
                                    productCodeUserSelectedCur = $divProductSelected.find('input.ProductCodeUser').val();
                                    productNameSelectedCur = $divProductSelected.find('input.ProductName').val();
                                    unitCodeSelectedCur = $divProductSelected.find('input.UnitCode').val();
                                }
                                message = 'Hàng hóa "' + productNameSelectedCur + '" - "' + unitCodeSelectedCur + '" đã tồn tại trên lưới';
                                var objToastr = { ToastrType: 'error', ToastrMessage: message };
                                listToastr.push(objToastr);
                                break;
                            }
                        }
                    }

                }
                if (listToastr !== undefined && listToastr !== null && listToastr.length > 0) {
                    commonUtils.showToastr(listToastr);
                    var $divProductOld = $divProducts.find('div[productcode="' + productCode + '"]');
                    if ($divProductOld !== undefined && $divProductOld !== null) {
                        var unitCodeOld = $divProductOld.find('input.UnitCode').val();
                        if (!commonUtils.isNullOrEmpty(unitCodeOld)) {
                            $select.val(unitCodeOld);
                            $select.attr('ischange', '1');
                            $select.select2().trigger('change');
                        }
                    }

                    return false;
                }
                else {
                    debugger
                    var flagLOT = commonUtils.returnValue($tr.find('input.flaglot-' + rd).val());
                    var flagSerial = commonUtils.returnValue($tr.find('input.flagserial-' + rd).val());
                    if (flagLOT === '0' && flagSerial === '0') {
                        debugger
                        changeProduct_No_LOT_No_Serial(thiz);
                    }
                    else if (flagLOT === '1') {
                        debugger
                        changeProduct_LOT(thiz);
                    }
                    else if (flagSerial === '1') {
                        debugger
                        changeProduct_Serial(thiz);
                    }
                }
            }
        }
    }
</script>


<script type="text/javascript">
    function changeProduct_No_LOT_No_Serial(thiz) {
        debugger
        var $tr = $(thiz).parent().parent();
        var rd = $tr.attr('rd');
        var $select = $(thiz);

        var invBUPattern = '';
        var $option = $('#InvCodeOut').find(":selected");
        if ($option !== undefined && $option !== null && $option.length > 0) {
            invBUPattern = $option.attr('InvBUPattern');
        }


        if ($select !== undefined && $select !== null && $select.length > 0) {
            debugger
            var $option = $select.find(":selected");
            var productCodeSelected = '';


            if ($option != undefined && $option !== null && $option.length > 0) {
                productCodeSelected = commonUtils.returnValue($option.attr('productcode'));
            }
            var productCodeOld = $tr.attr('productcode');
            var $divProducts = $tr.find('div.products-list');
            if ($divProducts !== undefined && $divProducts !== null) {
                debugger
                    @* Update thông tin của hàng hóa hiện tại vào list cache danh sách hàng hóa *@
                var $divProductOld = $divProducts.find('div[productcode="' + productCodeOld + '"]');
                if ($divProductOld !== undefined && $divProductOld !== null && $divProductOld.length > 0) {
                    var qtyOld = $tr.find('input.qty-' + rd).val();
                    var qtyToTalOkOld = $tr.find('input.QtyTotalOK-' + rd).val();
                    var invCodeInActualOld = $tr.find('input.invcodeinactual-' + rd).val();
                    var uPOutOld = $tr.find('input.upout-' + rd).val();
                    var uPOutDescOld = $tr.find('input.upoutdesc-' + rd).val();
                    var valOutAfterDescOld = $tr.find('input.valoutafterdesc-' + rd).val();
                    var remarkOld = $tr.find('textarea.remark-' + rd).val();


                    $divProductOld.find('input.Qty').val(qtyOld);
                    $divProductOld.find('input.QtyTotalOK').val(qtyToTalOkOld);
                    $divProductOld.find('input.InvCodeInActual').val(invCodeInActualOld);
                    $divProductOld.find('input.SellPrice').val(uPOutOld);
                    $divProductOld.find('input.UPOUTDesc').val(uPOutDescOld);
                    $divProductOld.find('input.ValOUTAfterDesc').val(valOutAfterDescOld);
                    $divProductOld.find('input.Remark').val(remarkOld);
                }
                var $divProductSelected = $divProducts.find('div[productcode="' + productCodeSelected + '"]');
                if ($divProductSelected !== undefined && $divProductSelected !== null && $divProductSelected.length > 0) {
                    debugger
                    var productCodeRoot = $divProductSelected.find('input.ProductCodeRoot').val();
                    var productCodeBase = $divProductSelected.find('input.ProductCodeBase').val();
                    var productCode = $divProductSelected.find('input.ProductCode').val();
                    var productCodeUser = $divProductSelected.find('input.ProductCodeUser').val();
                    var productName = $divProductSelected.find('input.ProductName').val();
                    var flagLot = $divProductSelected.find('input.FlagLot').val();
                    var flagSerial = $divProductSelected.find('input.FlagSerial').val();
                    var unitCode = $divProductSelected.find('input.UnitCode').val();
                    var invCodeInActual = $divProductSelected.find('input.InvCodeInActual').val();
                    var qty = $divProductSelected.find('input.Qty').val();
                    var qtyToTalOk = $divProductSelected.find('input.QtyTotalOK').val();
                    var uPIn = $divProductSelected.find('input.SellPrice').val();
                    var uPInDesc = $divProductSelected.find('input.UPOUTDesc').val();
                    var valInAfterDesc = $divProductSelected.find('input.ValOUTAfterDesc').val();
                    var remark = $divProductSelected.find('input.Remark').val();

                    var valConvert = $divProductSelected.find('input.ValConvert').val();

                        @* Gán giá trị *@
                    $tr.attr('productcode', productCode);


                    var $spanProductCodeUser = $tr.find('span.productcodeuser-' + rd);
                    if ($spanProductCodeUser !== undefined && $spanProductCodeUser !== null && $spanProductCodeUser.length > 0) {
                        $spanProductCodeUser.text(productCodeUser);
                    }
                    var $spanProductName = $tr.find('span.productname-' + rd);
                    if ($spanProductName !== undefined && $spanProductName !== null && $spanProductName.length > 0) {
                        $spanProductName.text(productName);
                    }
                    $tr.find('input.productcode-' + rd).val(productCode);
                    $tr.find('input.productcodeuser-' + rd).val(productCodeUser);
                    $tr.find('input.productcodebase-' + rd).val(productCodeBase);
                    $tr.find('input.productcoderoot-' + rd).val(productCodeRoot);
                    $tr.find('input.productname-' + rd).val(productName);
                    $tr.find('input.flaglot-' + rd).val(flagLot);
                    $tr.find('input.flagserial-' + rd).val(flagSerial);

                    $select.attr('ischange', '0');
                    $select.attr('initdata', productCode);

                    $tr.find('input.qty-' + rd).val(qty);
                    $tr.find('input.QtyTotalOK-' + rd).val(qtyToTalOk);


                    $tr.find('input.invcodeinactual-' + rd).val(invCodeInActual);
                    var $spanInvCodeInActualType = $tr.find('span.invcodeinactualtype-' + rd);
                    if ($spanInvCodeInActualType !== undefined && $spanInvCodeInActualType !== null && $spanInvCodeInActualType.length > 0) {
                        var objInvF_InventoryOutDtl = {
                            ProductCode: productCode,
                            ProductCodeUser: productCodeUser,
                            ProductName: productName,
                            ProductCodeBase: productCodeBase,
                            ValConvert: valConvert
                        };
                        var extData_InvCodeInActualType = {};
                        var $invCodeInActualType = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_InvCodeOutActual'), objInvF_InventoryOutDtl, extData_InvCodeInActualType));
                        $spanInvCodeInActualType.empty();
                        $invCodeInActualType.appendTo($spanInvCodeInActualType);
                    }
                    $tr.find('input.upout-' + rd).val(uPIn);
                    $tr.find('input.upoutdesc-' + rd).val(uPInDesc);
                    $tr.find('input.valoutafterdesc-' + rd).val(valInAfterDesc);
                    $tr.find('textarea.remark-' + rd).val(remark);

                    tongTienHang();


                    debugger

                    //cập nhật lại thông tin phân bổ


                    var url = '@Url.Action("GetTonKhoPhanBoHH", "ModalCommon")';
                    $.ajax({
                        url: url,
                        data: {
                            productCode: productCode,
                            invBUPattern: invBUPattern,
                            productCodeBase: productCodeBase,
                            valconvert: valConvert
                        },
                        type: 'post',
                        dataType: 'json',
                        traditional: true,
                        success: function (data) {
                            debugger
                            if (data.Success) {
                                debugger
                                var lstInv_InventoryBalance1 = data.List;

                                @* Xóa hàng hóa - vị trí đã lưu cache *@
                                var $tableProduct_InvCodeInActual_Cache = $('#table-detailInvCodeOutActual');
                                var rowOlds = $tableProduct_InvCodeInActual_Cache.find('tr[productcodebase="' + productCodeBase + '"]').length;
                                if (rowOlds > 0) {
                                    $tableProduct_InvCodeInActual_Cache.find('tr[productcodebase="' + productCodeBase + '"]').each(function () {
                                        var $tr = $(this);
                                        var $divList_Product_InvCodeInActual = $tr.find('div.products-list-cache');
                                        if ($divList_Product_InvCodeInActual !== undefined && $divList_Product_InvCodeInActual !== null) {

                                            $divList_Product_InvCodeInActual.find('div.result[productcode="' + productCode + '"]').each(function () {
                                                var $div = $(this);
                                                $div.remove();

                                            });
                                        }

                                    });

                                }


                                for (var i = 0; i < lstInv_InventoryBalance1.length; i++) {
                                    @* Thêm hàng hóa - vị trí vào cache *@
                                    debugger

                                    var $trInvCodeInActual = $tableProduct_InvCodeInActual_Cache.find('tr[productcodebase="' + productCodeBase + '"]');
                                    var $divList_Product_InvCodeInActual_Cache = $trInvCodeInActual.find('div.products-list-cache');

                                    var InvCode = lstInv_InventoryBalance1[i].InvCode;
                                    var QtyTotalOK = lstInv_InventoryBalance1[i].QtyTotalOK;
                                    var QtyAvailOK = lstInv_InventoryBalance1[i].QtyAvailOK;

                                    if ($divList_Product_InvCodeInActual_Cache !== undefined && $divList_Product_InvCodeInActual_Cache !== null && $divList_Product_InvCodeInActual_Cache.length > 0) {
                                        var objProduct = {
                                            ProductCode: productCode,
                                            InvCodeInActual: InvCode,
                                            Qty: QtyAvailOK,
                                            QtyTotalOK: QtyTotalOK,
                                        };

                                        var extData = {
                                            idx: 9999,
                                        };

                                        var $divProduct_InvCodeInActual = $(commonUtils.getHtmlFromTemplate($('#tmpl_product_invcodeinactual_list_cache'), objProduct, extData));
                                        $divProduct_InvCodeInActual.appendTo($divList_Product_InvCodeInActual_Cache);
                                    }
                                }
                                commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeOutActual tr.trdata'), true);


                            } else {
                                showErrorDialog(data.Detail);
                            }
                        }
                    });


                }
            }
        }
    }
</script>
<script type="text/javascript">
    function changeProduct_LOT(thiz) {
        var $tr = $(thiz).parent().parent();
        var rd = $tr.attr('rd');
        var $select = $(thiz);
        if ($select !== undefined && $select !== null && $select.length > 0) {
            var $option = $select.find(":selected");
            var productCodeSelected = '';
            if ($option != undefined && $option !== null && $option.length > 0) {
                productCodeSelected = commonUtils.returnValue($option.attr('productcode'));
            }
            var productCodeOld = $tr.attr('productcode');
            var $divProducts = $tr.find('div.products-list');
            if ($divProducts !== undefined && $divProducts !== null) {
                @* Update ghi chú của hàng hóa hiện tại vào list cache danh sách hàng hóa *@
                var $divProductOld = $divProducts.find('div[productcode="' + productCodeOld + '"]');
                if ($divProductOld !== undefined && $divProductOld !== null && $divProductOld.length > 0) {
                    var remarkOld = $tr.find('textarea.remark-' + rd).val();
                    $divProductOld.find('input.Remark').val(remarkOld);
                }
                var $divProductSelected = $divProducts.find('div[productcode="' + productCodeSelected + '"]');
                if ($divProductSelected !== undefined && $divProductSelected !== null && $divProductSelected.length > 0) {
                    var productCodeRoot = $divProductSelected.find('input.ProductCodeRoot').val();
                    var productCodeBase = $divProductSelected.find('input.ProductCodeBase').val();
                    var productCode = $divProductSelected.find('input.ProductCode').val();
                    var productCodeUser = $divProductSelected.find('input.ProductCodeUser').val();
                    var productName = $divProductSelected.find('input.ProductName').val();
                    var flagLot = $divProductSelected.find('input.FlagLot').val();
                    var flagSerial = $divProductSelected.find('input.FlagSerial').val();

                    var invCodeInActual = $divProductSelected.find('input.InvCodeInActual').val();
                    var qty = $divProductSelected.find('input.Qty').val();
                    var qtyToTalOk = $divProductSelected.find('input.QtyTotalOK').val();
                    var uPIn = $divProductSelected.find('input.SellPrice').val();
                    var uPInDesc = $divProductSelected.find('input.UPOUTDesc').val();
                    var valInAfterDesc = $divProductSelected.find('input.ValOUTAfterDesc').val();
                    var remark = $divProductSelected.find('input.Remark').val();

                    var valConvert = $divProductSelected.find('input.ValConvert').val();
                    @* Gán giá trị *@
                    $tr.attr('productcode', productCode);
                    var $spanProductCodeUser = $tr.find('span.productcodeuser-' + rd);
                    if ($spanProductCodeUser !== undefined && $spanProductCodeUser !== null && $spanProductCodeUser.length > 0) {
                        $spanProductCodeUser.text(productCodeUser);
                    }

                    var $spanProductType = $tr.find('span.producttype-' + rd);
                    if ($spanProductType !== undefined && $spanProductType !== null && $spanProductType.length > 0) {
                        var objInvF_InventoryOutDtl = {
                            ProductCode: productCode,
                            ProductCodeUser: productCodeUser,
                            ProductCodeBase: productCodeBase,
                            ValConvert: valConvert,
                        };
                        var extData_ProductType = {};
                        var $productTypeLOT = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagLot'), objInvF_InventoryOutDtl, extData_ProductType));
                        $spanProductType.empty();
                        $productTypeLOT.appendTo($spanProductType);

                    }

                    var $spanProductName = $tr.find('span.productname-' + rd);
                    if ($spanProductName !== undefined && $spanProductName !== null && $spanProductName.length > 0) {
                        $spanProductName.text(productName);
                    }

                    $tr.find('input.productcode-' + rd).val(productCode);
                    $tr.find('input.productcodeuser-' + rd).val(productCodeUser);
                    $tr.find('input.productcodebase-' + rd).val(productCodeBase);
                    $tr.find('input.productcoderoot-' + rd).val(productCodeRoot);
                    $tr.find('input.productname-' + rd).val(productName);
                    $tr.find('input.flaglot-' + rd).val(flagLot);
                    $tr.find('input.flagserial-' + rd).val(flagSerial);

                    $select.attr('ischange', '0');
                    $select.attr('initdata', productCode);

                    $tr.find('input.qty-' + rd).val(qty);
                    $tr.find('input.QtyTotalOK-' + rd).val(qtyToTalOk);
                    $tr.find('input.invcodeinactual-' + rd).val(invCodeInActual);

                    $tr.find('input.upout-' + rd).val(uPIn);
                    $tr.find('input.upoutdesc-' + rd).val(uPInDesc);
                    $tr.find('input.valoutafterdesc-' + rd).val(valInAfterDesc);
                    $tr.find('textarea.remark-' + rd).val(remark);

                    tongTienHang();
                }
            }
        }
    }
</script>
<script type="text/javascript">
    function changeProduct_Serial(thiz) {
        debugger
        var $tr = $(thiz).parent().parent();
        var rd = $tr.attr('rd');
        var $select = $(thiz);
        if ($select !== undefined && $select !== null && $select.length > 0) {
            var $option = $select.find(":selected");
            var productCodeSelected = '';


            if ($option != undefined && $option !== null && $option.length > 0) {
                productCodeSelected = commonUtils.returnValue($option.attr('productcode'));
            }
            var productCodeOld = $tr.attr('productcode');
            var $divProducts = $tr.find('div.products-list');
            if ($divProducts !== undefined && $divProducts !== null) {
                @* Update ghi chú của hàng hóa hiện tại vào list cache danh sách hàng hóa *@
                var $divProductOld = $divProducts.find('div[productcode="' + productCodeOld + '"]');
                if ($divProductOld !== undefined && $divProductOld !== null && $divProductOld.length > 0) {
                    var remarkOld = $tr.find('textarea.remark-' + rd).val();
                    $divProductOld.find('input.Remark').val(remarkOld);
                }
                var $divProductSelected = $divProducts.find('div[productcode="' + productCodeSelected + '"]');
                if ($divProductSelected !== undefined && $divProductSelected !== null && $divProductSelected.length > 0) {
                    var productCodeRoot = $divProductSelected.find('input.ProductCodeRoot').val();
                    var productCodeBase = $divProductSelected.find('input.ProductCodeBase').val();
                    var productCode = $divProductSelected.find('input.ProductCode').val();
                    var productCodeUser = $divProductSelected.find('input.ProductCodeUser').val();
                    var productName = $divProductSelected.find('input.ProductName').val();
                    var flagLot = $divProductSelected.find('input.FlagLot').val();
                    var flagSerial = $divProductSelected.find('input.FlagSerial').val();

                    var invCodeInActual = $divProductSelected.find('input.InvCodeInActual').val();
                    var qty = $divProductSelected.find('input.Qty').val();
                    var qtyToTalOk = $divProductSelected.find('input.QtyTotalOK').val();
                    var uPIn = $divProductSelected.find('input.SellPrice').val();
                    var uPInDesc = $divProductSelected.find('input.UPOUTDesc').val();
                    var valInAfterDesc = $divProductSelected.find('input.ValOUTAfterDesc').val();
                    var remark = $divProductSelected.find('input.Remark').val();


                    @* Gán giá trị *@
                    $tr.attr('productcode', productCode);
                    var $spanProductCodeUser = $tr.find('span.productcodeuser-' + rd);
                    if ($spanProductCodeUser !== undefined && $spanProductCodeUser !== null && $spanProductCodeUser.length > 0) {
                        $spanProductCodeUser.text(productCodeUser);
                    }
                    var $spanProductType = $tr.find('span.producttype-' + rd);
                    if ($spanProductType !== undefined && $spanProductType !== null && $spanProductType.length > 0) {
                        var objInvF_InventoryOutDtl = {
                            ProductCode: productCode,
                            ProductCodeUser: productCodeUser,
                            ProductName: productName,
                            ProductCodeBase: productCodeBase
                        };
                        var extData_ProductType = {};
                        var $productTypeSerial = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagSerial'), objInvF_InventoryOutDtl, extData_ProductType));
                        $spanProductType.empty();
                        $productTypeSerial.appendTo($spanProductType);

                    }


                    var $spanProductName = $tr.find('span.productname-' + rd);
                    if ($spanProductName !== undefined && $spanProductName !== null && $spanProductName.length > 0) {
                        $spanProductName.text(productName);
                    }
                    $tr.find('input.productcode-' + rd).val(productCode);
                    $tr.find('input.productcodeuser-' + rd).val(productCodeUser);
                    $tr.find('input.productcodebase-' + rd).val(productCodeBase);
                    $tr.find('input.productcoderoot-' + rd).val(productCodeRoot);
                    $tr.find('input.productname-' + rd).val(productName);
                    $tr.find('input.flaglot-' + rd).val(flagLot);
                    $tr.find('input.flagserial-' + rd).val(flagSerial);

                    $select.attr('ischange', '0');
                    $select.attr('initdata', productCode);

                    $tr.find('input.qty-' + rd).val(qty);
                    $tr.find('input.QtyTotalOK-' + rd).val(qtyToTalOk);
                    $tr.find('input.invcodeinactual-' + rd).val(invCodeInActual);

                    $tr.find('input.upout-' + rd).val(uPIn);
                    $tr.find('input.upoutdesc-' + rd).val(uPInDesc);
                    $tr.find('input.valoutafterdesc-' + rd).val(valInAfterDesc);
                    $tr.find('textarea.remark-' + rd).val(remark);

                    tongTienHang();

                }

            }
        }
    }
</script>

@*End Xử lý tính toán trên lưới hàng hóa*@


<script>
    function inputQty(thiz) {
        setTimeout(function () {
            debugger;
            var $tr = $(thiz).parent().parent();
            var rd = $tr.attr('rd');
            var listError = [];

            var fQty = 0.0;
            var qty = commonUtils.returnValue($(thiz).val());

            var flagCombo = $tr.find('input.flagcombo-' + rd).val();
            var productCode = $tr.attr('productcode');
            var invBUPattern = "";
            var selectKho = $('select.mstinventory').eq(0);
            var optionSelect = $(selectKho).find('option:selected');
            invBUPattern = optionSelect.attr("invBUPattern");
            var valconvert = $tr.find('input.valconvert-' + rd).val();
            var productCodeUser = $tr.find('input.productcodeuser-' + rd).val();
            var productCodeBase = $tr.find('input.productcodebase-' + rd).val();
            var productName = $tr.find('input.productname-' + rd).val();

            var fQtyTotalOK = 0.0;
            var qtyTotalOK = commonUtils.returnValue($tr.find('input.QtyTotalOK-' + rd).val());
            if (!commonUtils.isNullOrEmpty(qtyTotalOK)) {
                fQtyTotalOK = commonUtils.parseFloat(qtyTotalOK);
            }


            var fQtyOrd = 0.0;
            var qtyOrd = commonUtils.returnValue($tr.find('input.qtyOrd-' + rd).val());
            if (!commonUtils.isNullOrEmpty(qtyOrd)) {
                fQtyOrd = commonUtils.parseFloat(qtyOrd);
            }

            if (commonUtils.isNullOrEmpty(qty)) {
                var objToastr = {
                    ToastrType: 'error',
                    ToastrMessage: 'Vui lòng nhập số lượng',
                };
                listError.push(objToastr);
            }
            else {
                fQty = commonUtils.parseFloat(qty);
                if (fQty <= 0) {
                    var objToastr = {
                        ToastrType: 'error',
                        ToastrMessage: 'Số lượng phải > 0',
                    };
                    listError.push(objToastr);
                }
                else if (fQtyTotalOK < fQty && flagCombo == '0') {
                    var objToastr = {
                        ToastrType: 'error',
                        ToastrMessage: 'Số lượng < số lượng tồn',
                    };
                    listError.push(objToastr);
                }

                var checked = $('#FlagXuatTuDH').prop('checked');

                if (checked == true) {


                    if (fQty > fQtyOrd) {
                        var objToastr = {
                            ToastrType: 'error',
                            ToastrMessage: 'Số lượng xuất phải <= số lượng còn lại của đơn hàng',
                        };
                        listError.push(objToastr);

                        $(thiz).val('');
                    }
                }


            }

            
            if (listError !== undefined && listError !== null && listError.length > 0) {
                commonUtils.showToastr(listError);
                return false;
            }
            else {


                //xử lý load lại list tồn kho
                var url = '@Url.Action("Get_TonKho_PhanBo", "InvFInventoryReturnSup")';
                var dataInput = {
                    productCode: productCode,
                    productCodeBase: productCodeBase,
                    InvBUPattern: invBUPattern,
                    ValConvert: valconvert,
                    ProductCodeUser: productCodeUser,
                    ProductName: productName,
                    qty: fQty,
                };
                $.ajax({
                    type: 'post',
                    data: dataInput,
                    url: url,
                    dataType: 'json',
                    async: false,
                    beforeSend: function () {
                    }
                }).done(function (objResult) {
                    debugger
                    if (objResult.Success) {
                        debugger

                        var listInventoryBalance = [];
                        if (objResult.ListInventoryBalance !== undefined && objResult.ListInventoryBalance !== null && objResult.ListInventoryBalance.length > 0) {

                            //xoá cache hàng hoá đã lưu


                            //var productCode = $tr.attr('productcode');
                            var $tableProduct_InvCodeInActual_Cache = $('#table-detailInvCodeOutActual'); @* Cache hàng hóa - vị trí *@
                            var rowOlds = $tableProduct_InvCodeInActual_Cache.find('tr[productcodebase="' + productCodeBase + '"]').length;
                            if (rowOlds > 0) {
                                $tableProduct_InvCodeInActual_Cache.find('tr[productcodebase="' + productCodeBase + '"]').each(function () {
                                    debugger
                                    var $tr = $(this);
                                    var $divList_Product_InvCodeInActual = $tr.find('div.products-list-cache');
                                    if ($divList_Product_InvCodeInActual !== undefined && $divList_Product_InvCodeInActual !== null) {

                                        $divList_Product_InvCodeInActual.find('div.result[productcode="' + productCode + '"]').each(function () {
                                            var $div = $(this);
                                            $div.remove();

                                        });
                                    }

                                });
                            }


                            //end xoá cache hàng hoá đã lưu



                            listInventoryBalance = objResult.ListInventoryBalance;

                            var lstVitri = '';
                            var checkQtyTotalOK = true;
                            var fTotalQtyPhanBo = 0.0;
                            debugger

                            var $trInvCodeInActual = $tableProduct_InvCodeInActual_Cache.find('tr[productcodebase="' + productCodeBase + '"]');

                            var $divList_Product_InvCodeInActual_Cache = $trInvCodeInActual.find('div.products-list-cache');
                            for (var j = 0; j < listInventoryBalance.length; j++) {
                                debugger
                                var objInventoryBalance = listInventoryBalance[j];
                                if (objInventoryBalance !== undefined && objInventoryBalance !== null) {
                                    if (checkQtyTotalOK) {
                                        var invCodeOutActual = commonUtils.returnValue(objInventoryBalance.InvCode);
                                        if (!commonUtils.isNullOrEmpty(invCodeOutActual)) {
                                            if (lstVitri == "") {
                                                lstVitri += invCodeOutActual;
                                            }
                                            else {
                                                lstVitri += ", " + invCodeOutActual;
                                            }
                                        }

                                        var fQtyPhanBo = 0.0;
                                        var fQtyTotalOKCur = commonUtils.parseFloat(objInventoryBalance.QtyTotalOK);
                                        if (fTotalQtyPhanBo < fQtyTotalOK) {
                                            if (fQty > fQtyTotalOKCur) {
                                                fQtyPhanBo = fQtyTotalOKCur;
                                                fQty -= fQtyPhanBo;
                                            }
                                            else {
                                                fQtyPhanBo = fQty;
                                                fQty = 0;
                                                checkQtyTotalOK = false;
                                            }

                                            fTotalQtyPhanBo += fQtyPhanBo;
                                        }

                                        //add list mới vào cache hàng hoá
                                        var objProduct = {
                                            ProductCode: productCode,
                                            InvCodeInActual: invCodeOutActual,
                                            Qty: fQtyPhanBo,
                                            QtyTotalOK: objInventoryBalance.QtyTotalOK,
                                        };

                                        var extData = {
                                            idx: 9999,
                                        };

                                        var $divProduct_InvCodeInActual = $(commonUtils.getHtmlFromTemplate($('#tmpl_product_invcodeinactual_list_cache'), objProduct, extData));
                                        $divProduct_InvCodeInActual.appendTo($divList_Product_InvCodeInActual_Cache);
                                    }
                                    else {
                                        debugger
                                        var objProduct = {
                                            ProductCode: productCode,
                                            InvCodeInActual: objInventoryBalance.InvCode,
                                            Qty: 0,
                                            QtyTotalOK: objInventoryBalance.QtyTotalOK,
                                        };

                                        var extData = {
                                            idx: 9999,
                                        };

                                        var $divProduct_InvCodeInActual = $(commonUtils.getHtmlFromTemplate($('#tmpl_product_invcodeinactual_list_cache'), objProduct, extData));
                                        $divProduct_InvCodeInActual.appendTo($divList_Product_InvCodeInActual_Cache);
                                    }
                                }

                                debugger

                            }


                            commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeOutActual tr.trdata'), true);





                            var fUPOut = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.upout-' + rd).val()));
                            var fUPOutDesc = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.upoutdesc-' + rd).val()));
                            var fValOutAfterDesc = (fUPOut - fUPOutDesc) * fQty;
                            $tr.find('input.valoutafterdesc-' + rd).val(fValOutAfterDesc);
                            $tr.find('input.invcodeinactual-' + rd).val(lstVitri);
                            tongTienHang();
                            
                           
                        }
                    }
                    else {
                        if (!commonUtils.isNullOrEmpty(objResult.Detail)) {
                            _showErrorMsg123('Lỗi!', objResult.Detail);
                        }
                    }
                }).fail(function (jqXHR, textStatus, errorThrown) {

                }).always(function () {
                });










                //var fUPOut = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.upout-' + rd).val()));
                //var fUPOutDesc = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.upoutdesc-' + rd).val()));
                //var fValOutAfterDesc = (fUPOut - fUPOutDesc) * fQty;
                //$tr.find('input.valoutafterdesc-' + rd).val(fValOutAfterDesc);
                //tongTienHang();
                //debugger;
                ////Cập nhật SL hàng hóa tại các vị trí (Mặc định gán số lượng cho vị trí đầu tiên, các vị trí còn lại gán = 0)
               
                //if (!commonUtils.isNullOrEmpty(productCode)) {
                //    $('#table-detailInvCodeOutActual').find('tr[productcodebase="' + productCodeBase + '"]').each(function () {
                //        debugger
                //        var $trInvCodeInActual = $(this);
                //        if ($trInvCodeInActual !== undefined && $trInvCodeInActual !== null && $trInvCodeInActual.length > 0) {
                //            var $divList_Product_InvCodeInActual_Cache = $trInvCodeInActual.find('div.products-list-cache');
                //            $divList_Product_InvCodeInActual_Cache.find('div.result[productcode="' + productCode + '"]').each(function () {
                //                var $div = $(this);
                //                $div.find('input.Qty').val(fQty);
                //                fQty = 0.0;
                //            });

                //        }

                //    });

                //}

            }
        }, 0);
    }
</script>


<script type="text/javascript">
    function inputUPIn(thiz) {
        setTimeout(function () {
            debugger

            var $tr = $(thiz).parent().parent();
            var rd = $tr.attr('rd');

            var listError = [];


            var fUPOutDesc = 0.0;
            var fUPOut = 0.0;
            var uPOut = commonUtils.returnValue($(thiz).val());

            if (commonUtils.isNullOrEmpty(uPOut)) {
                var objToastr = {
                    ToastrType: 'error',
                    ToastrMessage: 'Vui lòng nhập đơn giá',
                };
                listError.push(objToastr);
            }
            else {
                fUPOut = commonUtils.parseFloat(uPOut);
                if (fUPOut < 0) {
                    var objToastr = {
                        ToastrType: 'error',
                        ToastrMessage: 'Đơn giá >= 0',
                    };
                    listError.push(objToastr);
                }
                else {
                    debugger
                    fUPOutDesc = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.upoutdesc-' + rd).val()));
                    if (fUPOut < fUPOutDesc) {
                        var objToastr = {
                            ToastrType: 'error',
                            ToastrMessage: 'Đơn giá >= giá giảm',
                        };
                        listError.push(objToastr);
                        //
                        //$(thiz).val(uPInInit);
                    }
                }
            }
            if (listError !== undefined && listError !== null && listError.length > 0) {
                commonUtils.showToastr(listError);
                return false;
            }
            else {
                debugger
                var fQty = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.qty-' + rd).val()));
                var fValOutAfterDesc = (fUPOut - fUPOutDesc) * fQty;
                $tr.find('input.valoutafterdesc-' + rd).val(fValOutAfterDesc);

                tongTienHang();
            }


        }, 0);

    }
</script>


<script type="text/javascript">
    function inputUPInDesc(thiz) {
        setTimeout(function () {
            debugger

            var $tr = $(thiz).parent().parent();
            var rd = $tr.attr('rd');

            var listError = [];
            var fUPOut = 0.0;
            var fUPOutDesc = 0.0;
            var uPOutDesc = commonUtils.returnValue($(thiz).val());
            if (commonUtils.isNullOrEmpty(uPOutDesc)) {
                var objToastr = {
                    ToastrType: 'error',
                    ToastrMessage: 'Vui lòng nhập giá giảm',
                };
                listError.push(objToastr);
            }
            else {
                fUPOutDesc = commonUtils.parseFloat(uPOutDesc);
                if (fUPOutDesc < 0) {
                    var objToastr = {
                        ToastrType: 'error',
                        ToastrMessage: 'Giá giảm >= 0',
                    };
                    listError.push(objToastr);
                }
                else {
                    fUPOut = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.upout-' + rd).val()));
                    if (fUPOut < fUPOutDesc) {
                        var objToastr = {
                            ToastrType: 'error',
                            ToastrMessage: 'Giá giảm <= đơn giá',
                        };
                        listError.push(objToastr);
                        //
                        //$(thiz).val(uPInDescInit);
                    }
                }
            }


            if (listError !== undefined && listError !== null && listError.length > 0) {
                commonUtils.showToastr(listError);
                return false;
            }
            else {
                debugger
                var fQty = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.qty-' + rd).val()));
                var fValOutAfterDesc = (fUPOut - fUPOutDesc) * fQty;

                $tr.find('input.valoutafterdesc-' + rd).val(fValOutAfterDesc);

                tongTienHang();
            }

        }, 0);
    }
</script>


<script type="text/javascript">
    function showPopupInvCodeInActual(thiz, productCode, productCodeUser, productName, productCodeBase, ValConvert, productCodeRoot) {
        debugger
        var $tr = $('tbody#table-tbodyID tr[productcode = "' + productCode + '"]');
        var rd = $tr.attr('rd');
        var invcodecur = commonUtils.returnValue($tr.find('input.invcodeinactual-' + rd).val());
        //tim kho xuat
        var valmstInventory = "";
        if ($('select.mstinventory').length > 0) {
            var selectKho = $('select.mstinventory').eq(0);
            var optionSelect = $(selectKho).find('option:selected');

            valmstInventory = optionSelect.attr("invBUPattern");

        }

        var qTy = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.qty-' + rd).val()));
        var url = '@Url.Action("GetTonKhoPhanBo", "ModalCommon")';
        var strValConvert = "";
        $.ajax({
            url: url,
            data: {
                productCode: productCode,
                invBUPattern: valmstInventory,
                productCodeBase: productCodeBase,
                ValConvert: strValConvert,
                ProductCodeUser: productCodeUser,
                ProductName: productName,
                qty: qTy
            },
            type: 'post',
            dataType: 'json',
            traditional: true,
            success: function (data) {
                debugger
                if (data.Success) {
                    debugger
                    $('#ShowPopupTonKho').modal({
                        backdrop: false,
                        keyboard: true,
                    });
                    $("#ShowPopupTonKho").html(data.Html); // truyen html vao #form
                    var display = $("#ShowPopupTonKho").css('display');
                    if (display == "none") {
                        $("#ShowPopupTonKho").show();
                    }
                    debugger;

                    ShowTonKhoCache2(productCode, productCodeRoot, productCodeBase, productCodeUser, productName, ValConvert, valmstInventory, thiz);

                } else {
                    showErrorDialog(data.Detail);
                }
            }
        });
    }
</script>
<script type="text/javascript">
    function ShowTonKhoCache2(productCode, productCodeRoot, productCodeBase, productCodeUser, productName, ValConvert, valmstInventory, thiz) {
        debugger

        var $trimport = $('#table-detailProductImport').find('tr[productcode="' + productCode + '"]').length;
        if ($trimport > 0) {
            $('#table-tbodyIDTonKho tr.trdata').each(function () {
                debugger
                var tr = $(this);
                var idx = tr.attr("idx");
                var InvCode = tr.find('input[name="DtlTonKho[' + idx + '].InvCode"]').val();
                var trComboDt = $('#table-detailProductImport tr.trdata[invcodeinactual="' + InvCode + '"][productcode="' + productCode + '"]');
                var idCombo = trComboDt.attr("idx");
                var qty = 0;
                if (trComboDt.length > 0) {
                    qty = trComboDt.find('input.Qty').val();
                }

                // Gán lại lên danh sách
                tr.find('input[name="DtlTonKho[' + idx + '].QtyOut"]').val(qty);

            });


        }

        else {

            debugger
            var $trparent = $(thiz).parent();
            var idx = $trparent.attr('idx');
            var $trcur1 = $('#table-detailInvCodeOutActual').find('tr[idx="' + idx + '"]').length;
            var $trcur = $('#table-detailInvCodeOutActual').find('tr[productcodebase="' + productCodeBase + '"]').length;
            if ($trcur1 > 0) {
                //var result = $('#table-detailInvCodeOutActual tr td div.products-list-cache .result[productcode="' + productCode + '"]');
                var result = $trcur1.find('div.products-list-cache .result[productcode="' + productCode + '"]');

                var strHtml = "";
                var st = 0;
                if (result !== null && result.length > 0) {
                    for (var iresult = 0; iresult < result.length; iresult++) {
                        debugger
                        var InvCode = $(result[iresult]).find('input.InvCodeInActual').val();
                        var QtyOut = $(result[iresult]).find('input.Qty').val();
                        var QtyTotalOK = $(result[iresult]).find('input.QtyTotalOK').val();

                        strHtml = getHtmlFromTemplate($('#rowtemplateTonKhoPhanBo'), {
                            InvCode: InvCode,
                            QtyOut: QtyOut,
                            QtyTotalOK: QtyTotalOK,
                            idx: 999999
                        });

                        if (st == 0) {
                            $('#table-tbodyIDTonKho').html(strHtml);
                        }
                        else {
                            $('#table-tbodyIDTonKho').append(strHtml);
                        }
                        st++;
                        updateTableTrIdx($('#table-tbodyIDTonKho tr'), false);
                    }
                }
            }


            @*var listDtl = [];
            var $trcur = $('#table-detailInvCodeOutActual').find('tr[productcodebase="' + productCodeBase + '"]').length;
            if ($trcur > 0) {
                $('#table-detailInvCodeOutActual').find('tr[productcodebase="' + productCodeBase + '"]').each(function () {
                    debugger
                    var $trInvCodeInActual = $(this);
                    if ($trInvCodeInActual !== undefined && $trInvCodeInActual !== null && $trInvCodeInActual.length > 0) {
                        var $divList_Product_InvCodeInActual_Cache = $trInvCodeInActual.find('div.products-list-cache');
                        $divList_Product_InvCodeInActual_Cache.find('div.result[productcode="' + productCode + '"]').each(function () {
                            debugger
                            var $div = $(this);
                            var productCodeCur = $div.find('input.ProductCode').val();
                            var qTycur = $div.find('input.Qty').val();
                            var invCodeCur = $div.find('input.InvCodeInActual').val();

                            var obj = {
                                ProductCode: productCodeCur,
                                Qty: qTycur,
                                InvCodeOutActual: invCodeCur
                            };
                            listDtl.push(obj);
                        });

                    }

                });

                var objListDtl = commonUtils.returnJSONValue(listDtl);


                var url = '@Url.Action("GetTonKho123", "ModalCommon")';


                $.ajax({
                    url: url,
                    data: {
                        productCode: productCode,
                        invBUPattern: valmstInventory,
                        productCodeBase: productCodeBase,
                        ValConvert: ValConvert,
                        ProductCodeUser: productCodeUser,
                        ProductName: productName,
                        listdetail: objListDtl,
                        ViewType: 'create'
                    },
                    type: 'post',
                    dataType: 'json',
                    traditional: true,
                    success: function (data) {
                        debugger
                        if (data.Success) {
                            debugger
                            $('#ShowPopupTonKho').modal({
                                backdrop: false,
                                keyboard: true,
                            });
                            $("#ShowPopupTonKho").html(data.Html); // truyen html vao #form
                            $("#ShowPopupTonKho")
                            var display = $("#ShowPopupTonKho").css('display');
                            if (display == "none") {
                                $("#ShowPopupTonKho").show();
                            }
                        } else {
                            showErrorDialog(data.Detail);
                        }
                    }
                });
            }*@


        }


    }
</script>






<script type="text/javascript">
    function product_InvF_InventoryOutInstLot_Save() {
        debugger
        var rows = $('tbody#table-tbodyIDLo tr.trdata').length;
        if (rows > 0) {
            var productCode = commonUtils.returnValueText('#manageFormShowPopupLo input#mdLo_ProductCode');
            if (!commonUtils.isNullOrEmpty(productCode)) {
                @* Xóa LOT - hàng hóa đã lưu cache *@

                var rowOlds = $('#table-detailLot').find('tr[productcode="' + productCode + '"]').length;
                if (rowOlds > 0) {
                    $('#table-detailLot').find('tr[productcode="' + productCode + '"]').each(function () {
                        $(this).remove();
                    });
                }
                @* Thêm LOT - hàng hóa vào cache *@
                var strInvCodeInActual = '';
                var fTotalQty = 0.0;
                var arrayInvCode = [];
                var lstVitri = "";
                var listError = [];
                var stop = false;
                $("#table-tbodyIDLo tr.trdata").each(function () {
                    debugger
                    var $tr = $(this);
                    var rd = $tr.attr('idx');
                    var productlotno = $tr.attr('productlotno');

                    var ProductLotNo = $tr.find('input[name="Lst_InvF_InventoryOutLotDtl[' + rd + '].ProductLotNo"]').val();
                    var ProductionDate = $tr.find('input[name="Lst_InvF_InventoryOutLotDtl[' + rd + '].ProductionDate"]').val();
                    var ExpiredDate = $tr.find('input[name="Lst_InvF_InventoryOutLotDtl[' + rd + '].ExpiredDate"]').val();
                    var fQty = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input[name="Lst_InvF_InventoryOutLotDtl[' + rd + '].Qty"]').val()));
                    var QtyTotalOK = $tr.find('input[name="Lst_InvF_InventoryOutLotDtl[' + rd + '].QtyTotalOK"]').val();
                    var InvCode = $tr.find('input[name="Lst_InvF_InventoryOutLotDtl[' + rd + '].InvCode"]').val();
                    if (InvCode != null) {
                        if (arrayInvCode.includes(InvCode) == false && fQty !== '0' && fQty > 0) {
                            arrayInvCode.push(InvCode);
                            if (lstVitri == "") {
                                lstVitri += InvCode;
                            }
                            else {
                                lstVitri += ", " + InvCode;
                            }
                        }

                    }

                    var fqtyok = parseFloat(QtyTotalOK);
                    if (fQty > fqtyok) {
                        var objToastr = {
                            ToastrType: 'error',
                            ToastrMessage: 'Sô lượng xuất không được lớn hơn số lượng tồn!'
                        };
                        listError.push(objToastr);
                        commonUtils.showToastr(listError);
                        stop = true;
                        return false;
                    }
                    if (stop === true) return;
                    fTotalQty += fQty;
                    //if (fQty > 0) {
                        var objProduct = {
                            ProductCode: productCode,
                            ProductLotNo: ProductLotNo,
                            ProductionDate: ProductionDate,
                            ExpiredDate: ExpiredDate,
                            Qty: fQty,
                            InvCodeInActual: InvCode,
                            QtyTotalOK: QtyTotalOK,
                        };

                        var extData = {
                            idx: 9999,
                        };
                        var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_LOT'), objProduct, extData));
                        $item.appendTo($('#table-detailLot'));
                    //}
                });
                commonUtils.updateTableTrNotShowIdx($('#table-detailLot tr.trdata'), true);
                if (stop === true) return;
                debugger
                @* Update lại vị trí, số lượng *@
                    var $trInvF_InventoryInDtl = $('#table-tbodyID').find('tr[productcode="' + productCode + '"]');
                if ($trInvF_InventoryInDtl !== undefined && $trInvF_InventoryInDtl !== null && $trInvF_InventoryInDtl.length > 0) {
                    var rdInvF_InventoryInDtl = $trInvF_InventoryInDtl.attr('rd');
                    var $inputQty = $trInvF_InventoryInDtl.find('input.qty-' + rdInvF_InventoryInDtl);
                    if ($inputQty !== undefined && $inputQty !== null && $inputQty.length > 0) {
                        $inputQty.val(fTotalQty);
                    }

                    var $inputInvCodeInActual = $trInvF_InventoryInDtl.find('input.invcodeinactual-' + rdInvF_InventoryInDtl);
                    if ($inputInvCodeInActual !== undefined && $inputInvCodeInActual !== null && $inputInvCodeInActual.length > 0) {
                        $inputInvCodeInActual.val(lstVitri);
                    }

                    tongTienHang();

                }
                ClosePopupLo();

            }
        }
    }
</script>


@*show popup lô*@

<script type="text/javascript">
    function showPopupLot(thiz, productCode, productCodeUser, productName, productCodeBase, ValConvert) {
        debugger
        //lấy list lot hiện tại
        var obj = {};
        var listLot = [];
        var valmstInventory = "";
        if ($('select.mstinventory').length > 0) {
            var selectKho = $('select.mstinventory').eq(0);
            var optionSelect = $(selectKho).find('option:selected');

            valmstInventory = optionSelect.attr("invBUPattern");

        }
        var $trcur = $('tbody#table-tbodyID tr[productcode = "' + productCode + '"]');
        var rd = $trcur.attr('rd');
        var qTy = $trcur.find('input.qty-' + rd).val();

        var $tr = $('#table-detailLot').find('tr[productcode="' + productCode + '"]');

        if ($tr.length > 0) {
            $tr.each(function () {
                debugger
                var tr = $(this);
                var idx = $(tr).attr('idx');
                var trdata = $('tbody#table-detailLot').find('tr.trdata[idx = "' + idx + '"]');

                var ProductionDate = trdata.find('input.ProductionDate').val();
                var InvCode = trdata.find('input.InvCodeInActual').val();
                var ProductLotNo = trdata.find('input.ProductLotNo').val();
                var ExpiredDate = trdata.find('input.ExpiredDate').val();
                var QtyTotalOK = trdata.find('input.QtyTotalOK').val();
                var Qty = trdata.find('input.Qty').val();




                obj = {
                    ProductLotNo: ProductLotNo,
                    ProductCode: productCode,
                    Qty: Qty,
                    InvCode: InvCode
                };
                listLot.push(obj);



            });
        }
        var objListLot = commonUtils.returnJSONValue(listLot);
        var url = '@Url.Action("Lo", "ModalCommon")';
        $.ajax({
            url: url,
            data: {
                productCode: productCode,
                productCodeBase: productCodeBase,
                invBUPattern: valmstInventory,
                productCodeUser: productCodeUser,
                productName: productName,
                valconvert: ValConvert,
                qty: qTy,
                listLot: objListLot
            },
            type: 'post',
            dataType: 'json',
            traditional: true,
            success: function (data) {
                debugger
                if (data.Success) {
                    debugger
                    $('#ShowPopupLo').modal({
                        backdrop: false,
                        keyboard: true,
                    });
                    $("#ShowPopupLo").html(data.Html); // truyen html vao #form
                    var display = $("#ShowPopupLo").css('display');
                    if (display == "none") {
                        $("#ShowPopupLo").show();
                    }
                    sumPopupLot();
                } else {
                    showErrorDialog(data.Detail);
                }
            }
        });
    }
</script>

<script type="text/javascript">
    function sumPopupLot() {
        debugger
        var fTotalQty = 0.0;
        $('#table-tbodyIDLo tr.trdata').each(function () {
            var trcur = $(this);
            var rd = trcur.attr('idx');
            var fQty = commonUtils.parseFloat(commonUtils.returnValue(trcur.find('input[name="Lst_InvF_InventoryOutLotDtl[' + rd + '].Qty"]').val()));
            fTotalQty += fQty;

        });
        $('.SumQtyOut').val(fTotalQty);
    }
</script>


<script type="text/javascript">
    function showPopupSerial(productCode, productCodeUser, productName, productCodeBase) {
        debugger
        var $tr = $('tbody#table-tbodyID tr[productcode = "' + productCode + '"]');
        var rd = $tr.attr('rd');

        var viewtype = '@CUtils.StrValue(viewType)';
        //tim kho suat
        var valmstInventory = "";
        if ($('select.mstinventory').length > 0) {
            var selectKho = $('select.mstinventory').eq(0);
            var optionSelect = $(selectKho).find('option:selected');

            valmstInventory = optionSelect.attr("invBUPattern");

        }


        var type = "";
        var url = '@Url.Action("Serial", "ModalCommon")';
        $.ajax({
            url: url,
            data: {
                productCode: productCode,
                invBUPattern: valmstInventory,
                productCodeBase: productCodeBase,
                type: type,
                productCodeUser: productCodeUser,
                productName: productName,
                ViewType: viewtype
            },
            type: 'post',
            dataType: 'json',
            traditional: true,
            success: function (data) {
                if (data.Success) {

                    $('#ShowPopupSerial').modal({
                        backdrop: false,
                        keyboard: true,
                    });
                    $("#ShowPopupSerial").html(data.Html); // truyen html vao #form
                    var display = $("#ShowPopupSerial").css('display');
                    if (display == "none") {
                        $("#ShowPopupSerial").show();
                    }
                    ShowSerialCache1(productCode, productCodeUser, productName, productCodeBase);
                } else {
                    showErrorDialog(data.Detail);
                }
            }
        });
    }
</script>


<script type="text/javascript">
    function ShowSerialCache1(productCode,productCodeUser, productName, productCodeBase) {
        @*debugger
        var $tr = $('tbody#table-tbodyID tr[productcode = "' + productCode + '"]');
        var rd = $tr.attr('rd');
        //tim kho suat
        var valmstInventory = "";
        if ($('select.mstinventory').length > 0) {
            var selectKho = $('select.mstinventory').eq(0);
            var optionSelect = $(selectKho).find('option:selected');

            valmstInventory = optionSelect.attr("invBUPattern");

        }
        var Qty = $tr.find('input.qty-' + rd).val();
        var url = '@Url.Action("GetPhanBoSerial", "ModalCommon")';
            $.ajax({
                url: url,
                data: {
                    productCode: productCode,
                    productCodeBase: productCodeBase,
                    InvBUPattern: valmstInventory,
                    Qty: Qty,
                },
                type: 'post',
                dataType: 'json',
                traditional: true,
                success: function (objResult) {
                    debugger
                    if (objResult.Success) {
                        debugger
                        List_PhanBoLot = objResult.List_PhanBoLot;
                        var objLst_PhanBo = [];
                        var list_locPhanBo = {};
                        var strHtml = "";
                        var st = 0;

                            var rowOlds = $('#table-detailSerial').find('tr[productcode="' + productCode + '"]').length;
                        if (rowOlds > 0) {
                            $('#table-detailSerial').find('tr[productcode="' + productCode + '"]').each(function () {
                                $(this).remove();
                            });
                        }
                        for (var i = 0; i < List_PhanBoLot.length; i++) {
                            strHtml = getHtmlFromTemplate($('#rowtemplateSerial'), {
                                ProductCode: List_PhanBoLot[i].ProductCode,
                                SerialNo: List_PhanBoLot[i].SerialNo,
                                InvCode: List_PhanBoLot[i].InvCode,
                                idx: 999999
                            });

                            if (st == 0) {
                                $('#table-tbodyIDSerial').html(strHtml);
                            }
                            else {
                                $('#table-tbodyIDSerial').append(strHtml);
                            }
                            st++;
                            updateTableTrIdx($('#table-tbodyIDSerial tr'), false);

                            var objProduct = {
                                ProductCode: List_PhanBoLot[i].ProductCode,
                                InvCodeInActual: List_PhanBoLot[i].InvCode,
                                SerialNo: List_PhanBoLot[i].SerialNo,
                            };
                            var extData = {
                                idx: 9999,
                            };

                            var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_Serial'), objProduct, extData));
                            $item.appendTo($('#table-detailSerial'));


                        }
                        commonUtils.updateTableTrNotShowIdx($('#table-detailSerial tr.trdata'), true);

                    }
                    else {
                        if (!commonUtils.isNullOrEmpty(objResult.Detail)) {
                            _showErrorMsg123('Lỗi!', objResult.Detail);
                        }
                    }
                }
            });*@


        var $tr = $('#table-detailSerial').find('tr[productcode="' + productCode + '"]');

        var strHtml = "";
        var st = 0;
        if ($tr.length > 0) {
            $tr.each(function () {
                debugger
                var tr = $(this);
                var idx = $(tr).attr('idx');
                var trdata = $('tbody#table-detailSerial').find('tr.trdata[idx = "' + idx + '"]');
                strHtml = getHtmlFromTemplate($('#rowtemplateSerial'), {
                    ProductCode: trdata.find('input.ProductCode').val(),
                    SerialNo: trdata.find('input.SerialNo').val(),
                    InvCode: trdata.find('input.InvCodeInActual').val(),
                    idx: 999999
                });
                if (st == 0) {
                    $('#table-tbodyIDSerial').html(strHtml);
                }
                else {
                    $('#table-tbodyIDSerial').append(strHtml);
                }
                st++;
                updateTableTrIdx($('#table-tbodyIDSerial tr'), false);
            })
        }
    }
</script>


<script>
    function renderProductInvFInventoryOutInstLot(data) {
        debugger

        var objProduct_InvF_InventoryOutInstLot = data.Product_InvF_InventoryOutInstLot;
        var listMst_Inventory = data.Lst_Mst_Inventory;
        if (objProduct_InvF_InventoryOutInstLot !== null && objProduct_InvF_InventoryOutInstLot !== undefined) {
            //add vao cache lot
            var extData = {
                idx: 9999,
            };
            var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_LOT'), objProduct_InvF_InventoryOutInstLot, extData));
            $item.appendTo($('#table-detailLot'));
        }
        //commonUtils.updateTableTrNotShowIdx($('#table-detailLot tr.trdata'), true);
    }
</script>


<script>
    function renderProductInvFInventoryOutProductImport(data) {
        debugger
        var objProduct_InvF_InventoryOutProductImport = data.Product_InvF_InventoryReturnSupDtlChild;
        if (objProduct_InvF_InventoryOutProductImport !== null && objProduct_InvF_InventoryOutProductImport !== undefined) {
            //add vao cache lot
            var extData = {
                idx: 9999,
            };
            var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_Import_Excel'), objProduct_InvF_InventoryOutProductImport, extData));
            $item.appendTo($('#table-detailProductImport'));


        }
    }
</script>

<script>
    function renderProductInvFInventoryOutInstSerial(data) {
        debugger
        objProduct_InvF_InventoryOutInstSerial = data.Product_InvF_InventoryInInstSerial;
        if (objProduct_InvF_InventoryOutInstSerial != null && objProduct_InvF_InventoryOutInstSerial != undefined) {
            var extData = {
                idx: 9999,
            };
            var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_Serial'), objProduct_InvF_InventoryOutInstSerial, extData));
            $item.appendTo($('#table-detailSerial'));
        }
    }
</script>

<script>
    function renderInvF_InventoryOutDtl_Multi(data) {
        //debugger;
        var date = new Date();
        var randomCur = date.getTime();
        var randHex = commonUtils.randHex(12);
        randomCur = randomCur + randHex;


        var objInvF_InventoryOutDtl = data.InvF_InventoryOutDtl;
        var List_ProductBase = data.Lst_InvF_InventoryOutBase;

        if (objInvF_InventoryOutDtl !== undefined && objInvF_InventoryOutDtl !== null) {
            var productCode = commonUtils.returnValue(objInvF_InventoryOutDtl.ProductCode);
            var productCodeBase = commonUtils.returnValue(objInvF_InventoryOutDtl.ProductCodeBase);
            if (!commonUtils.isNullOrEmpty(productCode)) {
                var productcoderootCss = 'productcoderoot-' + randomCur;
                var productcodebaseCss = 'productcodebase-' + randomCur;
                var productcodeCss = 'productcode-' + randomCur;
                var productcodeuserCss = 'productcodeuser-' + randomCur;
                var producttypeCss = 'producttype-' + randomCur;
                var productnameCss = 'productname-' + randomCur;
                var select2Css = 'select2-' + randomCur;
                var QtyTotalOKCss = 'QtyTotalOK-' + randomCur;
                var qtyCss = 'qty-' + randomCur;
                var invcodeinactualCss = 'invcodeinactual-' + randomCur;
                var invcodeinactualtypeCss = 'invcodeinactualtype-' + randomCur;
                var upoutCss = 'upout-' + randomCur;
                var upoutdescCss = 'upoutdesc-' + randomCur;
                var valoutafterdescCss = 'valoutafterdesc-' + randomCur;
                var flaglotCss = 'flaglot-' + randomCur;
                var flagserialCss = 'flagserial-' + randomCur;
                var remarkCss = 'remark-' + randomCur;
                var SerialNoCss = 'SerialNo-' + randomCur;
                var flagcomboCss = 'flagcombo-' + randomCur;
                var upinvCss = 'upinv-' + randomCur;
            }


            var extData = {
                productcoderootCss: productcoderootCss,
                productcodebaseCss: productcodebaseCss,
                productcodeCss: productcodeCss,
                productcodeuserCss: productcodeuserCss,
                producttypeCss: producttypeCss,
                productnameCss: productnameCss,
                select2Css: select2Css,
                QtyTotalOKCss: QtyTotalOKCss,
                qtyCss: qtyCss,
                invcodeinactualCss: invcodeinactualCss,
                invcodeinactualtypeCss: invcodeinactualtypeCss,
                upoutCss: upoutCss,
                upoutdescCss: upoutdescCss,
                valoutafterdescCss: valoutafterdescCss,
                flaglotCss: flaglotCss,
                flagserialCss: flagserialCss,
                remarkCss: remarkCss,
                SerialNoCss: SerialNoCss,
                flagcomboCss: flagcomboCss,
                upinvCss: upinvCss,
                rd: randomCur,
                idx: 9999,
            };
            debugger
            var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_InvF_InventoryOut'), objInvF_InventoryOutDtl, extData));
            var $tableProduct_InFvCodeOutActual_Cache = $('#table-detailInvCodeOutActual'); @* Cache hàng hóa - vị trí *@
            var flagLot = commonUtils.returnValue(objInvF_InventoryOutDtl.FlagLot);
            var flagSerial = commonUtils.returnValue(objInvF_InventoryOutDtl.FlagSerial);
            var flagCombo = commonUtils.returnValue(objInvF_InventoryOutDtl.FlagCombo);
            if (flagLot === '0' && flagSerial === '0' && flagCombo === '0') {
                var $spanInvCodeOutActualType = $item.find('span.' + invcodeinactualtypeCss);
                if ($spanInvCodeOutActualType !== undefined && $spanInvCodeOutActualType !== null && $spanInvCodeOutActualType.length > 0) {
                    @* Nếu hàng hóa không quản lý LOT và Serail(Hàng hóa thường ???) thì add tùy chọn show popup vị trí nhập *@
                    var extData_InvCodeOutActualType = {
                        idx: 9999,
                    };
                    var $invCodeInActualType = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_InvCodeOutActualUpdate'), objInvF_InventoryOutDtl, extData_InvCodeOutActualType));
                    $invCodeInActualType.appendTo($spanInvCodeOutActualType);
                }

                @* Add cache hàng hóa - vị trí **@

                var extData_Product_InvCodeOutActual_Cache = {
                    idx: 9999,
                };
                var $trProduct_InvCodeOutActual_Cache = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_InvCodeOutActual'), objInvF_InventoryOutDtl, extData_Product_InvCodeOutActual_Cache));
                $trProduct_InvCodeOutActual_Cache.appendTo($tableProduct_InFvCodeOutActual_Cache);
            }
            else {
                var $inputQty = $item.find('input.' + qtyCss);
                if ($inputQty !== undefined && $inputQty !== null && $inputQty.length > 0) {
                    if (!$inputQty.hasClass('disabled-fix')) {
                        $inputQty.addClass('disabled-fix');
                    }
                }

                var $spanProductType = $item.find('span.' + producttypeCss);
                if ($spanProductType !== null && $spanProductType !== undefined && $spanProductType.length > 0) {
                    @* Nếu hàng hóa quản lý LOT hoặc Serail thì add tùy chọn show popup LOT hoặc Serail tương ứng *@
                    var extData_ProductType = {};
                    if (flagLot === '1') {
                        var $productTypeLOT = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagLotUpdate'), objInvF_InventoryOutDtl, extData_ProductType));
                        $productTypeLOT.appendTo($spanProductType);
                    }
                    else if (flagSerial === '1') {
                        var $productTypeSerial = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagSerial'), objInvF_InventoryOutDtl, extData_ProductType));
                        $productTypeSerial.appendTo($spanProductType);
                    }
                    else if (flagCombo === '1') {


                        var $productTypeCombo = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagCombo'), objInvF_InventoryOutDtl, extData_ProductType));
                        $productTypeCombo.appendTo($spanProductType);
                        $inputQty.removeClass('disabled-fix');
                    }
                }
            }
            debugger
            if (List_ProductBase !== null && List_ProductBase !== undefined && List_ProductBase.length > 0) {
                for (var i = 0; i < List_ProductBase.length; i++) {
                    var productCodeCur = commonUtils.returnValue(List_ProductBase[i].LstProductAutoSearchBase.ProductCode);

                    var productCodeBaseCur = commonUtils.returnValue(List_ProductBase[i].LstProductAutoSearchBase.ProductCodeBase);
                    var flagLotCur = commonUtils.returnValue(List_ProductBase[i].LstProductAutoSearchBase.FlagLot);
                    var flagSerialCur = commonUtils.returnValue(List_ProductBase[i].LstProductAutoSearchBase.FlagSerial);

                    if (productCodeBaseCur === productCodeBase) {
                    @* Add danh sách hàng hóa cache *@
                        var $divProducts = $item.find('div.products-list');
                        if ($divProducts !== null && $divProducts != undefined && $divProducts.length > 0) {

                            var $product = $(commonUtils.getHtmlFromTemplate($('#tmpl_products_list'), List_ProductBase[i].LstProductAutoSearchBase));
                            $product.appendTo($divProducts);
                        }

                        if (flagLotCur === '0' && flagSerialCur === '0') {
                            var $trProductInvCodeOutActualCache = $tableProduct_InFvCodeOutActual_Cache.find('tr[productcode="' + productCode + '"]');
                            if ($trProductInvCodeOutActualCache !== null && $trProductInvCodeOutActualCache !== undefined && $trProductInvCodeOutActualCache.length > 0) {
                                var $divList_Product_InvCodeOutActual_Cache = $trProductInvCodeOutActualCache.find('div.products-list-cache');
                                if ($divList_Product_InvCodeOutActual_Cache !== undefined && $divList_Product_InvCodeOutActual_Cache !== null && $divList_Product_InvCodeOutActual_Cache.length > 0) {
                                    var extData_Product_InvCodeOutActual = {
                                        idx: 9999,
                                    };

                                    var $divProduct_InvCodeOutActual = $(commonUtils.getHtmlFromTemplate($('#tmpl_product_invcodeinactual_list_cache'), List_ProductBase[i].LstProductAutoSearchBase, extData_Product_InvCodeOutActual));
                                    $divProduct_InvCodeOutActual.appendTo($divList_Product_InvCodeOutActual_Cache);
                                }
                            }
                        }
                        debugger
                    @* Add đơn vị hàng hoá *@


                        var $select = $item.find('select.select2');
                        if ($select !== null && $select !== undefined) {
                            var $optgroup = $select.find('optgroup');
                            if ($optgroup !== null && $optgroup !== undefined) {
                                var selected = '';
                                if (productCode === productCodeCur) {
                                    selected = 'selected="selected"';
                                }


                                var extData_Options = {
                                    selected: selected,
                                };
                                var $option = $(commonUtils.getHtmlFromTemplate($('#tmpl_options'), List_ProductBase[i].LstProductAutoSearchBase, extData_Options));
                                $option.appendTo($optgroup);
                            }

                            var $tdSelect2 = $select.parent();
                            if ($tdSelect2 !== undefined && $tdSelect2 !== null && $tdSelect2.length > 0) {
                                if (!$tdSelect2.hasClass('disabled-fix')) {
                                    $tdSelect2.addClass('disabled-fix');
                                }
                            }
                        }
                    }

                }
            }
            $item.appendTo($('#table-tbodyID'));
            //commonUtils.updateTableTrNotShowIdx($('#table-tbodyID tr.trdata'), true);
            //commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeOutActual tr.trdata'), true);


            //format number

            var tableName = 'InvF_InventoryOut';
            var qtyformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'Qty');
            var upoutformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'UPOut');
            var upoutdescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'ValOutDesc');
            var valoutafterdescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'ValOutAfterDesc');
            var totalValOutFormat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'TotalValOut');
            var totalValOutDescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'TotalValOutDesc');
            var totalValOutAfterDescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'TotalValOutAfterDesc');
            var upinvformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'Inv_InventoryBalance ');

            $('.TotalValOut').number(true, totalValOutFormat);
            $('.TotalValOutDesc').number(true, totalValOutDescformat);
            $('.TotalValOutAfterDesc').number(true, totalValOutAfterDescformat);

            $('.' + QtyTotalOKCss).number(true, qtyformat);
            $('.' + qtyCss).number(true, qtyformat);
            $('.' + upoutCss).number(true, upoutformat);
            $('.' + upoutdescCss).number(true, upoutdescformat);
            $('.' + valoutafterdescCss).number(true, valoutafterdescformat);
            $('.' + upinvCss).number(true, upinvformat);

            $('.' + select2Css).select2({
                minimumResultsForSearch: -1
            });
        }
    }
</script>



<script>
    function renderInvF_InventoryOutDtl_Multi1(data) {
        //debugger;
        var date = new Date();
        var randomCur = date.getTime();
        var randHex = commonUtils.randHex(12);
        randomCur = randomCur + randHex;


        var objInvF_InventoryOutDtl = data.InvF_InventoryOutDtl;
        var List_ProductBase = data.Lst_InvF_InventoryOutBase;

        if (objInvF_InventoryOutDtl !== undefined && objInvF_InventoryOutDtl !== null) {
            var productCode = commonUtils.returnValue(objInvF_InventoryOutDtl.ProductCode);
            var productCodeBase = commonUtils.returnValue(objInvF_InventoryOutDtl.ProductCodeBase);
            if (!commonUtils.isNullOrEmpty(productCode)) {
                var productcoderootCss = 'productcoderoot-' + randomCur;
                var productcodebaseCss = 'productcodebase-' + randomCur;
                var productcodeCss = 'productcode-' + randomCur;
                var productcodeuserCss = 'productcodeuser-' + randomCur;
                var producttypeCss = 'producttype-' + randomCur;
                var productnameCss = 'productname-' + randomCur;
                var select2Css = 'select2-' + randomCur;
                var QtyTotalOKCss = 'QtyTotalOK-' + randomCur;
                var qtyCss = 'qty-' + randomCur;
                var invcodeinactualCss = 'invcodeinactual-' + randomCur;
                var invcodeinactualtypeCss = 'invcodeinactualtype-' + randomCur;
                var upoutCss = 'upout-' + randomCur;
                var upoutdescCss = 'upoutdesc-' + randomCur;
                var valoutafterdescCss = 'valoutafterdesc-' + randomCur;
                var flaglotCss = 'flaglot-' + randomCur;
                var flagserialCss = 'flagserial-' + randomCur;
                var remarkCss = 'remark-' + randomCur;
                var SerialNoCss = 'SerialNo-' + randomCur;
                var flagcomboCss = 'flagcombo-' + randomCur;
                var valconvertCss = 'valconvert-' + randomCur;
                var upinvCss = 'upinv-' + randomCur;
            }


            var extData = {
                productcoderootCss: productcoderootCss,
                productcodebaseCss: productcodebaseCss,
                productcodeCss: productcodeCss,
                productcodeuserCss: productcodeuserCss,
                producttypeCss: producttypeCss,
                productnameCss: productnameCss,
                select2Css: select2Css,
                QtyTotalOKCss: QtyTotalOKCss,
                qtyCss: qtyCss,
                invcodeinactualCss: invcodeinactualCss,
                invcodeinactualtypeCss: invcodeinactualtypeCss,
                upoutCss: upoutCss,
                upoutdescCss: upoutdescCss,
                valoutafterdescCss: valoutafterdescCss,
                flaglotCss: flaglotCss,
                flagserialCss: flagserialCss,
                flagcomboCss: flagcomboCss,
                remarkCss: remarkCss,
                SerialNoCss: SerialNoCss,
                valconvertCss: valconvertCss,
                upinvCss: upinvCss,
                rd: randomCur,
                idx: 9999,
            };
            debugger
            var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_InvF_InventoryOut'), objInvF_InventoryOutDtl, extData));
            var $tableProduct_InFvCodeOutActual_Cache = $('#table-detailInvCodeOutActual'); @* Cache hàng hóa - vị trí *@
            var flagLot = commonUtils.returnValue(objInvF_InventoryOutDtl.FlagLot);
            var flagSerial = commonUtils.returnValue(objInvF_InventoryOutDtl.FlagSerial);
            var flagCombo = commonUtils.returnValue(objInvF_InventoryOutDtl.FlagCombo);
            if (flagLot === '0' && flagSerial === '0' && flagCombo === '0') {
                var $spanInvCodeOutActualType = $item.find('span.' + invcodeinactualtypeCss);
                if ($spanInvCodeOutActualType !== undefined && $spanInvCodeOutActualType !== null && $spanInvCodeOutActualType.length > 0) {
                    @* Nếu hàng hóa không quản lý LOT và Serail(Hàng hóa thường ???) thì add tùy chọn show popup vị trí nhập *@
                    var extData_InvCodeOutActualType = {
                        idx: 9999,
                    };
                    var $invCodeInActualType = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_InvCodeOutActual'), objInvF_InventoryOutDtl, extData_InvCodeOutActualType));
                    $invCodeInActualType.appendTo($spanInvCodeOutActualType);
                }

                @* Add cache hàng hóa - vị trí **@

                var extData_Product_InvCodeOutActual_Cache = {
                    idx: 9999,
                };
                var $trProduct_InvCodeOutActual_Cache = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_InvCodeOutActual'), objInvF_InventoryOutDtl, extData_Product_InvCodeOutActual_Cache));
                $trProduct_InvCodeOutActual_Cache.appendTo($tableProduct_InFvCodeOutActual_Cache);
            }
            else {
                var $inputQty = $item.find('input.' + qtyCss);
                if ($inputQty !== undefined && $inputQty !== null && $inputQty.length > 0) {
                    if (!$inputQty.hasClass('disabled-fix')) {
                        $inputQty.addClass('disabled-fix');
                    }
                }

                var $spanProductType = $item.find('span.' + producttypeCss);
                if ($spanProductType !== null && $spanProductType !== undefined && $spanProductType.length > 0) {
                    @* Nếu hàng hóa quản lý LOT hoặc Serail thì add tùy chọn show popup LOT hoặc Serail tương ứng *@
                    var extData_ProductType = {};
                    if (flagLot === '1') {
                        var $productTypeLOT = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagLot'), objInvF_InventoryOutDtl, extData_ProductType));
                        $productTypeLOT.appendTo($spanProductType);
                    }
                    else if (flagSerial === '1') {
                        var $productTypeSerial = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagSerial'), objInvF_InventoryOutDtl, extData_ProductType));
                        $productTypeSerial.appendTo($spanProductType);
                    }
                    else if (flagCombo === '1') {
                        var $productTypeCombo = $(commonUtils.getHtmlFromTemplate($('#tmpl_ShowPopup_Product_FlagCombo'), objInvF_InventoryOutDtl, extData_ProductType));
                        $productTypeCombo.appendTo($spanProductType);
                        $inputQty.removeClass('disabled-fix');
                    }
                }
            }
            debugger
            if (List_ProductBase !== null && List_ProductBase !== undefined && List_ProductBase.length > 0) {
                for (var i = 0; i < List_ProductBase.length; i++) {
                    var productCodeCur = commonUtils.returnValue(List_ProductBase[i].LstProductAutoSearchBase.ProductCode);

                    var productCodeBaseCur = commonUtils.returnValue(List_ProductBase[i].LstProductAutoSearchBase.ProductCodeBase);
                    var flagLotCur = commonUtils.returnValue(List_ProductBase[i].LstProductAutoSearchBase.FlagLot);
                    var flagSerialCur = commonUtils.returnValue(List_ProductBase[i].LstProductAutoSearchBase.FlagSerial);

                    if (productCodeBaseCur === productCodeBase) {
                    @* Add danh sách hàng hóa cache *@
                        var $divProducts = $item.find('div.products-list');
                        if ($divProducts !== null && $divProducts != undefined && $divProducts.length > 0) {

                            var $product = $(commonUtils.getHtmlFromTemplate($('#tmpl_products_list'), List_ProductBase[i].LstProductAutoSearchBase));
                            $product.appendTo($divProducts);
                        }

                        if (flagLotCur === '0' && flagSerialCur === '0') {
                            var $trProductInvCodeOutActualCache = $tableProduct_InFvCodeOutActual_Cache.find('tr[productcode="' + productCode + '"]');
                            if ($trProductInvCodeOutActualCache !== null && $trProductInvCodeOutActualCache !== undefined && $trProductInvCodeOutActualCache.length > 0) {
                                var $divList_Product_InvCodeOutActual_Cache = $trProductInvCodeOutActualCache.find('div.products-list-cache');
                                if ($divList_Product_InvCodeOutActual_Cache !== undefined && $divList_Product_InvCodeOutActual_Cache !== null && $divList_Product_InvCodeOutActual_Cache.length > 0) {
                                    var extData_Product_InvCodeOutActual = {
                                        idx: 9999,
                                    };

                                    var $divProduct_InvCodeOutActual = $(commonUtils.getHtmlFromTemplate($('#tmpl_product_invcodeinactual_list_cache'), List_ProductBase[i].LstProductAutoSearchBase, extData_Product_InvCodeOutActual));
                                    $divProduct_InvCodeOutActual.appendTo($divList_Product_InvCodeOutActual_Cache);
                                }
                            }
                        }
                        debugger
                    @* Add đơn vị hàng hoá *@


                        var $select = $item.find('select.select2');
                        if ($select !== null && $select !== undefined) {
                            var $optgroup = $select.find('optgroup');
                            if ($optgroup !== null && $optgroup !== undefined) {
                                var selected = '';
                                if (productCode === productCodeCur) {
                                    selected = 'selected="selected"';
                                }


                                var extData_Options = {
                                    selected: selected,
                                };
                                var $option = $(commonUtils.getHtmlFromTemplate($('#tmpl_options'), List_ProductBase[i].LstProductAutoSearchBase, extData_Options));
                                $option.appendTo($optgroup);
                            }
                        }

                        var $tdSelect2 = $select.parent();
                        if ($tdSelect2 !== undefined && $tdSelect2 !== null && $tdSelect2.length > 0) {
                            if (!$tdSelect2.hasClass('disabled-fix')) {
                                $tdSelect2.addClass('disabled-fix');
                            }
                        }
                    }

                }
            }
            $item.appendTo($('#table-tbodyID'));
            //commonUtils.updateTableTrNotShowIdx($('#table-tbodyID tr.trdata'), true);
            //commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeOutActual tr.trdata'), true);


            //format number

            var tableName = 'InvF_InventoryOut';
            var qtyformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'Qty');
            var upoutformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'UPOut');
            var upoutdescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'UPOutDesc');
            var valoutafterdescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'ValOutAfterDesc');
            var totalValOutFormat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'TotalValOut');
            var totalValOutDescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'TotalValOutDesc');
            var totalValOutAfterDescformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'TotalValOutAfterDesc');
            var upinvformat = objMst_ColumnConfig.returnValueColumnFormat_V2(tableName, 'Inv_InventoryBalance ');

            $('.TotalValOut').number(true, totalValOutFormat);
            $('.TotalValOutDesc').number(true, totalValOutDescformat);
            $('.TotalValOutAfterDesc').number(true, totalValOutAfterDescformat);

            $('.' + QtyTotalOKCss).number(true, qtyformat);
            $('.' + qtyCss).number(true, qtyformat);
            $('.' + upoutCss).number(true, upoutformat);
            $('.' + upoutdescCss).number(true, upoutdescformat);
            $('.' + valoutafterdescCss).number(true, valoutafterdescformat);
            $('.' + upinvCss).number(true, upinvformat);

            $('.' + select2Css).select2({
                minimumResultsForSearch: -1
            });
        }
    }
</script>

<script>
    function renderProductInvFInventoryOutDtl(data) {
        debugger
        var objInvF_InventoryOutDtl = data.Product_InvF_InventoryOutHHDtl;
        var productCode = commonUtils.returnValue(objInvF_InventoryOutDtl.ProductCode);
        var productCodeRoot = commonUtils.returnValue(objInvF_InventoryOutDtl.ProductCodeRoot);
        if (!commonUtils.isNullOrEmpty(productCode)) {
            debugger
            @* Xóa hàng hóa - vị trí đã lưu cache *@



            var $tableProduct_InvCodeInActual_Cache = $('#table-detailInvCodeOutActual');

            var $trInvCodeInActual1 = $tableProduct_InvCodeInActual_Cache.find('tr[productcoderoot="' + productCodeRoot + '"]');

            if ($trInvCodeInActual1 == null || $trInvCodeInActual1 == undefined || $trInvCodeInActual1.length == 0) {
                var $tableProduct_InFvCodeOutActual_Cache = $('#table-detailInvCodeOutActual'); @* Cache hàng hóa - vị trí *@
                    var extData_Product_InvCodeOutActual_Cache = {
                    idx: 9999,
                };

                var $trProduct_InvCodeOutActual_Cache = $(commonUtils.getHtmlFromTemplate($('#tmpl_Product_InvCodeOutActual'), objInvF_InventoryOutDtl, extData_Product_InvCodeOutActual_Cache));
                $trProduct_InvCodeOutActual_Cache.appendTo($tableProduct_InFvCodeOutActual_Cache);

            }


            @*var $tableProduct_InvCodeInActual_Cache = $('#table-detailInvCodeOutActual'); @* Cache hàng hóa - vị trí *@


                debugger
            var $trInvCodeInActual = $tableProduct_InvCodeInActual_Cache.find('tr[productcoderoot="' + productCodeRoot + '"]');
                var $divList_Product_InvCodeInActual_Cache = $trInvCodeInActual.find('div.products-list-cache');
                if ($divList_Product_InvCodeInActual_Cache !== undefined && $divList_Product_InvCodeInActual_Cache !== null && $divList_Product_InvCodeInActual_Cache.length > 0) {
                    var extData = {
                        idx: 9999,
                    };
                    var $divProduct_InvCodeInActual = $(commonUtils.getHtmlFromTemplate($('#tmpl_product_invcodeinactual_list_cache'), objInvF_InventoryOutDtl, extData));
                    $divProduct_InvCodeInActual.appendTo($divList_Product_InvCodeInActual_Cache);
                }
            //}


        }
    }
</script>


<script type="text/javascript">
    function showPopupInvCodeInActualUpdate(thiz, ProductCode, ProductCodeUser, ProductName, ProductCodeBase, ValConvert) {
        debugger



            var $tr = $('tbody#table-tbodyID tr[productcode = "' + ProductCode + '"]');
        var rd = $tr.attr('rd');
        var viewType = '@CUtils.StrValue(viewType)';
            //tim kho xuat
            var valmstInventory = "";
            if ($('select.mstinventory').length > 0) {
                var selectKho = $('select.mstinventory').eq(0);
                var optionSelect = $(selectKho).find('option:selected');

                valmstInventory = optionSelect.attr("invBUPattern");

            }

            var qTy = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.qty-' + rd).val()));
            var IF_InvOutNo = commonUtils.returnValue($('#IF_InvOutNo').val());
            var url = '@Url.Action("GetTonKho", "InvF_InventoryOut")';
            var onlyView = "";
            $.ajax({
                url: url,
                data: {
                    productCode: ProductCode,
                    invBUPattern: valmstInventory,
                    productCodeBase: ProductCodeBase,
                    ValConvert: ValConvert,
                    IF_InvOutNo: IF_InvOutNo,
                    onlyView: onlyView,
                    ProductCodeUser: ProductCodeUser,
                    ProductName: ProductName,
                    ViewType: viewType
                },
                type: 'post',
                dataType: 'json',
                traditional: true,
                success: function (data) {
                    debugger
                    if (data.Success) {
                        $('#ShowPopupTonKho').modal({
                            backdrop: false,
                            keyboard: true,
                        });
                        $("#ShowPopupTonKho").html(data.Html); // truyen html vao #form
                        var display = $("#ShowPopupTonKho").css('display');
                        if (display == "none") {
                            $("#ShowPopupTonKho").show();
                        }
                        debugger

                        ShowTonKhoCacheUpdate(ProductCode);
                    } else {
                        showErrorDialog(data.Detail);
                    }
                }
            });
        //}
    }
</script>


<script>
    function ShowTonKhoCacheUpdate(ProductCode) {
        debugger


        var $trimport = $('#table-detailProductImport').find('tr[productcode="' + ProductCode + '"]').length;
        if ($trimport > 0) {
            $('#table-tbodyIDTonKho tr.trdata').each(function () {
                debugger
                var tr = $(this);
                var idx = tr.attr("idx");
                var InvCode = tr.find('input[name="DtlTonKho[' + idx + '].InvCode"]').val();
                var trComboDt = $('#table-detailProductImport tr.trdata[invcodeinactual="' + InvCode + '"][productcode="' + ProductCode + '"]');
                var idCombo = trComboDt.attr("idx");
                var qty = 0;
                if (trComboDt.length > 0) {
                    qty = trComboDt.find('input.Qty').val();
                }

                // Gán lại lên danh sách
                tr.find('input[name="DtlTonKho[' + idx + '].QtyOut"]').val(qty);

            });


        }
        else {
            var $trcachse = $('#table-PopupHHTonKhoPB').find('tr[productcode="' + ProductCode + '"]');

            if ($trcachse.length > 0) {
                var st = 0;
                var strHtml = "";
                $trcachse.each(function () {
                    debugger
                    var tr = $(this);
                    var rd1 = $(tr).attr('idx');
                    var ProductCode = $(tr).attr('productcode');
                    var $trdata = $('tbody#table-PopupHHTonKhoPB').find('tr.trdata[idx = "' + rd1 + '"]');
                    var InvCode = commonUtils.returnValue($trdata.find('input[name="DtlTonKho[' + rd1 + '].InvCode"]').val());
                    var QtyTotalOK = commonUtils.returnValue($trdata.find('input[name="DtlTonKho[' + rd1 + '].QtyTotalOK"]').val());
                    var QtyOut = commonUtils.returnValue($trdata.find('input[name="DtlTonKho[' + rd1 + '].QtyOut"]').val());


                    strHtml = getHtmlFromTemplate($('#rowtemplateTonKhoPhanBoUpdate'), {
                        ProductCode: ProductCode,
                        InvCode: InvCode,
                        QtyTotalOK: QtyTotalOK,
                        QtyOut: QtyOut,
                        idx: 999999
                    });
                    if (st == 0) {
                        $('#table-tbodyIDTonKho').html(strHtml);
                    }
                    else {
                        $('#table-tbodyIDTonKho').append(strHtml);
                    }
                    st++;
                    updateTableTrIdx($('#table-tbodyIDTonKho tr'), false);
                });

            }
        }

    }
</script>


<script type="text/javascript">
    function showPopupLotUpdate(thiz, ProductCode, ProductCodeUser, ProductName, ProductCodeBase, ValConvert) {
        debugger
        var $tr = $('tbody#table-tbodyID tr[productcode = "' + ProductCode + '"]');
        var rd = $tr.attr('rd');
        var viewtype = '@CUtils.StrValue(viewType)';
        var token = $('#manageForm input[name=__RequestVerificationToken]').val();
        //tim kho xuat
        var valmstInventory = "";
        if ($('select.mstinventory').length > 0) {
            var selectKho = $('select.mstinventory').eq(0);
            var optionSelect = $(selectKho).find('option:selected');

            valmstInventory = optionSelect.attr("invBUPattern");

        }

        var qTy = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.qty-' + rd).val()));
        var IF_InvOutNo = commonUtils.returnValue($('#IF_InvOutNo').val());


        debugger
        var $trcachse = $('#table-detailLot').find('tr[productcode="' + ProductCode + '"]');
        var listLot = [];
        if ($trcachse.length > 0) {
            $trcachse.each(function () {
                debugger
                var tr = $(this);
                var idx = $(tr).attr('idx');
                var trdata = $('#table-detailLot').find('tr.trdata[idx = "' + idx + '"]');


                var obj = {
                    ProductCode: trdata.find('input.ProductCode').val(),
                    ProductLotNo: trdata.find('input.ProductLotNo').val(),
                    Qty: trdata.find('input.Qty').val(),
                    InvCodeOutActual: trdata.find('input.InvCodeInActual').val(),
                }
                listLot.push(obj);


            });
        }
        var objListLot = commonUtils.returnJSONValue(listLot);
          var url = '@Url.Action("ShowLoDetail", "InvF_InventoryOut")';
        var onlyView = "";
        $.ajax({
            url: url,
            data: {
                IF_InvOutNo: IF_InvOutNo,
                ProductCode: ProductCode,
                invBUPattern: valmstInventory,
                viewonly: onlyView,
                ProductCodeBase: ProductCodeBase,
                valconvert: ValConvert,
                listLot: objListLot,
                ViewType: viewtype,
                __RequestVerificationToken: token
            },
            type: 'post',
            dataType: 'json',
            traditional: true,
            success: function (data) {
                if (data.Success) {
                    $('#ShowPopupLo').modal({
                        backdrop: false,
                        keyboard: true
                    });
                    $("#ShowPopupLo").html(data.Html); // truyen html vao #form
                    var display = $("#ShowPopupLo").css('display');
                    if (display === "none") {
                        $("#ShowPopupLo").show();
                    }
                } else {
                    showErrorDialog(data.Detail);
                }
            }
        });
    }
</script>


@*Popup combo*@

<script type="text/javascript">
    function ShowCombo(thiz, ProductCode, ProductCodeUser, ProductName, ProductCodeBase) {
        debugger
        var qtyCombo = 0;

        var IF_InvOutNo = $('#IF_InvOutNo').val();
        var $tr = $('tbody#table-tbodyID tr[productcode = "' + ProductCode + '"]');
        var rd = $tr.attr('rd');
        var strQtyCombo = $tr.find('input.qty-' + rd).val();
        qtyCombo = parseFloat(strQtyCombo);
        //tim kho xuat
        var valmstInventory = "";
        if ($('select.mstinventory').length > 0) {
            var selectKho = $('select.mstinventory').eq(0);
            var optionSelect = $(selectKho).find('option:selected');

            valmstInventory = optionSelect.attr("invBUPattern");

        }


        @if (status.Equals("APPROVE")) {

            <text>
        var url = '@Url.Action("ComboAppr", "InvF_InventoryOut")';
        var token = $('#manageForm input[name=__RequestVerificationToken]').val();
        $.ajax({
            url: url,
            data: {
                productCode: ProductCode,
                //productCodeBase: ProductCodeBase,
                productCodeUser: ProductCodeUser,
                productName: ProductName,
                IF_InvOutNo: IF_InvOutNo,
                __RequestVerificationToken: token,
            },
            type: 'post',
            dataType: 'json',
            traditional: true,
            success: function (data) {
                if (data.Success) {

                    $('#ShowPopupCombo').modal({
                        backdrop: false,
                        keyboard: true
                    });
                    $("#ShowPopupCombo").html(data.Html); // truyen html vao #form
                    var display = $("#ShowPopupCombo").css('display');
                    if (display === "none") {
                        $("#ShowPopupCombo").show();
                    }
                } else {
                    showErrorDialog(data.Detail);
                }
            }
        });
        </text>

            }
            else {
            <text>
                var url = '@Url.Action("Combo", "ModalCommon")';

                var token = $('#manageForm input[name=__RequestVerificationToken]').val();
        $.ajax({
                    url: url,
            data: {
                        productCode: ProductCode,
                productCodeBase: ProductCodeBase,
                productCodeUser: ProductCodeUser,
                productName: ProductName,
                qtyCombo: qtyCombo,
                invBUPattern: valmstInventory,
                __RequestVerificationToken: token
            },
            type: 'post',
            dataType: 'json',
            traditional: true,
            success: function(data) {
                        if (data.Success) {

                    $('#ShowPopupCombo').modal({
                                backdrop: false,
                        keyboard: true,
                    });
                    $("#ShowPopupCombo").html(data.Html); // truyen html vao #form
                            var display = $("#ShowPopupCombo").css('display');
                            if (display == "none") {
                        $("#ShowPopupCombo").show();
                            }
                        } else {
                            showErrorDialog(data.Detail);
                        }
                    }
        });
        </text>
            }
        }
</script>



@*Xử lý import file*@
<script type="text/javascript">
    var objCommonExcel = new CommonExcel();
    var objVariablesInit = {
        Id_FormMain: '',
        Id_FormImportExcel: 'manageFormImportExcel',
        Id_Modal: 'ImportExcelModal',
        Id_FileInput: 'file',
    };

    var ajaxSettings_Excel = {};
    ajaxSettings_Excel.Type = 'post';
    ajaxSettings_Excel.DataType = 'json';

    function ImportProducts() {
        debugger
        //alert("import");
        $('#key').val("PRODUCT");
        $('#file').val('');
        ShowPopupImportExcel();
    }


    function ImportLot() {
        $('#key').val("LOT");
        $('#file').val('');
        ShowPopupImportExcel();
    }


    function ImportSerial() {
        $('#key').val("SERIAL");
        $('#file').val('');
        ShowPopupImportExcel();
    }

    function ImportQR() {
        $('#key').val("QR");
        $('#file').val('');
        ShowPopupImportExcel();
    }

    function ShowPopupImportExcel() {
        debugger
        $('#ImportExcelModal').modal('show')
    }


    function CloseModalImportExcel() {
        $('#ImportExcelModal').modal('hide')
        $('#ImportExcelModal').on('hidden.bs.modal', function () {
            $(this).find('#manageFormImportExcel').trigger('reset');
        });
    }


    function Import() {
        var file = $("#file").val();
        if (file.length === 0) {
            alert("Nhập file cần Import");
            $("#file").val('');
            return false;
        } else {
            debugger
            var checkFile = false;
            var _index = file.lastIndexOf('.');
            if (_index !== undefined && _index !== null && _index > 0) {
                var fileType = file.substring(_index + 1, file.length).toLowerCase();
                if (fileType === 'xls' || fileType.toLowerCase() === 'xlsx') {
                    checkFile = true;
                }
            }
            if (checkFile) {
                debugger
                var key = $("#key").val();
                if (key.toString().toUpperCase().trim() == "PRODUCT") {
                    ImportFileExcelProduct();
                }
                else if (key.toString().toUpperCase().trim() == "LOT") {
                    ImportFileExcelLot();
                }
                else if (key.toString().toUpperCase().trim() == "SERIAL") {
                    debugger
                    ImportFileExcelSerial();
                }
                else if (key.toString().toUpperCase().trim() == "QR") {
                    ImportFileExcelQR();
                }
            }
            else {
                alert("File Excel Import không hợp lệ!");
            }
        }
    }


    function ImportFileExcelProduct() {
        debugger
        var formData = new window.FormData($('#manageFormImportExcel')[0]);
        var incodeOut = commonUtils.returnValue('#InvCodeOut');
        if (commonUtils.isNullOrEmpty(incodeOut)) {
            var listToastr = [];
            objToastr = { ToastrType: 'error', ToastrMessage: '@MvcHtmlString.Create("Chưa chọn kho xuất".HtmlItemString("ordorderdl"))' };
            listToastr.push(objToastr);
            commonUtils.showToastr(listToastr);

            commonUtils.setFocus('InvCodeOut');
            return false;
        }
        else {
            var invBUPattern = '';
            var $option = $('#InvCodeOut').find(":selected");
            if ($option !== undefined && $option !== null && $option.length > 0) {
                invBUPattern = $option.attr('InvBUPattern');
            }


            formData.append('tax_file', $('input[type=file]')[0].files[0]);
            formData.append('invBUPattern', invBUPattern);

            $('#ImportExcelModal').modal("hide");
            var url = '@(Url.Action("ImportProduct", "InvF_InventoryOut"))';
            $.ajax({
                url: url,
                data: formData,
                type: 'post',
                beforeSend: function () { },
                success: function (objResult) {
                    debugger
                    if (objResult.Success) {
                        debugger
                        var listData = objResult.listDtlImport;
                        var listProductBase = objResult.list_MstProductUI;


                        if (listProductBase !== undefined && listProductBase !== null && listProductBase.length > 0) {
                            var listInventoryDtlAutoSearch = [];
                            var List_PrdBase = [];
                            for (var i = 0; i < listProductBase.length; i++) {
                                debugger
                                objProductAutoSearch = {};
                                listProductAutoSearch = [];
                                objProductAutoSearch.ProductCodeRoot = listProductBase[i].ProductCodeRoot;
                                objProductAutoSearch.ProductCodeBase = listProductBase[i].ProductCodeBase;
                                objProductAutoSearch.ProductCode = listProductBase[i].ProductCode;
                                objProductAutoSearch.ProductCodeUser = listProductBase[i].ProductCodeUser;
                                objProductAutoSearch.ProductName = listProductBase[i].ProductName;
                                objProductAutoSearch.FlagSerial = listProductBase[i].FlagSerial;
                                objProductAutoSearch.FlagLot = listProductBase[i].FlagLot;
                                objProductAutoSearch.FlagCombo = listProductBase[i].FlagCombo;
                                objProductAutoSearch.UnitCode = listProductBase[i].UnitCode;
                                objProductAutoSearch.InvCodeInActual = listProductBase[i].InvCodeInActual;
                                objProductAutoSearch.Qty = listProductBase[i].Qty;
                                objProductAutoSearch.QtyTotalOK = listProductBase[i].QtyTotalOK;
                                objProductAutoSearch.UPOUT = listProductBase[i].UPOut;
                                objProductAutoSearch.UPOUTDesc = listProductBase[i].UPOutDesc;
                                objProductAutoSearch.ValOUTAfterDesc = listProductBase[i].ValOutAfterDesc;
                                objProductAutoSearch.Remark = listProductBase[i].Remark;
                                objProductAutoSearch.ValConvert = listProductBase[i].ValConvert;
                                listProductAutoSearch.push(objProductAutoSearch);

                                debugger
                                var productCodeBaseCur = listProductBase[i].ProductCodeBase;
                                var listProductBaseUI = listProductBase[i].lstUnitCodeUIByProduct.filter(function (m) {
                                    return m.ProductCodeBase === productCodeBaseCur;

                                });
                                for (var j = 0; j < listProductBaseUI.length; j++) {
                                    var listProductAutoSearchBase = [];
                                    var objProductAutoSearchBase = {};
                                    objProductAutoSearchBase.ProductCodeRoot = listProductBaseUI[j].ProductCodeRoot;
                                    objProductAutoSearchBase.ProductCodeBase = listProductBaseUI[j].ProductCodeBase;
                                    objProductAutoSearchBase.ProductCode = listProductBaseUI[j].ProductCode;
                                    objProductAutoSearchBase.ProductCodeUser = listProductBaseUI[j].ProductCodeUser;
                                    objProductAutoSearchBase.ProductName = listProductBaseUI[j].ProductName;
                                    objProductAutoSearchBase.FlagSerial = listProductBaseUI[j].FlagLot;
                                    objProductAutoSearchBase.FlagLot = listProductBaseUI[j].FlagSerial;
                                    objProductAutoSearchBase.FlagCombo = listProductBaseUI[j].FlagCombo;
                                    objProductAutoSearchBase.UnitCode = listProductBaseUI[j].UnitCode;
                                    objProductAutoSearchBase.InvCodeInActual = listProductBaseUI[j].InvCodeInActual;
                                    objProductAutoSearchBase.Qty = listProductBaseUI[j].Qty;
                                    objProductAutoSearchBase.QtyTotalOK = listProductBaseUI[j].QtyTotalOK;
                                    objProductAutoSearchBase.SellPrice = listProductBaseUI[j].UPOut;
                                    objProductAutoSearchBase.DiscountPrice = listProductBaseUI[j].UPOutDesc;
                                    objProductAutoSearchBase.ValOUTAfterDesc = listProductBaseUI[j].Qty * (listProductBaseUI[j].UPOut - listProductBaseUI[j].UPOutDesc) ;
                                    objProductAutoSearchBase.Remark = listProductBaseUI[j].Remark;
                                    objProductAutoSearchBase.ValConvert = listProductBaseUI[j].ValConvert;
                                    listProductAutoSearchBase.push(objProductAutoSearchBase);
                                    var objProductBase = {
                                        LstProductAutoSearchBase: objProductAutoSearchBase
                                    };
                                    List_PrdBase.push(objProductBase);

                                }

                                var objProduct = {
                                    InvF_InventoryOutDtl: objProductAutoSearch,
                                    Lst_InvF_InventoryOutDtl: listProductAutoSearch,
                                    Lst_InvF_InventoryOutBase: List_PrdBase
                                };
                                listInventoryDtlAutoSearch.push(objProduct);

                            }

                            debugger

                            if (listInventoryDtlAutoSearch != null && listInventoryDtlAutoSearch != undefined && listInventoryDtlAutoSearch.length > 0) {
                                for (var i = 0; i < listInventoryDtlAutoSearch.length; i++) {
                                    renderInvF_InventoryOutDtl_Multi1(listInventoryDtlAutoSearch[i]);

                                }

                                var tongsl = 0.0;
                                tongTienHang();
                            }

                        }

                        debugger
                        var listChild = [];

                        if (listData !== undefined && listData !== null && listData.length > 0) {
                            for (var i = 0; i < listData.length; i++) {
                                var objProductDtlChild = {};
                                var listProductDtlChild = [];


                                objProductDtlChild.ProductCode = listData[i].ProductCode;
                                objProductDtlChild.InvCodeInActual = listData[i].InvCodeOutActual;
                                objProductDtlChild.Qty = listData[i].Qty;
                                objProductDtlChild.QtyTotalOK = '';
                                listProductDtlChild.push(objProductDtlChild);
                                var objSerial = {
                                    Product_InvF_InventoryReturnSupDtlChild: objProductDtlChild,
                                    Lst_Mst_Inventory: listSerialAutoSearch
                                };
                                listChild.push(objSerial);
                            }

                            if (listChild !== null && listChild !== undefined && listChild.length > 0) {
                                for (var j = 0; j < listChild.length; j++) {
                                    debugger
                                    var $tableProduct_InvCodeInActual_Cache = $('#table-detailInvCodeOutActual');
                                    var productCode = listChild[j].Product_InvF_InventoryReturnSupDtlChild.ProductCode;
                                    var rowOlds = $tableProduct_InvCodeInActual_Cache.find('tr[productcode="' + productCode + '"]').length;
                                    if (rowOlds > 0) {
                                        $tableProduct_InvCodeInActual_Cache.find('tr[productcode="' + productCode + '"]').each(function () {
                                            var $tr = $(this);
                                            var $divList_Product_InvCodeInActual = $tr.find('div.products-list-cache');
                                            if ($divList_Product_InvCodeInActual !== undefined && $divList_Product_InvCodeInActual !== null) {

                                                $divList_Product_InvCodeInActual.find('div.result[productcode="' + productCode + '"]').each(function () {
                                                    var $div = $(this);
                                                    $div.remove();

                                                });
                                            }

                                        });
                                    }
                                }
                                for (var i = 0; i < listChild.length; i++) {
                                    debugger
                                    renderProductInventoryReturnSupDtlChild(listChild[i]);
                                }
                                commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeOutActual tr.trdata'), true);


                                for (var i = 0; i < listChild.length; i++) {
                                    renderProductInvFInventoryOutProductImport(listChild[i]);

                                }
                                commonUtils.updateTableTrNotShowIdx($('#table-detailProductImport tr.trdata'), true);
                            }

                        }
                    }
                    else {
                        var listError = [];
                        var message = commonUtils.returnValue(objResult.Messages[0]);
                        if (!commonUtils.isNullOrEmpty(message)) {
                            var objToastr = { ToastrType: 'error', ToastrMessage: message };
                            listError.push(objToastr);
                        }
                        if (listError !== undefined && listError !== null && listError.length > 0) {
                            commonUtils.showToastr(listError);
                        }
                        var detail = commonUtils.returnValue(objResult.Detail);
                        if (!commonUtils.isNullOrEmpty(detail)) {
                            _showErrorMsg123('Lỗi!', detail);
                        }
                    }

                },
                error: function () {
                    //Endloading();
                },
                cache: false,
                contentType: false,
                //dataType: "json",
                processData: false

            });


        }
    }


    function ImportFileExcelLot() {
        debugger
           var formData = new window.FormData($('#manageFormImportExcel')[0]);
        var incodeOut = commonUtils.returnValue('#InvCodeOut');
        if (commonUtils.isNullOrEmpty(incodeOut)) {
            var listToastr = [];
            objToastr = { ToastrType: 'error', ToastrMessage: '@MvcHtmlString.Create("Chưa chọn kho xuất".HtmlItemString("ordorderdl"))' };
            listToastr.push(objToastr);
            commonUtils.showToastr(listToastr);

            commonUtils.setFocus('InvCodeOut');
            return false;
        }
        else {
             var invBUPattern = '';
            var $option = $('#InvCodeOut').find(":selected");
            if ($option !== undefined && $option !== null && $option.length > 0) {
                invBUPattern = $option.attr('InvBUPattern');
            }


            formData.append('tax_file', $('input[type=file]')[0].files[0]);
            formData.append('invBUPattern', invBUPattern);

            $('#ImportExcelModal').modal("hide");
            var url = '@(Url.Action("ImportLot", "InvF_InventoryOut"))';
            $.ajax({
                url: url,
                data: formData,
                type: 'post',
                beforeSend: function () { },

                success: function (objResult) {
                    debugger
                    if (objResult.Success) {
                        debugger
                        var listData = objResult.listDtlImport;
                        var listProductBase = objResult.list_MstProductUI;

                        if (listProductBase !== undefined && listProductBase !== null && listProductBase.length > 0) {
                            var listInventoryDtlAutoSearch = [];
                            var List_PrdBase = [];
                            for (var i = 0; i < listProductBase.length; i++) {
                              var objProductAutoSearch = {};
                              var listProductAutoSearch = [];
                                objProductAutoSearch.ProductCodeRoot = listProductBase[i].ProductCodeRoot;
                                objProductAutoSearch.ProductCodeBase = listProductBase[i].ProductCodeBase;
                                objProductAutoSearch.ProductCode = listProductBase[i].ProductCode;
                                objProductAutoSearch.ProductCodeUser = listProductBase[i].ProductCodeUser;
                                objProductAutoSearch.ProductName = listProductBase[i].ProductName;
                                objProductAutoSearch.FlagSerial = listProductBase[i].FlagSerial;
                                objProductAutoSearch.FlagLot = listProductBase[i].FlagLot;
                                objProductAutoSearch.FlagCombo = listProductBase[i].FlagCombo;
                                objProductAutoSearch.UnitCode = listProductBase[i].UnitCode;
                                objProductAutoSearch.InvCodeInActual = listProductBase[i].InvCodeInActual;
                                objProductAutoSearch.Qty = listProductBase[i].Qty;
                                objProductAutoSearch.QtyTotalOK = listProductBase[i].QtyTotalOK;
                                objProductAutoSearch.UPOUT = listProductBase[i].UPOut;
                                objProductAutoSearch.UPOUTDesc = listProductBase[i].UPOutDesc;
                                objProductAutoSearch.ValOUTAfterDesc = listProductBase[i].ValOutAfterDesc;
                                objProductAutoSearch.Remark = listProductBase[i].Remark;
                                objProductAutoSearch.ValConvert = listProductBase[i].ValConvert;

                                listProductAutoSearch.push(objProductAutoSearch);

                                var productCodeBaseCur = listProductBase[i].ProductCodeBase;
                                var listProductBaseUI = listProductBase[i].lstUnitCodeUIByProduct.filter(function (m) {
                                    return m.ProductCodeBase === productCodeBaseCur;

                                });


                                for (var j = 0; j < listProductBaseUI.length; j++) {
                                    var listProductAutoSearchBase = [];
                                    var objProductAutoSearchBase = {};
                                    objProductAutoSearchBase.ProductCodeRoot = listProductBaseUI[j].ProductCodeRoot;
                                    objProductAutoSearchBase.ProductCodeBase = listProductBaseUI[j].ProductCodeBase;
                                    objProductAutoSearchBase.ProductCode = listProductBaseUI[j].ProductCode;
                                    objProductAutoSearchBase.ProductCodeUser = listProductBaseUI[j].ProductCodeUser;
                                    objProductAutoSearchBase.ProductName = listProductBaseUI[j].ProductName;
                                    objProductAutoSearchBase.FlagSerial = listProductBaseUI[j].FlagLot;
                                    objProductAutoSearchBase.FlagLot = listProductBaseUI[j].FlagSerial;
                                    objProductAutoSearchBase.FlagCombo = listProductBaseUI[j].FlagCombo;
                                    objProductAutoSearchBase.UnitCode = listProductBaseUI[j].UnitCode;
                                    objProductAutoSearchBase.InvCodeInActual = listProductBaseUI[j].InvCodeInActual;
                                    objProductAutoSearchBase.Qty = listProductBaseUI[j].Qty;
                                    objProductAutoSearchBase.QtyTotalOK = listProductBaseUI[j].QtyTotalOK;
                                    objProductAutoSearchBase.SellPrice = listProductBaseUI[j].UPOut;
                                    objProductAutoSearchBase.DiscountPrice = listProductBaseUI[j].UPOutDesc;
                                    objProductAutoSearchBase.ValOUTAfterDesc = listProductBaseUI[j].Qty * (listProductBaseUI[j].UPOut - listProductBaseUI[j].UPOutDesc);
                                    objProductAutoSearchBase.Remark = listProductBaseUI[j].Remark;
                                    objProductAutoSearchBase.ValConvert = listProductBaseUI[j].ValConvert;
                                    listProductAutoSearchBase.push(objProductAutoSearchBase);
                                    var objProductBase = {
                                        LstProductAutoSearchBase: objProductAutoSearchBase
                                    };
                                    List_PrdBase.push(objProductBase);
                                }
                                var objProduct = {
                                    InvF_InventoryOutDtl: objProductAutoSearch,
                                    Lst_InvF_InventoryOutDtl: listProductAutoSearch,
                                    Lst_InvF_InventoryOutBase: List_PrdBase
                                };
                                listInventoryDtlAutoSearch.push(objProduct);

                            }
                            //debugger
                            if (listInventoryDtlAutoSearch != null && listInventoryDtlAutoSearch != undefined && listInventoryDtlAutoSearch.length > 0) {
                                for (var i = 0; i < listInventoryDtlAutoSearch.length; i++) {
                                    renderInvF_InventoryOutDtl_Multi1(listInventoryDtlAutoSearch[i]);

                                }

                                var tongsl = 0.0;
                                tongTienHang();
                            }
                        }

                        debugger
                        var listChild = [];
                        if (listData !== undefined && listData !== null && listData.length > 0) {
                            for (var i = 0; i < listData.length; i++) {
                                var objLotAutoSearch = {};
                                var listLotAutoSearch = [];

                                objLotAutoSearch.InvCodeInActual = listData[i].InvCodeOutActual;
                                objLotAutoSearch.ProductCode = listData[i].ProductCode;
                                objLotAutoSearch.ProductLotNo = listData[i].ProductLotNo;
                                objLotAutoSearch.ProductionDate = '';
                                objLotAutoSearch.ExpiredDate = '';
                                objLotAutoSearch.Qty = listData[i].Qty;
                                objLotAutoSearch.QtyTotalOK = listData[i].QtyTotalOK;
                                listLotAutoSearch.push(objLotAutoSearch);
                                var objSerial = {
                                    Product_InvF_InventoryOutInstLot: objLotAutoSearch,
                                    Lst_Mst_Inventory: listLotAutoSearch
                                };
                                listChild.push(objSerial);


                            }

                            if (listChild !== null && listChild !== undefined && listChild.length > 0) {
                                for (var i = 0; i < listChild.length; i++) {
                                    renderProductInvFInventoryOutInstLot(listChild[i]);
                                }

                                commonUtils.updateTableTrNotShowIdx($('#table-detailLot tr.trdata'), true);
                            }
                        }
                    }
                    else {
                        var listError = [];
                        var message = commonUtils.returnValue(objResult.Messages[0]);
                        if (!commonUtils.isNullOrEmpty(message)) {
                            var objToastr = { ToastrType: 'error', ToastrMessage: message };
                            listError.push(objToastr);
                        }
                        if (listError !== undefined && listError !== null && listError.length > 0) {
                            commonUtils.showToastr(listError);
                        }
                        var detail = commonUtils.returnValue(objResult.Detail);
                        if (!commonUtils.isNullOrEmpty(detail)) {
                            _showErrorMsg123('Lỗi!', detail);
                        }
                    }

                },

                error: function () {
                    //Endloading();
                },
                cache: false,
                contentType: false,
                //dataType: "json",
                processData: false

            });

        }

    }


    function ImportFileExcelQR() {
        debugger
        var formData = new window.FormData($('#manageFormImportExcel')[0]);
        formData.append('tax_file', $('input[type=file]')[0].files[0]);


        if (formData != undefined && formData != null) {
            var rows = $('tbody#table-tbodyID tr.trdata').length;

            if (rows > 0) {
                var listPrd = [];
                $('tbody#table-tbodyID tr.trdata').each(function () {
                    debugger
                    var $tr = $(this);
                    var rd = $tr.attr('rd');
                    //var $divproduct = $tr.find('div.products-list');

                    //var $divProductSelected = $divproduct.find('div[productcode="' + productCode + '"]');
                    var product = {};

                    var productCode = $tr.find('input.productcode-' + rd).val();
                    var productCodeUser = $tr.find('input.productcodeuser-' + rd).val();
                    var productName = $tr.find('input.productname-' + rd).val();
                    product.ProductCode = productCode;
                    product.ProductCodeUser = productCodeUser;
                    product.mp_ProductName = productName;
                    listPrd.push(product);
                });
                $('#ImportExcelModal').modal("hide");
                var url = '@Url.Action("ImportQR", "InvF_InventoryOut")';
                formData.append('listProduct', JSON.stringify(listPrd));
                $.ajax({
                    url: url,
                    data: formData,
                    type: 'post',
                    beforeSend: function () { },
                    success: function (result) {
                        //Endloading();
                        debugger;
                        var getData = result;
                        if (getData.Success == false || getData.Success == 'false') {
                            if (getData.Detail != null) {
                                showErrorDialog("Lỗi!", getData.Detail);
                            } else {
                                alert(getData.Messages[0]);
                            }
                        } else {
                            var data = result.data;
                            var length = data.length;
                            if (length == 0) {
                                alert("Không tìm thấy mã xác thực của sản phẩm");
                                return;
                            }
                            for (var i = 0; i < length; i++) {
                                var ProductCode = data[i].ProductCode;
                                var ProductCodeUser = data[i].mp_ProductCodeUser;
                                var ProductName = data[i].mp_ProductName;
                                var QRCode = data[i].QRCode;

                                var strHtml = getHtmlFromTemplate($('#rowtemplateQR'), {
                                    ProductCode: ProductCode,
                                    ProductCodeUser: ProductCodeUser,
                                    ProductName: ProductName,
                                    QRCode: QRCode,
                                    idx: 999999
                                });

                                $('#table-tbodyIDXacThuc').append(strHtml);
                                updateTableTrIdx($('#table-tbodyIDXacThuc tr'), false);
                            }
                        }
                    },
                    error: function () {
                        //Endloading();
                    },
                    cache: false,
                    contentType: false,
                    //dataType: "json",
                    processData: false
                });
            }
            else {
                alert('@MvcHtmlString.Create("Lưới danh mục hàng hóa trống!")');
            return false;
            }
        }
    }

    function ImportFileExcelSerial() {
        debugger
         var formData = new window.FormData($('#manageFormImportExcel')[0]);
        var incodeOut = commonUtils.returnValue('#InvCodeOut');
        if (commonUtils.isNullOrEmpty(incodeOut)) {
            var listToastr = [];
            objToastr = { ToastrType: 'error', ToastrMessage: '@MvcHtmlString.Create("Chưa chọn kho xuất".HtmlItemString("ordorderdl"))' };
            listToastr.push(objToastr);
            commonUtils.showToastr(listToastr);

            commonUtils.setFocus('InvCodeOut');
            return false;
        }

        else {
            var invBUPattern = '';
            var $option = $('#InvCodeOut').find(":selected");
            if ($option !== undefined && $option !== null && $option.length > 0) {
                invBUPattern = $option.attr('InvBUPattern');
            }


            formData.append('tax_file', $('input[type=file]')[0].files[0]);
            formData.append('invBUPattern', invBUPattern);

            $('#ImportExcelModal').modal("hide");

            var url = '@(Url.Action("ImportSerial", "InvF_InventoryOut"))';

            $.ajax({
                url: url,
                data: formData,
                type: 'post',
                beforeSend: function () { },
                success: function (objResult) {
                    debugger
                    if (objResult.Success) {
                        debugger
                        var listData = objResult.listDtlImport;
                        var listProductBase = objResult.list_MstProductUI;

                        if (listProductBase !== undefined && listProductBase !== null && listProductBase.length > 0) {
                            var listInventoryDtlAutoSearch = [];
                            var List_PrdBase = [];
                            for (var i = 0; i < listProductBase.length; i++) {
                                var objProductAutoSearch = {};
                                var listProductAutoSearch = [];


                                objProductAutoSearch.ProductCodeRoot = listProductBase[i].ProductCodeRoot;
                                objProductAutoSearch.ProductCodeBase = listProductBase[i].ProductCodeBase;
                                objProductAutoSearch.ProductCode = listProductBase[i].ProductCode;
                                objProductAutoSearch.ProductCodeUser = listProductBase[i].ProductCodeUser;
                                objProductAutoSearch.ProductName = listProductBase[i].ProductName;
                                objProductAutoSearch.FlagSerial = listProductBase[i].FlagSerial;
                                objProductAutoSearch.FlagLot = listProductBase[i].FlagLot;
                                objProductAutoSearch.UnitCode = listProductBase[i].UnitCode;
                                objProductAutoSearch.InvCodeInActual = listProductBase[i].InvCodeInActual;
                                objProductAutoSearch.Qty = listProductBase[i].Qty;
                                objProductAutoSearch.QtyTotalOK = listProductBase[i].QtyTotalOK;
                                objProductAutoSearch.UPOUT = listProductBase[i].UPOut;
                                objProductAutoSearch.UPOUTDesc = listProductBase[i].UPOutDesc;
                                objProductAutoSearch.ValOUTAfterDesc = listProductBase[i].ValOutAfterDesc;
                                objProductAutoSearch.Remark = listProductBase[i].Remark;
                                objProductAutoSearch.ValConvert = listProductBase[i].ValConvert;
                                listProductAutoSearch.push(objProductAutoSearch);

                                var productCodeBaseCur = listProductBase[i].ProductCodeBase;
                                var listProductBaseUI = listProductBase[i].lstUnitCodeUIByProduct.filter(function (m) {
                                    return m.ProductCodeBase === productCodeBaseCur;

                                });


                                for (var j = 0; j < listProductBaseUI.length; j++) {
                                    var listProductAutoSearchBase = [];
                                    var objProductAutoSearchBase = {};
                                    objProductAutoSearchBase.ProductCodeRoot = listProductBaseUI[j].ProductCodeRoot;
                                    objProductAutoSearchBase.ProductCodeBase = listProductBaseUI[j].ProductCodeBase;
                                    objProductAutoSearchBase.ProductCode = listProductBaseUI[j].ProductCode;
                                    objProductAutoSearchBase.ProductCodeUser = listProductBaseUI[j].ProductCodeUser;
                                    objProductAutoSearchBase.ProductName = listProductBaseUI[j].ProductName;
                                    objProductAutoSearchBase.FlagSerial = listProductBaseUI[j].FlagLot;
                                    objProductAutoSearchBase.FlagLot = listProductBaseUI[j].FlagSerial;
                                    objProductAutoSearchBase.UnitCode = listProductBaseUI[j].UnitCode;
                                    objProductAutoSearchBase.InvCodeInActual = listProductBaseUI[j].InvCodeInActual;
                                    objProductAutoSearchBase.Qty = listProductBaseUI[j].Qty;
                                    objProductAutoSearchBase.QtyTotalOK = listProductBaseUI[j].QtyTotalOK;
                                    objProductAutoSearchBase.SellPrice = listProductBaseUI[j].UPOut;
                                    objProductAutoSearchBase.DiscountPrice = listProductBaseUI[j].UPOutDesc;
                                    objProductAutoSearchBase.ValOUTAfterDesc = listProductBaseUI[j].Qty * (listProductBaseUI[j].UPOut - listProductBaseUI[j].UPOutDesc);
                                    objProductAutoSearchBase.Remark = listProductBaseUI[j].Remark;
                                    objProductAutoSearchBase.ValConvert = listProductBaseUI[j].ValConvert;
                                    listProductAutoSearchBase.push(objProductAutoSearchBase);
                                    var objProductBase = {
                                        LstProductAutoSearchBase: objProductAutoSearchBase
                                    };
                                    List_PrdBase.push(objProductBase);
                                }


                                var objProduct = {
                                    InvF_InventoryOutDtl: objProductAutoSearch,
                                    Lst_InvF_InventoryOutDtl: listProductAutoSearch,
                                    Lst_InvF_InventoryOutBase: List_PrdBase
                                };
                                listInventoryDtlAutoSearch.push(objProduct);


                            }

                            if (listInventoryDtlAutoSearch != null && listInventoryDtlAutoSearch != undefined && listInventoryDtlAutoSearch.length > 0) {
                                for (var i = 0; i < listInventoryDtlAutoSearch.length; i++) {
                                    renderInvF_InventoryOutDtl_Multi1(listInventoryDtlAutoSearch[i]);

                                }

                                var tongsl = 0.0;
                                tongTienHang();
                            }
                        }


                        debugger

                        var listChild = [];
                        if (listData !== undefined && listData !== null && listData.length > 0) {
                            for (var i = 0; i < listData.length; i++) {
                                var objSerialAutoSearch = {};
                                var listSerialAutoSearch = [];



                                objSerialAutoSearch.ProductCode = listData[i].ProductCode;
                                objSerialAutoSearch.SerialNo = listData[i].SerialNo;
                                objSerialAutoSearch.InvCodeInActual = listData[i].InvCodeOutActual;

                                listSerialAutoSearch.push(objSerialAutoSearch);
                                var objSerial = {
                                    Product_InvF_InventoryInInstSerial: objSerialAutoSearch,
                                    Lst_Mst_Inventory: listSerialAutoSearch
                                };
                                listChild.push(objSerial);
                            }

                            if (listChild !== null && listChild !== undefined && listChild.length > 0) {
                                for (var i = 0; i < listChild.length; i++) {
                                    renderProductInvFInventoryOutInstSerial(listChild[i]);
                                }
                                commonUtils.updateTableTrNotShowIdx($('#table-detailSerial tr.trdata'), true);
                            }
                        }



                    }

                    else {
                        var listError = [];
                        var message = commonUtils.returnValue(objResult.Messages[0]);
                        if (!commonUtils.isNullOrEmpty(message)) {
                            var objToastr = { ToastrType: 'error', ToastrMessage: message };
                            listError.push(objToastr);
                        }
                        if (listError !== undefined && listError !== null && listError.length > 0) {
                            commonUtils.showToastr(listError);
                        }
                        var detail = commonUtils.returnValue(objResult.Detail);
                        if (!commonUtils.isNullOrEmpty(detail)) {
                            _showErrorMsg123('Lỗi!', detail);
                        }
                    }
                },
                error: function () {
                    //Endloading();
                },
                cache: false,
                contentType: false,
                //dataType: "json",
                processData: false

            });
        }

    }

</script>


<script>
    function renderProductInventoryReturnSupDtlChild(data) {
        var obj_ProductInventoryReturnSupDtlChild = data.Product_InvF_InventoryReturnSupDtlChild;
        var productCode = obj_ProductInventoryReturnSupDtlChild.ProductCode;
        var $tableProduct_InvCodeInActual_Cache = $('#table-detailInvCodeOutActual');
        var $trInvCodeInActual = $tableProduct_InvCodeInActual_Cache.find('tr[productcode="' + productCode + '"]');
        var $divList_Product_InvCodeInActual_Cache = $trInvCodeInActual.find('div.products-list-cache');

        var InvCode = obj_ProductInventoryReturnSupDtlChild.InvCodeInActual;
        var QtyTotalOK = obj_ProductInventoryReturnSupDtlChild.QtyTotalOK;
        var QtyAvailOK = obj_ProductInventoryReturnSupDtlChild.Qty;
        if ($divList_Product_InvCodeInActual_Cache != null && $divList_Product_InvCodeInActual_Cache != undefined && $divList_Product_InvCodeInActual_Cache.length > 0) {
            var objProduct = {
                ProductCode: productCode,
                InvCodeInActual: InvCode,
                Qty: QtyAvailOK,
                QtyTotalOK: QtyTotalOK,
            };

            var extData = {
                idx: 9999,
            };

            var $divProduct_InvCodeInActual = $(commonUtils.getHtmlFromTemplate($('#tmpl_product_invcodeinactual_list_cache'), objProduct, extData));
            $divProduct_InvCodeInActual.appendTo($divList_Product_InvCodeInActual_Cache);
        }
    }
</script>


@*xu ly nhap tu don hang*@
<script>
    function FillCustomerOrder(thiz, urlGetOrderDetail) {
        debugger;
        var refno = $(thiz).val();
        var reftype = "";
        if (refno === "") {
            //alert("Đơn hàng chưa được nhập.");
            $('#RefType').val('');
            $('#RefNoSys').val('');
            $('#myInput').show();
            return;
        }
        else if (refno.length > 3) {
            var listPrefix = ['RO-', 'ODL', 'OSO'];
            var strPrefix = refno.substring(0, 3);
            if (!listPrefix.includes(strPrefix)) {
                alert("Số RefNo không hợp lệ!");
                $(thiz).val('');
                $(thiz).focus();
                $('#RefType').val('');
                $('#RefNoSys').val('');
                return;
            }
            else {
                if (strPrefix === 'RO-') {
                    $('#RefType').val('RO');
                    reftype = 'RO';
                    refno = refno.substring(3);
                }
                if (strPrefix === 'ODL') {
                    $('#RefType').val('ORDERDL');
                    reftype = 'ORDERDL';
                }
                if (strPrefix === 'OSO') {
                    $('#RefType').val('ORDERSO');
                    reftype = 'ORDERSO';
                }
            }
        }
        else {
            alert("Số RefNo không hợp lệ!");
            $(thiz).val('');
            $(thiz).focus();
            $('#RefType').val('');
            $('#RefNoSys').val('');
            return;
        }

        $.ajax({
            url: urlGetOrderDetail,
            data: {
                RefNo: refno,
                RefType: reftype
            },
            type: 'post',
            dataType: 'json',
            traditional: true,
            success: function (data) {
                debugger
                if (data.Success) {
                    var result = data.data;
                    if (result.length === 0) {
                        alert("Số RefNo không tồn tại trong hệ thống.");
                        return;
                    }
                    var order = result[0];
                    var CustomerCode = order.CustomerCodeSys;

                    var RefNoSys = "";
                    var QtyInvOutAvail = "";
                    if (reftype === 'RO') {
                        RefNoSys = order.RONoSys;
                        $('#InvFCFOutCode03').val(order.PlateNo);//Fill biển số
                    }
                    else {
                        RefNoSys = order.OrderNoSys;
                        QtyInvOutAvail = order.QtyInvOutAvail;
                    }

                    if (CustomerCode !== undefined && CustomerCode !== "") {
                        $('#CustomerCode').val(CustomerCode);
                        $('#CustomerCode').trigger('change');
                        //$('#CustomerCode').attr("readonly", "readonly");
                        $('#CustomerCode').attr("disabled", "disabled");
                    }

                    $('#RefNoSys').val(RefNoSys);
                    $('#QtyInvOutAvail').val(QtyInvOutAvail);

                    $('#myInput').hide();

                    // Xóa danh sách hàng hóa đang tồn tại trong lưới Nâng cấp 2020-08-06
                    $('#table-tbodyID').html('');
                    //


                    // Load lại danh sách sản phẩm theo đơn hàng bán hàng
                    //var htmlOption = "";
                    //if (result !== undefined) {
                    //    for (var i = 0; i < result.length; i++) {
                    //        debugger;
                    //        var productcodebase = result[i].ProductCodeBase;
                    //        var productcoderoot = result[i].ProductCodeRoot;
                    //        var productcode = result[i].ProductCode;
                    //        var flagLo = result[i].FlagLo;
                    //        var flagSerial = result[i].FlagSerial;
                    //        var flagCombo = result[i].FlagCombo;
                    //        var productname = result[i].ProductName;
                    //        var productcodeuser = result[i].ProductCodeUser;
                    //        var unitcode = result[i].UnitCode;
                    //        var valconvert = result[i].ValConvert;
                    //        var _QtyInvOutAvail = result[i].QtyInvOutAvail;

                    //        var opt = '<option QtyOrder="' + _QtyInvOutAvail + '" QtyInvOutAvail="' + _QtyInvOutAvail + '" productcodeuser="' + productcodeuser + '" valconvert="' + valconvert + '" productcodebase="' + productcodebase + '" productcoderoot="' + productcoderoot + '" value="' + productcode + '" flaglo="' + flagLo + '" flagserial="' + flagSerial + '" flagcombo="' + flagCombo + '" invcode="" productcode="' + productcode + '" productname="' + productname + '" unitcode="' + unitcode + '" sellprice="0" sellorder="0" qtytotalok="0" discountprice="0">' + productcodeuser + ' - ' + productname + ' (' + unitcode + ')</option>';
                    //        htmlOption += opt;
                    //    }
                    //}
                    //htmlOption += "<option value=\"Search\">Tìm kiếm</option>";
                    //$('#ProductCode').html(htmlOption);
                    //$('#ProductCode').val("");
                    //$('#ProductCode').trigger('change');
                    //

                } else {
                    showErrorDialog(data.Detail);
                }
            }
        });
    }

</script>



@*Xử lý nhập từ đon hàng*@

<script type="text/javascript">
    function FillCustomerOrder1(thiz, urlGetOrderDetail) {
        debugger
        var listError = [];
        var refno = $(thiz).val();
        var refType = $('#refType').val();
        if (commonUtils.isNullOrEmpty(refType)) {
            var objToastr = {
                ToastrType: 'error',
                ToastrMessage: 'Chưa chọn reftype!'
            };
            listError.push(objToastr);
        }
        if (commonUtils.isNullOrEmpty(refno)) {
            var objToastr = {
                ToastrType: 'error',
                ToastrMessage: 'Chưa chọn refno!'
            };
            listError.push(objToastr);
        }
        var token = $('#manageForm input[name=__RequestVerificationToken]').val();
        var invBUPattern = '';
        var $option = $('#InvCodeOut').find(":selected");
        if ($option !== undefined && $option !== null && $option.length > 0) {
            invBUPattern = $option.attr('InvBUPattern');
        }
        if (listError !== undefined && listError !== null && listError.length > 0) {
            commonUtils.showToastr(listError);

        }

        else {

            $.ajax({
                url: urlGetOrderDetail,
                data: {
                    RefNo: refno,
                    RefType: refType,
                    invBUPattern: invBUPattern,
                    __RequestVerificationToken: token
                },
                type: 'post',
                dataType: 'json',
                traditional: true,
                beforeSend: function () { }
            }).done(function (result) {
                if (result.Success) {
                    debugger;
                    
                    var lstRpt_OrderSummary_TotalProductForInv = result.LstRpt_OrderSummary_TotalProductForInv;
                    if (lstRpt_OrderSummary_TotalProductForInv == null || lstRpt_OrderSummary_TotalProductForInv.length == 0) {
                        var objToastr = {
                            ToastrType: 'error',
                            ToastrMessage: 'Số RefNo không có trong hệ thống!'
                        };
                        listError.push(objToastr);
                        commonUtils.showToastr(listError);
                        $('#CustomerCode').val('');
                        $('select#invinProductCode').val('');
                        $('select#invinProductCode').trigger('change');
                        $('#CustomerCode').trigger('change');
                        $('#CustomerCode').prop('disabled', false);
                    }
                    else {
                        var $select = $('select#invinProductCode');
                        var $tbodyProductsByOrder = $('tbody#table-tbodyIDProductsByOrder');
                        if ($select !== undefined && $select !== null && $tbodyProductsByOrder !== undefined && $tbodyProductsByOrder !== null) {
                            for (var i = 0; i < lstRpt_OrderSummary_TotalProductForInv.length; i++) {
                                debugger

                                var $optgroup = $select.find('optgroup');
                                if ($optgroup != null && $optgroup !== undefined) {
                                    var selected = '';
                                    var extData_Options = {
                                        selected: selected,
                                    };
                                    var $option = $(commonUtils.getHtmlFromTemplate($('#tmpl_optionproductinorder'), lstRpt_OrderSummary_TotalProductForInv[i], extData_Options));
                                    $option.appendTo($optgroup);
                                }

                                var customercodesys = lstRpt_OrderSummary_TotalProductForInv[i].CustomerCodeSys;
                                $('#CustomerCode').val(customercodesys);
                                $('#CustomerCode').trigger('change');
                                $('#CustomerCode').prop('disabled', true);

                                @*Add hàng hóa vào popup danh sách hàng hóa theo đơn hàng*@
                                var extData_Produtcs = {
                                    idx: i,
                                };
                                var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_productsbyorder_popup'), lstRpt_OrderSummary_TotalProductForInv[i], extData_Produtcs));
                                $item.appendTo($tbodyProductsByOrder);
                            }
                        }
                        



                    }


                    $('#table-tbodyID').html('');
                    $('#table-detailInvCodeOutActual').html('');
                    $('#table-detailLot').html('');
                    $('#table-detailSerial').html('');
                    $('#table-detailProductImport').html('');
                    $('#table-PopupHHTonKhoPB').html('');

                } else {
                    if (!commonUtils.isNullOrEmpty(result.Detail)) {
                        showErrorDialog(result.Detail);
                    }
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {

            }).always(function (jqXHROrData, textStatus, jqXHROrErrorThrown) {
                //alert("complete");
            });
        }
        
    }
</script>

<script>
    function ShowPopupProductSearch() {
        debugger

        //$('#ShowPopupProduct').modal({
        //    backdrop: false,
        //    keyboard: true,
        //});

        //$("#ShowPopupProduct").show();

        var orderNo = "";
          url = '@Url.Action("GetProductSearch", "ModalCommon")';

$.ajax({
                        url: url,
                        data: {
                            productkey: "",
                            showview: "1",
                            orderNo: orderNo
                        },
                        type: 'post',
                        dataType: 'json',
                        traditional: true,
                        success: function (data) {
                            if (data.Success) {
                                $('#ShowPopupProduct').modal({
                                    backdrop: false,
                                    keyboard: true,
                                });
                                $("#ShowPopupProduct").html(data.Html);
                                var display = $("#ShowPopupProduct").css('display');
                                if (display == "none") {
                                    $("#ShowPopupProduct").show();
                                }
                            } else {
                                showErrorDialog(data.Detail);
                            }
                        }
                    });

    }
</script>

<script type="text/javascript">
    function AddProductToList(thiz) {
        debugger


        var listError = [];
        let productCode = $(thiz).val();

        if (productCode != null && productCode != undefined && productCode != '') {

            let optSelect = $(thiz).find('option:selected');


            var customercodesys = $(optSelect).attr("customercodesys");
            var productCodeBase = $(optSelect).attr("ProductCodeBase");
            var productCodeUser = $(optSelect).attr("ProductCodeUser");
            var productCodeRoot = $(optSelect).attr("ProductCodeRoot");
            var productName = $(optSelect).attr("ProductName");
            var unitcode = $(optSelect).attr("UnitCode");
            var upsell = $(optSelect).attr("UPSell");
            var QtyAppr = $(optSelect).attr("QtyAppr");
            var QtyInvOutAvail = $(optSelect).attr("QtyInvOutAvail");
            var QtyTotalOK = $(optSelect).attr("QtyTotalOK");
            var FlagLot = $(optSelect).attr("FlagLot");
            var FlagSerial = $(optSelect).attr("FlagSerial");
            var FlagCombo = $(optSelect).attr("FlagCombo");
            var ValConvert = $(optSelect).attr("ValConvert");
            var orderNoSys = $(optSelect).attr("OrderNoSys");
            //var productCode = $(optSelect).attr("ProductCode");
            $('#RefNoSys').val(orderNoSys);

            var customerCodeSys = $(optSelect).attr("customercodesys");

            $('#CustomerCode').val(customerCodeSys);
            $('#CustomerCode').trigger('change');
            var DiscountPrice = '0';
            var valmstInventory = "";
            if ($('select.mstinventory').length > 0) {
                var selectKho = $('select.mstinventory').eq(0);
                var optionSelect = $(selectKho).find('option:selected');

                valmstInventory = optionSelect.attr("invBUPattern");

            }

            if (valmstInventory == "" || valmstInventory == null || valmstInventory == undefined) {
                var objToastr = {
                    ToastrType: 'error',
                    ToastrMessage: 'Chưa chọn kho xuất!'
                };
                listError.push(objToastr);
            }


            //check hàng hóa đã tồn tại trên lưới
            var rows = $('tbody#table-tbodyID tr.trdata').length;
            if (rows > 0) {
                var productExists = false;
                $('tbody#table-tbodyID tr.trdata').each(function () {
                    if (!productExists) {
                        var $trCur = $(this);
                        var productCodeCur = $trCur.attr('productcode');
                        if (productCodeCur === productCode) {
                            productExists = true;
                        }
                    }

                });

                if (productExists) {
                    var message = 'Hàng hóa "' + productName + '" đã tồn tại trên lưới'
                    objToastr = { ToastrType: 'error', ToastrMessage: message };
                    listError.push(objToastr);
                }
            }


            var qty = '1';
            var ValAmount = 0;

            if (listError !== undefined && listError !== null && listError.length > 0) {
                commonUtils.showToastr(listError);

            }
            else {


                let option = $(thiz).find('option:selected').val();
                if (option === "SEARCHDATA") {
                    ShowPopupProductSearch();
                }
                else {

                    var token = $('#manageForm input[name=__RequestVerificationToken]').val();

                    var dataInput = {
                        productCode: productCode,
                        InvBUPattern: valmstInventory,
                        productCodeBase: productCodeBase,
                        valconvert: ValConvert,
                        Qty: QtyAppr,
                        FlagSerial: FlagSerial,
                        FlagLo: FlagLot,

                        __RequestVerificationToken: token,
                    };
                    $.ajax({
                        type: 'post',
                        data: dataInput,
                        url: '@Url.Action("GetProductExactly", "ModalCommon")',
                        dataType: 'json',
                        beforeSend: function () {
                        }
                    }).done(function (objResult) {
                        debugger;
                        if (objResult.Success) {
                            ValAmount = Math.round(parseFloat(QtyAppr) * (parseFloat(objResult.objMST_ProductUI.SellPrice) - parseFloat(DiscountPrice)), 2);
                            var Lst_InvF_InventoryOutDtl = [];

                            var objInvF_InventoryOutDtl = {
                                ProductCode: productCode,
                                ProductCodeUser: productCodeUser,
                                ProductCodeBase: productCodeBase,
                                ProductCodeRoot: productCodeRoot,
                                ProductName: productName,
                                UnitCode: unitcode,
                                UPOUT: upsell,
                                QtyTotalOK: objResult.qtytotalok,
                                UPOUTDesc: DiscountPrice,
                                InvCodeInActual: objResult.invCodeMax,
                                Qty: QtyAppr,
                                ValOUTAfterDesc: ValAmount,
                                FlagLot: FlagLot,
                                FlagSerial: FlagSerial,
                                FlagCombo: FlagCombo,
                                Remark: '',


                            };
                            Lst_InvF_InventoryOutDtl.push(objInvF_InventoryOutDtl);
                            var Lst_ProductBase = objResult.Data;
                            var Lst_PhanBo = objResult.List;
                            debugger
                            var ValOUTAfterDesc = 0;
                            objBase = {
                                ValOUTAfterDesc: ValOUTAfterDesc,
                                Qty: QtyAppr
                            }


                            //Lst_ProductBase.map(item => item.objBase);
                            //for (var i = 0; i < Lst_ProductBase.length; i++) {
                            //    (Lst_ProductBase[i]).push(objBase);
                            //}
                            Lst_ProductBase.map(function (e) {
                                e.ValOUTAfterDesc = ValOUTAfterDesc;
                                e.Qty = QtyAppr;
                                //e.InvCodeInActual = objResult.invCodeMax;
                            });

                            var objInvF_InventoryOutDtlRender = {
                                InventoryOutDtl: Lst_InvF_InventoryOutDtl[0],
                                Lst_ProductBase: Lst_ProductBase,
                                Lst_PhanBo: Lst_PhanBo,
                                Lst_PhanBoLot: objResult.List_PhanBoLot,
                                Lst_PhanBoSerial: objResult.List_PhanBoSerial
                            };

                            //renderInvF_InventoryOutDtl(objInvF_InventoryOutDtlRender);
                            renderInvF_InventoryOutDtl123(objInvF_InventoryOutDtlRender);
                            tongTienHang();
                            $('#InvCodeOut').prop('disabled', true);
                            $('#myInput').val('');
                            commonUtils.setFocus('InvCodeOut');
                            return false;


                        }
                        else {
                            if (!commonUtils.isNullOrEmpty(objResult.Detail)) {
                                _showErrorMsg123('Lỗi!', objResult.Detail);
                            }
                        }
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                    }).always(function () {
                    });
                }
            }
        }
    }
</script>



@*xử lý đính kèm file*@
@* Xử lý file *@
<script type="text/javascript">
    $(document).ready(function () {
        debugger
            window.globalUploadFileUrl = '@Url.Action("UploadFile", "File")';
        $('#btn_add_file').click(function () {
            debugger
                commonUtils.uploadFile({
                    //neu xet window.globalUploadFileUrl thi ko can cai nay
                    //url:'@Url.Action("UploadFile", "File")',
                    fileTypes: '.doc, .docx, .xls, .xlsx, .ppt, .pptx, .pdf, .jpg, .png',
                    fileSizeWarning: 1048576,
                    success: function (data) {
                        if (data !== undefined && data !== null) {
                            data.FlagFileUpload = '0'; @*1: là file upload; 0: không là file được upload*@
                            data.filePath = data.url;
                            data.Description = '';
                        }
                        renderDocItem(data);
                        commonUtils.updateTableTrNotShowIdx($('#tbody-Order_FileUpload tr.trdata'), true);
                    }
                });
        });

        $('#btn_add_file_popup').click(function () {
            debugger
                commonUtils.uploadFile({
                    //neu xet window.globalUploadFileUrl thi ko can cai nay
                    //url:'@Url.Action("UploadFile", "File")',
                    fileTypes: '.doc, .docx, .xls, .xlsx, .ppt, .pptx, .pdf, .jpg, .png',
                    fileSizeWarning: 1048576,
                    success: function (data) {
                        if (data !== undefined && data !== null) {
                            data.FlagFileUpload = '0'; @*1: là file upload; 0: không là file được upload*@
                            data.filePath = data.url;
                            data.Description = '';
                        }
                        renderDocItemPopup(data);
                        commonUtils.updateTableTrNotShowIdx($('#tbody-Order_FileUploadPopup tr.trdata'), true);
                    }
                });
        });

    });


    var renderDocItem = function (data) {
        debugger
            var extData = {
                idx: 9999,
            };
            var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_order_fileupload'), data, extData));
            $item.appendTo($('#tbody-Order_FileUpload'));
            var viewtype = $("#viewtype").val();
            if (viewtype === "detail") {
                $item.find('td.td-event-delete').addClass('disabled-fix');
                $item.find('input.descript').addClass('disabled-fix');
            } else {
                $item.find('td.td-event-delete').removeClass('disabled-fix');
                $item.find('input.descript').removeClass('disabled-fix');
            }
    };

    var renderDocItemPopup = function (data) {
        debugger
        var extData = {
            idx: 9999,
        };
        var $item = $(commonUtils.getHtmlFromTemplate($('#tmpl_order_fileuploadpopup'), data, extData));
        $item.appendTo($('#tbody-Order_FileUploadPopup'));
        //var viewtype = $("#viewtype").val();
        //if (viewtype === "detail") {
        //    $item.find('td.td-event-delete').addClass('disabled-fix');
        //} else {
        //    $item.find('td.td-event-delete').removeClass('disabled-fix');
        //}
    };


        function deleteRowFileUpload(thiz) {
            var rows = $('#tbody-Order_FileUpload tr.trdata').length;
            if (rows > 0) {
                var tr = $(thiz).parent().parent();
                if (tr !== undefined && tr !== null) {
                    $(tr).remove();
                }
                if (rows > 1) {
                    commonUtils.updateTableTrNotShowIdx($('#tbody-Order_FileUpload tr.trdata'), true);
                } else {
                    // Css lại table head
                }
            }
            else {
                $('#tbody-Order_FileUpload').empty();
            }
    }

    function deleteRowFileUploadPopup(thiz) {
        var rows = $('#tbody-Order_FileUploadPopup tr.trdata').length;
        if (rows > 0) {
            var tr = $(thiz).parent().parent();
            if (tr !== undefined && tr !== null) {
                $(tr).remove();
            }
            if (rows > 1) {
                commonUtils.updateTableTrNotShowIdx($('#tbody-Order_FileUploadPopup tr.trdata'), true);
            } else {
                // Css lại table head
            }
        }
        else {
            $('#tbody-Order_FileUploadPopup').empty();
        }
    }

</script>



@*show popup cập nhật hồ sơ*@
<script type="text/javascript">
    function ShowPopupEditFile() {
        debugger
        var IF_InvOutNo = $('#IF_InvOutNo').val();
             var url = '@Url.Action("EditFile", "InvF_InventoryOut")';
        $.ajax({
            url: url,
            data: {
                IF_InvOutNo: IF_InvOutNo
            },
            type: 'post',
            dataType: 'json',
            traditional: true,
            success: function (data) {
                debugger
                if (data.Success) {
                    debugger
                    $('#ShowModalPopupEditFile').modal({
                        backdrop: false,
                        keyboard: true,
                    });
                    $('#ShowModalPopupEditFile').css('display', 'block');
                    $("#ShowModalPopupEditFile").html(data.Html);

                    $('select.profileStatusPopup').select2();

                } else {
                    showErrorDialog(data.Detail);
                }
            }
        });




    }
</script>

@*<script type="text/javascript">
        function ShowPopupEditFile() {

        }
    </script>*@






@*<script type="text/javascript">
        function SaveFileApprove() {
            debugger
            var IF_InvOutNo = $('#IF_InvOutNo').val();
            var Remark = $('#Remark').val();
            var profileStatusPopup = $('#profileStatusPopup').val();



            var Lst_InvF_InventoryOutAttachFileUI = [];
            var rows12 = $('tbody#tbody-Order_FileUpload tr.trdata').length;
            if (rows12 > 0) {
                $('tbody#tbody-Order_FileUploadPopup tr.trdata').each(function () {
                    debugger
                    var $tr = $(this);
                    var flagFileUpload = $tr.attr('flagfileupload');
                    var idx = $tr.attr('idx');
                    var filePath = commonUtils.returnValue($tr.find('input.filePath').val());
                    var fileId = commonUtils.returnValue($tr.find('input.fileId').val());
                    var fileName = commonUtils.returnValue($tr.find('input.fileName').val());
                    var description = commonUtils.returnValue($tr.find('input.descript').val());
                    var objOrd_OrderSRFilesUploadUI = {
                        Idx: idx,
                        IF_InvOutNo: IF_InvOutNo,
                        FlagIsFilePath: flagFileUpload,
                        AttachFileSpec: fileId,
                        AttachFileName: fileName,
                        AttachFileDesc: description
                    };
                    Lst_InvF_InventoryOutAttachFileUI.push(objOrd_OrderSRFilesUploadUI);
                });
            }


            var objInvF_InventoryOut = {};

            objInvF_InventoryOut.IF_InvOutNo = IF_InvOutNo;
            objInvF_InventoryOut.ProfileStatus = profileStatusPopup;
            objInvF_InventoryOut.Remark = Remark;
            var tem = {};

            tem.InvF_InventoryOut = objInvF_InventoryOut;
            tem.Lst_InvF_InventoryOutAttachFile = Lst_InvF_InventoryOutAttachFileUI;
            var modelCur = commonUtils.returnJSONValue(tem);
            var data = {
                __RequestVerificationToken: token,
                model: modelCur,
            };




            $.ajax({
                type: 'post',
                data: data,
                            url: '@Url.Action("GetProductExactly", "InvF_InventoryOut")',
                            dataType: 'json',
                            beforeSend: function () {
                            }
                        }).done(function (objResult) {
                            debugger;
                            if (objResult.Success) {
                                if (!commonUtils.isNullOrEmpty(objResult.Messages)) {
                                    var listToastr = [];
                                    objToastr = { ToastrType: 'success', ToastrMessage: objResult.Messages };
                                    listToastr.push(objToastr);
                                    commonUtils.showToastr(listToastr);
                                }
                                if (!commonUtils.isNullOrEmpty(objResult.RedirectUrl)) {
                                    commonUtils.window_location_href(objResult.RedirectUrl);
                                }
                            }
                            else {
                                if (!commonUtils.isNullOrEmpty(objResult.Detail)) {
                                    _showErrorMsg123('Lỗi!', objResult.Detail);
                                }
                            }

                        }).fail(function (jqXHR, textStatus, errorThrown) {
                        }).always(function () {
                        });


        }
    </script>*@