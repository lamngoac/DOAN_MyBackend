


@{
    ViewBag.Title = "Load_Table_InvF_InventoryInDtl";
    var startCount = 0;
    var fromdate = ViewBag.FromDate as string;
    var apprfromdate = ViewBag.ApprFromDate as string;
    var strStartCount = ViewBag.StartCount as string;
    if (!CUtils.IsNullOrEmpty(strStartCount))
    {
        startCount = Convert.ToInt32(strStartCount);
    }

    var init = CUtils.StrValue(ViewBag.init);
    var pageCur = CUtils.StrValue(ViewBag.PageCur);
    var pageCount = CUtils.StrValue(ViewBag.PageCount);


    var lst_Mst_ProductUI = new List<Mst_ProductUI>();
    if (ViewBag.lst_Mst_ProductUI != null)
    {
        lst_Mst_ProductUI = ViewBag.lst_Mst_ProductUI as List<Mst_ProductUI>;
    }



    //phan lam them
    var Lst_InvF_InventoryOutCover = new List<InvF_InventoryOutCover>();
    if (ViewBag.Lst_InvF_InventoryOutCover != null)
    {
        Lst_InvF_InventoryOutCover = ViewBag.Lst_InvF_InventoryOutCover as List<InvF_InventoryOutCover>;
    }

    var Lst_InvF_InventoryOutInstLot = new List<InvF_InventoryOutInstLot>();
    if (ViewBag.Lst_InvF_InventoryOutInstLot != null)
    {
        Lst_InvF_InventoryOutInstLot = ViewBag.Lst_InvF_InventoryOutInstLot as List<InvF_InventoryOutInstLot>;

    }

    var Lst_InvF_InventoryOutInstSerial = new List<InvF_InventoryOutInstSerial>();
    if (ViewBag.Lst_InvF_InventoryOutInstSerial != null)
    {
        Lst_InvF_InventoryOutInstSerial = ViewBag.Lst_InvF_InventoryOutInstSerial as List<InvF_InventoryOutInstSerial>;
    }

    var Lst_InvF_InventoryOutDtl = new List<InvF_InventoryOutDtl>();
    if (ViewBag.Lst_InvF_InventoryOutDtl != null)
    {
        Lst_InvF_InventoryOutDtl = ViewBag.Lst_InvF_InventoryOutDtl as List<InvF_InventoryOutDtl>;
    }



    string viewType = CUtils.StrValue(ViewBag.ViewType);
}


<div class="panel-body row no-margin no-padding" style="padding-left: 0px; padding-right: 0px;">
    <div class="col-12 padding-left-0 padding-right-0 div-scrollable" style="padding-top: 0!important;">
        <div style="width: 100%; float: left;">
            <div class="row no-margin margin-bottom-9" style="margin-top: 9px!important;">
                <div class="col-6"></div>
                <div class="col-6 text-right" style="margin-top: 9px;">
                    <span style="font-weight: bold">Tổng: </span><span id="spanTotalPrd" style="font-weight: bold">0</span>
                </div>
            </div>
            <table id="dynamic-table-thead" class="table table-striped table-bordered table-hover table-cus table-bottom-0 no-margin">
                <thead>
                    <tr class="trthead">
                        <th class="text-center cell-50">
                        </th>
                        <th fieldId="ProductCode" sorttype="T" fieldName="Mã hàng hóa" fieldActive="0" class="text-left cell-150">
                            @("Mã hàng hóa".HtmlItemString("productcode"))
                        </th>
                        <th fieldId="INVNAME" sorttype="T" fieldName="Tên hàng hóa (TV)" fieldActive="0" class="text-left cell-150">
                            @("Tên hàng hóa (TV)".HtmlItemString(""))
                        </th>
                        <th fieldId="INVCODEPARENT" sorttype="T" fieldName="Đơn vị tính" fieldActive="0" class="text-left cell-100">
                            @("Đơn vị tính".HtmlItemString(""))
                        </th>
                        <th fieldId="INVADDRESS" sorttype="T" fieldName="Số lượng ban đầu " fieldActive="0" class="text-left cell-150">
                            @("Số lượng ban đầu".HtmlItemString(""))
                        </th>
                        <th fieldId="" sorttype="T" fieldName="Số lượng xuất" fieldActive="0" class="text-left cell-150">
                            @("Số lượng xuất".HtmlItemString(""))
                        </th>
                        <th fieldId="INVTYPE" sorttype="T" fieldName="Số lượng còn lại" fieldActive="0" class="text-left cell-150">
                            @("Số lượng còn lại ".HtmlItemString(""))
                        </th>
                        <th fieldId="INVTYPE" sorttype="T" fieldName="Đơn giá" fieldActive="0" class="text-left cell-100">
                            @("Đơn giá".HtmlItemString(""))
                        </th>
                        <th fieldId="INVTYPE" sorttype="T" fieldName="Giảm giá" fieldActive="0" class="text-left cell-100">
                            @("Giảm giá".HtmlItemString(""))
                        </th>
                        <th fieldId="INVTYPE" sorttype="T" fieldName="Thành tiền" fieldActive="0" class="text-left cell-150">
                            @("Thành tiền".HtmlItemString(""))
                        </th>
                        <th fieldId="INVTYPE" sorttype="T" fieldName="Ghi chú" fieldActive="0" class="text-left cell-200">
                            @("Ghi chú".HtmlItemString(""))
                        </th>
                    </tr>
                </thead>
            </table>
            <div id="" class="scrollable" style="width: 100%; float: left">
                <table id="dynamic-table-thead-tbody" class="table table-borderedtable-cus table-bottom-0 dynamic-table-tbody dynamic-table-thead-tbody">
                    <tbody id="table-tbodyID" class="GetPrd"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>




@*Thông tin chi tiết LOT của hàng hóa*@
<table class="display-none">
    <tbody id="table-detailLot"></tbody>
</table>

@*Thông tin chi tiết Serial của hàng hóa*@
<table class="display-none">
    <tbody id="table-detailSerial"></tbody>
</table>

@*Thông tin số lượng hàng hóa theo vị trí (Hiện tại mới thấy hàng hóa "thường" sử dụng)*@
<table class="display-none">
    <tbody id="table-detailInvCodeOutActualExportCross"></tbody>
</table>



<script type="text/javascript">
    var objLotAutoSearch = {};
    var listLotAutoSearch = [];
    var listLot = [];

    @if(Lst_InvF_InventoryOutInstLot != null && Lst_InvF_InventoryOutInstLot.Count > 0)
    {
        foreach(var item in Lst_InvF_InventoryOutInstLot)
        {
            <text>
    debugger
            objLotAutoSearch = {};
    listLotAutoSearch = [];
    objLotAutoSearch.InvCodeInActual = '@CUtils.StrValue(item.InvCodeOutActual)';
    objLotAutoSearch.ProductCode = '@CUtils.StrValue(item.ProductCode)';
    objLotAutoSearch.ProductLotNo = '@CUtils.StrValue(item.ProductLotNo)';
    objLotAutoSearch.ProductionDate = '@CUtils.StrValue(item.ProductionDate)';
    objLotAutoSearch.ExpiredDate = '@CUtils.StrValue(item.ExpiredDate)';
    objLotAutoSearch.Qty = '@CUtils.StrValue(item.Qty)';
    objLotAutoSearch.QtyTotalOK = '@CUtils.StrValue(item.QtyInv)';
    listLotAutoSearch.push(objLotAutoSearch);

    var objLot = {
        Product_InvF_InventoryOutInstLot: objLotAutoSearch,
        Lst_Mst_Inventory: listLotAutoSearch
    };
    listLot.push(objLot);

             </text>
        }
    }

</script>


<script type="text/javascript">
    debugger
    var objSerialAutoSearch = {};
    var listSerialAutoSearch = [];

    var listSerial = [];

    @if(Lst_InvF_InventoryOutInstSerial != null && Lst_InvF_InventoryOutInstSerial.Count > 0)
    {
        foreach(var item in Lst_InvF_InventoryOutInstSerial)
        {
            <text>
    objSerialAutoSearch = {};
    listSerialAutoSearch = [];
    objSerialAutoSearch.InvCodeInActual = '@CUtils.StrValue(item.InvCodeOutActual)';
    objSerialAutoSearch.ProductCode = '@CUtils.StrValue(item.ProductCode)';
    objSerialAutoSearch.SerialNo = '@CUtils.StrValue(item.SerialNo)';
    listSerialAutoSearch.push(objSerialAutoSearch);

    var objSerial = {
        Product_InvF_InventoryInInstSerial: objSerialAutoSearch,
        Lst_Mst_Inventory: listSerialAutoSearch
    };
    listSerial.push(objSerial);

    </text>

        }
    }


</script>


<script type="text/javascript">
    debugger
    var objProductAutoSearch = {};
    var listProductAutoSearch = [];

    var listInventoryDtlAutoSearch = [];

    var listProductAutoSearchBase = [];
    var objProductAutoSearchBase = {};

    var List_PrdBase = [];

    @if (Lst_InvF_InventoryOutCover != null && Lst_InvF_InventoryOutCover.Count > 0)
    {
        foreach(var item in Lst_InvF_InventoryOutCover)
        {
            <text>
    objProductAutoSearch = {};
    listProductAutoSearch = [];
    var flagCombo = '@CUtils.StrValue(item.ProductType)';
    if (flagCombo == 'COMBO') {
        objProductAutoSearch.FlagCombo = '1';
    }
    else {
        objProductAutoSearch.FlagCombo = '0';
    }
                objProductAutoSearch.InvCodeInActual = '@CUtils.StrValue(item.ListInvCodeOutActual)';
                objProductAutoSearch.ProductCode = '@CUtils.StrValue(item.ProductCodeRoot)';
                objProductAutoSearch.ProductName = '@CUtils.StrValue(item.mp_root_ProductName)';
                objProductAutoSearch.ProductCodeUser = '@CUtils.StrValue(item.mp_root_ProductCodeUser)';
                objProductAutoSearch.ProductCodeBase = '@CUtils.StrValue(item.mp_root_ProductCodeBase)';
                objProductAutoSearch.Qty = '@CUtils.StrValue(item.Qty)';
                objProductAutoSearch.QtyOut = '0';
                objProductAutoSearch.QtyRemain = '@CUtils.StrValue(item.Qty)';
                objProductAutoSearch.QtyTotalOK = '@CUtils.StrValue(item.QtyInv)';
                objProductAutoSearch.UnitCode = '@CUtils.StrValue(item.UnitCode)';
                objProductAutoSearch.UPOUT = '@CUtils.StrValue(item.UPOut)';
                objProductAutoSearch.UPOUTDesc = '@CUtils.StrValue(item.ValOutDesc)';
                objProductAutoSearch.ValOUTAfterDesc = '@CUtils.StrValue(item.ValOutAfterDesc)';
                objProductAutoSearch.Remark = '@CUtils.StrValue(item.Remark)';
                objProductAutoSearch.FlagLot = '@CUtils.StrValue(item.FlagLot)';
    objProductAutoSearch.FlagSerial = '@CUtils.StrValue(item.FlagSerial)';
    objProductAutoSearch.ValConvert = '@CUtils.StrValue(item.ValConvert)';
    listProductAutoSearch.push(objProductAutoSearch);

    </Text>

            foreach(var ite in item.lstUnitCodeUIByProduct)
            {
                <text>
    objProductAutoSearchBase = {};
    listProductAutoSearchBase = [];
    objProductAutoSearchBase.ProductCodeRoot = '@CUtils.StrValue(ite.ProductCodeRoot)';
    objProductAutoSearchBase.ProductCodeBase = '@CUtils.StrValue(ite.ProductCodeBase)';
    objProductAutoSearchBase.ProductCode = '@CUtils.StrValue(ite.ProductCode)';
    objProductAutoSearchBase.ProductCodeUser = '@CUtils.StrValue(ite.ProductCodeUser)';
    objProductAutoSearchBase.ProductName = '@CUtils.StrValue(ite.ProductName)';
    objProductAutoSearchBase.FlagSerial = '@CUtils.StrValue(ite.FlagSerial)';
    objProductAutoSearchBase.FlagLot = '@CUtils.StrValue(ite.FlagLo)';
    objProductAutoSearchBase.UnitCode = '@CUtils.StrValue(ite.UnitCode)';
    objProductAutoSearchBase.InvCodeInActual = '@CUtils.StrValue(ite.InvCodeInActual)';
    objProductAutoSearchBase.Qty = '@CUtils.StrValue(ite.Qty)';
    objProductAutoSearchBase.QtyOut = '0';
    objProductAutoSearchBase.QtyRemain = '@CUtils.StrValue(ite.Qty)';
    objProductAutoSearchBase.QtyTotalOK = '@CUtils.StrValue(ite.QtyTotalOK)';
    objProductAutoSearchBase.SellPrice = '@CUtils.StrValue(ite.SellPrice)';
    objProductAutoSearchBase.DiscountPrice = '@CUtils.StrValue(ite.DiscountPrice)';
    objProductAutoSearchBase.ValOUTAfterDesc = '@CUtils.StrValue(ite.ValOUTAfterDesc)';
    objProductAutoSearchBase.Remark = '@CUtils.StrValue(ite.Remark)';
    objProductAutoSearchBase.ValConvert = '@CUtils.StrValue(ite.ValConvert)';
    listProductAutoSearchBase.push(objProductAutoSearchBase);
    var objProductBase = {
        LstProductAutoSearchBase: objProductAutoSearchBase
    };

    List_PrdBase.push(objProductBase);

    </text>
            }
        <text>

                var objProduct = {
                InvF_InventoryOutDtl: objProductAutoSearch,
                    Lst_InvF_InventoryOutDtl: listProductAutoSearch,
                    Lst_InvF_InventoryOutBase: List_PrdBase
                };
            listInventoryDtlAutoSearch.push(objProduct);


    </text>
        }
    }
</script>

<script>
    var objSerialAutoDtlSearch = {};
    var listSerialAutoDtlSearch = [];

    var listHHDtl = [];

    @if(Lst_InvF_InventoryOutDtl !=  null && Lst_InvF_InventoryOutDtl.Count > 0)
    {
        foreach(var item in Lst_InvF_InventoryOutDtl)
        {
            <text>
            objSerialAutoDtlSearch = {};
            listSerialAutoDtlSearch = [];
    objSerialAutoDtlSearch.ProductCode = '@CUtils.StrValue(item.ProductCode)';
    objSerialAutoDtlSearch.InvCodeInActual = '@CUtils.StrValue(item.InvCodeOutActual)';
    objSerialAutoDtlSearch.Qty = '@CUtils.StrValue(item.Qty)';
    objSerialAutoDtlSearch.QtyOut = '0';
    objSerialAutoDtlSearch.QtyRemain = '@CUtils.StrValue(item.Qty)';
    objSerialAutoDtlSearch.QtyTotalOK = '@CUtils.StrValue(item.QtyInv)';
    listSerialAutoDtlSearch.push(objSerialAutoDtlSearch);
    var objHHDTL = {
        Product_InvF_InventoryOutHHDtl: objSerialAutoDtlSearch,
        Lst_InvF_InventoryOutHHDtl: listSerialAutoDtlSearch
    };
    listHHDtl.push(objHHDTL)
            </text>
        }
    }
</script>


<script>
    $(document).ready(function () {
        if (listInventoryDtlAutoSearch != null && listInventoryDtlAutoSearch != undefined && listInventoryDtlAutoSearch.length > 0) {
            for (var i = 0; i < listInventoryDtlAutoSearch.length; i++) {
                renderInvF_InventoryOutDtl_MultiExportCross(listInventoryDtlAutoSearch[i]);
            }
            commonUtils.updateTableTrNotShowIdx($('#table-tbodyID tr.trdata'), true);
            commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeOutActualExportCross tr.trdata'), true);
            var tongsl = 0.0;
            var rows = $('tbody#table-tbodyID tr').length;
            if (rows > 0) {
                $('#table-tbodyID tr.trdata').each(function () {
                    var $tr = $(this);
                    var rd = $tr.attr('rd');
                    var fQty = commonUtils.parseFloat(commonUtils.returnValue($tr.find('input.qtyout-' + rd).val()));
                  

                    tongsl += fQty;
                });
                document.getElementById('spanTotalPrd').textContent = tongsl;

            }
        }
        if (listHHDtl != null && listHHDtl != undefined && listHHDtl.length > 0) {
            debugger
            for (var j = 0; j < listHHDtl.length; j++) {

                debugger
                var productCode = commonUtils.returnValue(listHHDtl[j].Product_InvF_InventoryOutHHDtl.ProductCode);

                @* Xóa hàng hóa - vị trí đã lưu cache *@
                var $tableProduct_InvCodeInActual_Cache = $('#table-detailInvCodeOutActualExportCross'); @* Cache hàng hóa - vị trí *@
                var rowOlds = $tableProduct_InvCodeInActual_Cache.find('tr[productcode="' + productCode + '"]').length;
                if (rowOlds > 0) {
                    $tableProduct_InvCodeInActual_Cache.find('tr[productcode="' + productCode + '"]').each(function () {
                        var $tr = $(this);
                        var $divList_Product_InvCodeInActual = $tr.find('div.products-list-cache');
                        if ($divList_Product_InvCodeInActual !== undefined && $divList_Product_InvCodeInActual !== null) {

                            $divList_Product_InvCodeInActual.find('div.result[productcode="' + productCode + '"]').each(function () {
                                var $div = $(this);
                                $div.remove();

                            });
                        }

                    });
                }


            }
            for (var i = 0; i < listHHDtl.length; i++) {
                renderProductInvFInventoryOutDtl(listHHDtl[i]);
            }
            commonUtils.updateTableTrNotShowIdx($('#table-detailInvCodeOutActualExportCross tr.trdata'), true);
        }

        if (listLot != null && listLot !== undefined && listLot.length > 0) {
            for (var i = 0; i < listLot.length; i++) {
                renderProductInvFInventoryOutInstLot(listLot[i]);
            }
            commonUtils.updateTableTrNotShowIdx($('#table-detailLot tr.trdata'), true);
        }

        if (listSerial != null && listSerial != undefined && listSerial.length > 0) {


            for (var i = 0; i < listSerial.length; i++) {
                renderProductInvFInventoryOutInstSerial(listSerial[i]);
            }
            commonUtils.updateTableTrNotShowIdx($('#table-detailSerial tr.trdata'), true);
        }


    });
</script>